@use "@poppy/utils/input";
@import "@poppy/poppy.globals";

/**
 * @prop --border-radius: Border radius
 *
 * @prop --background: Background color
 *
 * @prop --color: Change border and thumd color
 * @prop --required-color: Change required star color
 * @prop --checked-color: Change border and thumd color when toggle is checked
 *
 * @prop --opacity: Change border and thumd opacity
 *
 * @prop --animation-duration: Animation duration
 */

// Toogle
// ----------------------------------------------------------------

:host {
  --background: #{get-color("base.100")};
  --handleoffsetcalculator: calc(var(--handleoffset) * -1);
  --border-radius: #{get-radius(xxl)};

  @include input.label;

  box-sizing: border-box;
  display: inline-flex;
  flex-shrink: 0;
  align-items: center;
  justify-content: space-between;
  gap: 4px;

  > input {
    appearance: none;

    margin: 0;
    margin-inline-start: auto;
    border-width: 1px;
    border-style: solid;
    border-radius: var(--border-radius);
    border-color: currentColor;
    background-color: currentColor;
    box-shadow:
      var(--handleoffsetcalculator) 0 0 2px var(--background) inset,
      0 0 0 2px var(--background) inset,
      var(--togglehandleborder, 0 0);

    color: var(--color, #{get-color("base.content", var(--opacity, 0.5))});

    cursor: pointer;
    transition:
      color,
      background,
      box-shadow var(--animation-duration, 0.2s) ease-out;

    &:focus-visible {
      outline-color: var(--color, #{get-color("base.content", var(--opacity, 0.2))});
      outline-style: solid;
      outline-width: 2px;
      outline-offset: 2px;
    }
    &:checked {
      --handleoffsetcalculator: var(--handleoffset);
      background-image: none;
      color: var(--checked-color);
    }
  }
}

// Toogle Size
// ----------------------------------------------------------------

:host([size="xs"]),
:host-context(pop-list[size="xs"]) {
  --handleoffset: 0.5rem;

  > input {
    width: 1.5rem;
    height: 1rem;
  }
}
:host([size="sm"]),
:host-context(pop-list[size="sm"]) {
  --handleoffset: 0.75rem;

  > input {
    width: 2rem;
    height: 1.25rem;
  }
}
:host([size="md"]),
:host(:not([size])) {
  --handleoffset: 1.5rem;

  > input {
    width: 3rem;
    height: 1.5rem;
  }
}
:host([size="lg"]),
:host-context(pop-list[size="lg"]) {
  --handleoffset: 2rem;

  > input {
    width: 4rem;
    height: 2rem;
  }
}

// Toogle Color
// ----------------------------------------------------------------

@mixin generate-color($colors...) {
  @each $color in $colors {
    $base: get-color("#{$color}.base", var(--opacity, 1));

    :host([color="#{$color}"]) > input:checked {
      --color: #{$base};
      --checked-color: #{$base};
    }
  }
}
@include generate-color(primary, secondary, accent, info, success, warning, error);

:host(:not([color])) > input:checked {
  --checked-color: #{get-color("base.content", var(--opacity, 1))};
}

// Toogle State
// ----------------------------------------------------------------

:host([indeterminate]) > input {
  box-shadow:
    calc(1.5rem / 2) 0 0 2px var(--background) inset,
    calc(1.5rem / -2) 0 0 2px var(--background) inset,
    0 0 0 2px var(--background) inset,
    calc(1.5rem / 2) 0 0 3px currentColor inset,
    calc(1.5rem / -2) 0 0 3px currentColor inset;
  color: var(--checked-color, #{get-color("base.content")});
}

:host([disabled]) > input {
  $base: get-color("base.content");
  $base-oklch: get-color("base.content", $oklch: true);

  --color: oklch(#{$base-oklch} / var(--opacity, 1));
  --togglehandleborder: 0 0 0 3px #{$base} inset, var(--handleoffsetcalculator) 0 0 3px #{$base} inset;

  border-color: var(--color, #{$base});
  background-color: transparent;
  cursor: not-allowed;
  opacity: 0.3;
}

// Toggle Context
// ----------------------------------------------------------------

:host-context(pop-item) {
  grid-column: span 2;

  > .label {
    padding-inline-start: 0;
  }
}
