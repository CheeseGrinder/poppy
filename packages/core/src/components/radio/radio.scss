@use "../../global/styles/radius";
@use "../../global/styles/theme";
@use "../../global/styles/input";

/**
 * @prop --border-radius: Border radius
 * @prop --border-color: Border color
 * @prop --border-opacity: Border opacity
 *
 * @prop --background: Background color
 * @prop --opacity: Change background opacity
 *
 * @prop --animation-duration: Animation duration
 */

// Radio
// ----------------------------------------------------------------

:host {
  @include input.label;

  display: inline-flex;
  align-items: center;
  justify-content: space-between;
  gap: 4px;
  flex-shrink: 0;

  outline: none;

  > input {
    border-width: 1px;
    border-style: solid;
    border-radius: var(--border-radius, #{radius.$full});
    border-color: var(--border-color, oklch(theme.get-color("base.content") / var(--border-opacity, 0.2)));

    margin: 0;
    margin-inline-start: auto;
    appearance: none;
    cursor: pointer;

    &:focus {
      box-shadow: none;
    }
    &:focus-visible {
      outline-style: solid;
      outline-width: 2px;
      outline-offset: 2px;
      outline-color: var(--border-color, oklch(theme.get-color("base.content")));
    }
    &:checked {
      background-color: var(--background, oklch(theme.get-color("base.content")));
      background-image: none;

      animation: radiomark var(--animation-duration, 0.2s) ease-out;

      box-shadow:
        0 0 0 4px var(--shadow, oklch(theme.get-color("base.100"))) inset,
        0 0 0 4px var(--shadow, oklch(theme.get-color("base.100"))) inset;
    }
  }

  @keyframes radiomark {
    0% {
      box-shadow:
        0 0 0 12px var(--shadow, oklch(theme.get-color("base.100"))) inset,
        0 0 0 12px var(--shadow, oklch(theme.get-color("base.100"))) inset;
    }
    50% {
      box-shadow:
        0 0 0 3px var(--shadow, oklch(theme.get-color("base.100"))) inset,
        0 0 0 3px var(--shadow, oklch(theme.get-color("base.100"))) inset;
    }
    100% {
      box-shadow:
        0 0 0 4px var(--shadow, oklch(theme.get-color("base.100"))) inset,
        0 0 0 4px var(--shadow, oklch(theme.get-color("base.100"))) inset;
    }
  }
}

// Radio size
// ----------------------------------------------------------------

:host([size="xs"]),
:host-context(pop-list[size="xs"]) {
  > input {
    height: 1rem;
    width: 1rem;
  }
}
:host([size="sm"]),
:host-context(pop-list[size="sm"]) {
  > input {
    height: 1.25rem;
    width: 1.25rem;
  }
}
:host([size="md"]),
:host(:not([size])) {
  > input {
    height: 1.5rem;
    width: 1.5rem;
  }
}
:host([size="lg"]),
:host-context(pop-list[size="lg"]) {
  > input {
    height: 2rem;
    width: 2rem;
  }
}

// Radio colors
// ----------------------------------------------------------------

@mixin generate-color($colors...) {
  @each $color in $colors {
    $base: theme.get-color("#{$color}.base");

    :host([color="#{$color}"]) {
      --border-color: oklch(#{$base} / var(--border-opacity, 1));
      --background: oklch(#{$base} / var(--opacity, 1));
    }
  }
}
@include generate-color(primary, secondary, accent, info, success, warning, error);

:host(:not([color])) {
  --border-color: oklch(#{theme.get-color("base.content")} / var(--border-opacity, 1));
  --background: oklch(#{theme.get-color("base.content")} / var(--opacity, 1));
}

// Radio state
// ----------------------------------------------------------------

:host([disabled]) {
  --border-color: oklch(#{theme.get-color("base.content")});
  --background: oklch(#{theme.get-color("base.content")});

  > input {
    opacity: var(--opacity, 0.2);

    cursor: not-allowed;
  }
}

// Radio Context
// ----------------------------------------------------------------

:host-context(pop-item) {
  grid-column: span 2;

  > .label {
    padding-inline-start: 0;
  }
}
:host-context(pop-list[size="xs"]) > .label {
  padding-top: 2px;
  padding-bottom: 2px;
}
:host-context(pop-list[size="sm"]) > .label {
  padding-top: 4px;
  padding-bottom: 4px;
}
