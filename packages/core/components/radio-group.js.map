{"file":"radio-group.js","mappings":"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","names":[],"sources":["src/components/radio-group/radio-group.tsx"],"sourcesContent":["import { componentConfig, config } from '#config';\r\nimport {\r\n  AttachInternals,\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h,\r\n} from '@stencil/core';\r\nimport type { Color, Size } from 'src/interfaces';\r\nimport type { RadioGroupCompareFn } from './radio-group.interface';\r\n\r\nlet radioGroupIds = 0;\r\n\r\n/**\r\n * @slot - Slot for all of the `pop-radio`\r\n */\r\n@Component({\r\n  tag: 'pop-radio-group',\r\n  formAssociated: true,\r\n})\r\nexport class RadioGroup implements ComponentInterface {\r\n  #inputId = `ion-rg-${radioGroupIds++}`;\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  /**\r\n   * The name of the control, which is submitted with the form data.\r\n   */\r\n  @Prop() name: string = this.#inputId;\r\n\r\n  /**\r\n   * the value of the radio group.\r\n   */\r\n  @Prop({ mutable: true }) value?: any | null;\r\n  @Watch('value')\r\n  onValueChange(value: any) {\r\n    this.internals.setFormValue(value, value);\r\n    this.popValueChange.emit({\r\n      value: value,\r\n    });\r\n    this.popChange.emit({\r\n      value,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If `true`, apply the required property to all `pop-radio`.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) required?: boolean;\r\n\r\n  /**\r\n   * If `true`, apply the disabled property to all `pop-radio`.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) disabled?: boolean;\r\n\r\n  /**\r\n   * If `true`, the radios can be deselected.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ mutable: true }) allowEmpty?: boolean;\r\n\r\n  /**\r\n   * This property allows developers to specify a custom function\r\n   * for comparing objects when determining the selected option in the\r\n   * ion-radio-group. When not specified, the default behavior will use strict\r\n   * equality (===) for comparison.\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ mutable: true }) compare?: RadioGroupCompareFn | string | null;\r\n\r\n  /**\r\n   * The color to use from your application's color palette.\r\n   * Default options are: `\"primary\"`, `\"secondary\"`, `\"accent\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `\"error\"`.\r\n   * For more information on colors, see [theming](/docs/theming/basics).\r\n   *\r\n   * If the `pop-radio` as no color, it will apply to it\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) color?: Color;\r\n\r\n  /**\r\n   * Change size of the component\r\n   * Options are: `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`.\r\n   *\r\n   * If the `pop-radio` as no size, it will apply to it\r\n   *\r\n   * @config @default 'md'\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) size?: Size;\r\n\r\n  /**\r\n   * The `popChange` event is fired when the user select an option.\r\n   * Unlike the ionInput event, the `popChange` event is fired when the user click on the element.\r\n   *\r\n   */\r\n  @Event() popChange: EventEmitter<RadioGroupChangeEventDetail>;\r\n\r\n  /**\r\n   * Emitted when the `value` property has changed.\r\n   * This is used to ensure that `ion-radio` can respond\r\n   * to any value property changes from the group.\r\n   *\r\n   * @internal\r\n   */\r\n  @Event() popValueChange!: EventEmitter<RadioGroupChangeEventDetail>;\r\n\r\n  formResetCallback(): void {\r\n    this.value = undefined;\r\n  }\r\n\r\n  formStateRestoreCallback(state: string): void {\r\n    this.value = state;\r\n  }\r\n\r\n  componentWillLoad(): void {\r\n    componentConfig.apply(this, 'pop-radio-group', {\r\n      required: false,\r\n      disabled: false,\r\n      allowEmpty: false,\r\n      size: config.get('defaultSize', 'md'),\r\n    });\r\n  }\r\n\r\n  componentDidLoad(): void {\r\n    this.#radios.forEach(radio => {\r\n      radio.name = this.name;\r\n      if (this.required) radio.required = this.required;\r\n      if (this.disabled) radio.disabled = this.disabled;\r\n    });\r\n    this.#applyColor();\r\n    this.#applySize();\r\n    this.#applyCheck();\r\n  }\r\n\r\n  #applyColor(): void {\r\n    if (!this.color) return;\r\n    this.#radios.filter(radio => !radio.color).forEach(radio => (radio.color = this.color));\r\n  }\r\n\r\n  #applySize(): void {\r\n    if (!this.size) return;\r\n    this.#radios.filter(radio => !radio.size).forEach(radio => (radio.size = this.size));\r\n  }\r\n\r\n  #applyCheck(): void {\r\n    if (this.value) {\r\n      this.popValueChange.emit({\r\n        value: this.value,\r\n      });\r\n      return;\r\n    }\r\n    if (this.allowEmpty) return;\r\n\r\n    const radios = this.#radios;\r\n    const radio = radios.find(radio => !radio.disabled);\r\n\r\n    if (!radio) return;\r\n    radio.checked = true;\r\n  }\r\n\r\n  get #radios() {\r\n    return Array.from(this.host.querySelectorAll('pop-radio'));\r\n  }\r\n\r\n  #onClick = (ev: Event) => {\r\n    ev.preventDefault();\r\n\r\n    const target = ev.target as HTMLElement;\r\n    const radio = target.closest('pop-radio');\r\n\r\n    if (!radio || radio.disabled) return;\r\n\r\n    const currentValue = this.value;\r\n    const newValue = radio.value;\r\n\r\n    this.value = currentValue !== newValue ? newValue : this.allowEmpty ? undefined : newValue;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host onClick={this.#onClick}>\r\n        <slot />\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}