{"file":"helpers.js","mappings":"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","names":[],"sources":["src/utils/helpers.ts"],"sourcesContent":["import { JSX } from '@stencil/core';\r\nimport { JSXBase } from '@stencil/core/internal';\r\nimport { APP_TAG } from 'src/framework.constant';\r\n\r\nexport type Attributes = { [key: string]: any };\r\n\r\n/**\r\n * Elements inside of web components sometimes need to inherit global attributes\r\n * set on the host. For example, the inner input in `pop-input` should inherit\r\n * the `title` attribute that developers set directly on `pop-input`. This\r\n * helper function should be called in componentWillLoad and assigned to a variable\r\n * that is later used in the render function.\r\n *\r\n * This does not need to be reactive as changing attributes on the host element\r\n * does not trigger a re-render.\r\n */\r\nexport const inheritAttributes = (el: HTMLElement, attributes: string[] = []) => {\r\n  const attributeObject: Attributes = {};\r\n\r\n  attributes.forEach(attr => {\r\n    if (el.hasAttribute(attr)) {\r\n      const value = el.getAttribute(attr);\r\n      if (value !== null) {\r\n        attributeObject[attr] = el.getAttribute(attr);\r\n      }\r\n      el.removeAttribute(attr);\r\n    }\r\n  });\r\n\r\n  return attributeObject;\r\n};\r\n\r\n/**\r\n * List of available ARIA attributes + `role`.\r\n * Removed deprecated attributes.\r\n * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\r\n */\r\nconst ariaAttributes = [\r\n  'role',\r\n  'aria-activedescendant',\r\n  'aria-atomic',\r\n  'aria-autocomplete',\r\n  'aria-braillelabel',\r\n  'aria-brailleroledescription',\r\n  'aria-busy',\r\n  'aria-checked',\r\n  'aria-colcount',\r\n  'aria-colindex',\r\n  'aria-colindextext',\r\n  'aria-colspan',\r\n  'aria-controls',\r\n  'aria-current',\r\n  'aria-describedby',\r\n  'aria-description',\r\n  'aria-details',\r\n  'aria-disabled',\r\n  'aria-errormessage',\r\n  'aria-expanded',\r\n  'aria-flowto',\r\n  'aria-haspopup',\r\n  'aria-hidden',\r\n  'aria-invalid',\r\n  'aria-keyshortcuts',\r\n  'aria-label',\r\n  'aria-labelledby',\r\n  'aria-level',\r\n  'aria-live',\r\n  'aria-multiline',\r\n  'aria-multiselectable',\r\n  'aria-orientation',\r\n  'aria-owns',\r\n  'aria-placeholder',\r\n  'aria-posinset',\r\n  'aria-pressed',\r\n  'aria-readonly',\r\n  'aria-relevant',\r\n  'aria-required',\r\n  'aria-roledescription',\r\n  'aria-rowcount',\r\n  'aria-rowindex',\r\n  'aria-rowindextext',\r\n  'aria-rowspan',\r\n  'aria-selected',\r\n  'aria-setsize',\r\n  'aria-sort',\r\n  'aria-valuemax',\r\n  'aria-valuemin',\r\n  'aria-valuenow',\r\n  'aria-valuetext',\r\n];\r\n\r\n/**\r\n * Returns an array of aria attributes that should be copied from\r\n * the shadow host element to a target within the light DOM.\r\n * @param el The element that the attributes should be copied from.\r\n * @param ignoreList The list of aria-attributes to ignore reflecting and removing from the host.\r\n * Use this in instances where we manually specify aria attributes on the `<Host>` element.\r\n */\r\nexport const inheritAriaAttributes = (el: HTMLElement, ignoreList?: string[]) => {\r\n  let attributesToInherit = ariaAttributes;\r\n  if (ignoreList && ignoreList.length > 0) {\r\n    attributesToInherit = attributesToInherit.filter(attr => !ignoreList.includes(attr));\r\n  }\r\n  return inheritAttributes(el, attributesToInherit);\r\n};\r\n\r\ndeclare const __zone_symbol__requestAnimationFrame: typeof window.requestAnimationFrame;\r\n\r\n/**\r\n * Patched version of requestAnimationFrame that avoids ngzone\r\n * Use only when you know ngzone should not run\r\n */\r\nexport const raf = (h: FrameRequestCallback) => {\r\n  if (typeof __zone_symbol__requestAnimationFrame === 'function') {\r\n    return __zone_symbol__requestAnimationFrame(h);\r\n  }\r\n  if (typeof requestAnimationFrame === 'function') {\r\n    return requestAnimationFrame(h);\r\n  }\r\n  return setTimeout(h);\r\n};\r\n\r\n/**\r\n * Waits for a component to be ready for\r\n * both custom element and non-custom element builds.\r\n * If non-custom element build, el.componentOnReady\r\n * will be used.\r\n * For custom element builds, we wait a frame\r\n * so that the inner contents of the component\r\n * have a chance to render.\r\n *\r\n * Use this utility rather than calling\r\n * el.componentOnReady yourself.\r\n */\r\nexport const componentOnReady = (el: any, callback: any) => {\r\n  if (el.componentOnReady) {\r\n    // eslint-disable-next-line custom-rules/no-component-on-ready-method\r\n    el.componentOnReady().then((resolvedEl: any) => callback(resolvedEl));\r\n  } else {\r\n    raf(() => callback(el));\r\n  }\r\n};\r\n\r\nexport const getAppRoot = (doc: Document) => {\r\n  return doc.querySelector(APP_TAG) || doc.body;\r\n};\r\n\r\ntype PopElements = JSX.IntrinsicElements;\r\ntype ComponentTags = keyof PopElements;\r\n\r\nexport const hostContext = (host: Element, parent: ComponentTags): boolean => {\r\n  return !!host.closest(parent);\r\n};\r\n\r\nexport const getHostContextProperty = <\r\n  Tag extends keyof PopElements,\r\n  Prop extends keyof Omit<PopElements[Tag], keyof Omit<JSXBase.HTMLAttributes, 'color'>>,\r\n  Type extends PopElements[Tag][Prop],\r\n>(\r\n  host: Element,\r\n  parent: Tag,\r\n  prop: Prop,\r\n  placeholder: Type,\r\n): null | PopElements[Tag][Prop] => {\r\n  const hostContext = host.closest(parent);\r\n  if (!hostContext) {\r\n    return null;\r\n  }\r\n  return hostContext[prop as string] ?? placeholder;\r\n};\r\n"],"version":3}