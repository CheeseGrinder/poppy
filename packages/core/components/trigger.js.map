{"file":"trigger.js","mappings":";;;;;;;;;;;;MAIa,iBAAiB;IAA9B;;QACE,6CAAsB;KAwDvB;;;;IAnDC,cAAc;QACZ,uBAAA,IAAI,kCAAS,EAAE,KAAf,IAAI,CAAa,CAAC;QAClB,uBAAA,IAAI,8BAAY,SAAS,MAAA,CAAC;KAC3B;;;;;;;;IASD,WAAW,CAAC,OAAyB,EAAE,OAAe,EAAE,SAAwB,OAAO;QACrF,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,MAAM,SAAS,GAAG,OAAO,KAAK,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;QAClF,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,CAAC,IAAI,CACV,mDAAmD,OAAO,gIAAgI,EAC1L,OAAO,CACR,CAAC;YACF,OAAO;SACR;QAED,MAAM,2BAA2B,GAAG,CAAC,QAAqB,EAAE,SAA2B;YACrF,MAAM,WAAW,GAAG,CAAC,EAAS;gBAC5B,EAAE,CAAC,cAAc,EAAE,CAAC;gBACpB,SAAS,CAAC,OAAO,EAAE,CAAC;aACrB,CAAC;YACF,QAAQ,CAAC,gBAAgB,CAAC,uBAAA,IAAI,iEAAU,MAAd,IAAI,EAAW,MAAM,CAAC,EAAE,WAAW,CAAC,CAAC;YAE/D,OAAO;gBACL,QAAQ,CAAC,mBAAmB,CAAC,uBAAA,IAAI,iEAAU,MAAd,IAAI,EAAW,MAAM,CAAC,EAAE,WAAW,CAAC,CAAC;aACnE,CAAC;SACH,CAAC;QAEF,uBAAA,IAAI,8BAAY,2BAA2B,CAAC,SAAS,EAAE,OAAO,CAAC,MAAA,CAAC;KACjE;IAWD,OAAO,MAAM;QACX,OAAO,IAAI,iBAAiB,EAAE,CAAC;KAChC;CACF;6JAZW,MAAqB;IAC7B,MAAM,QAAQ,GAAqD;QACjE,KAAK,EAAE,OAAO;QACd,KAAK,EAAE,YAAY;QACnB,cAAc,EAAE,aAAa;KAC9B,CAAC;IACF,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC1B,CAAC;;;;","names":[],"sources":["src/utils/trigger.ts"],"sourcesContent":["import { OverlayInterface } from './overlay';\r\n\r\nexport type TriggerAction = 'click' | 'hover' | 'context-menu';\r\n\r\nexport class TriggerController {\r\n  #destroy?: () => void;\r\n\r\n  /**\r\n   * Removes the click listener from the trigger element.\r\n   */\r\n  removeListener(): void {\r\n    this.#destroy?.();\r\n    this.#destroy = undefined;\r\n  }\r\n\r\n  /**\r\n   * Adds a click listener to the trigger element.\r\n   * Presents the overlay when the trigger is clicked.\r\n   *\r\n   * @param overlay The overlay element.\r\n   * @param trigger The ID of the element to add a click listener to.\r\n   */\r\n  addListener(overlay: OverlayInterface, trigger: string, action: TriggerAction = 'click'): void {\r\n    this.removeListener();\r\n\r\n    const triggerEl = trigger !== undefined ? document.getElementById(trigger) : null;\r\n    if (!triggerEl) {\r\n      console.warn(\r\n        `[Poppy Warning]: A trigger element with the ID \"${trigger}\" was not found in the DOM. The trigger element must be in the DOM when the \"trigger\" property is set on an overlay component.`,\r\n        overlay,\r\n      );\r\n      return;\r\n    }\r\n\r\n    const configureTriggerInteraction = (targetEl: HTMLElement, overlayEl: OverlayInterface) => {\r\n      const openOverlay = (ev: Event): void => {\r\n        ev.preventDefault();\r\n        overlayEl.present();\r\n      };\r\n      targetEl.addEventListener(this.#getEvent(action), openOverlay);\r\n\r\n      return () => {\r\n        targetEl.removeEventListener(this.#getEvent(action), openOverlay);\r\n      };\r\n    };\r\n\r\n    this.#destroy = configureTriggerInteraction(triggerEl, overlay);\r\n  }\r\n\r\n  #getEvent(action: TriggerAction) {\r\n    const triggers: Record<TriggerAction, keyof HTMLElementEventMap> = {\r\n      click: 'click',\r\n      hover: 'mouseenter',\r\n      'context-menu': 'contextmenu',\r\n    };\r\n    return triggers[action];\r\n  }\r\n\r\n  static create() {\r\n    return new TriggerController();\r\n  }\r\n}\r\n"],"version":3}