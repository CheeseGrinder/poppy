{"file":"config.js","mappings":"MAIa,eAAe;IAA5B;QACU,WAAM,GAAG,IAAI,GAAG,EAAsB,CAAC;KA0ChD;IAxCC,KAAK,CAAC,UAAmB;QACvB,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAQ,CAAC,CAAC;KAC1D;IAED,GAAG,CAA4B,SAAc,EAAE,MAAoB;QACjE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;KACpC;IAED,GAAG,CAA4B,SAAc,EAAE,WAAyB,EAAkB;QACxF,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,QAAQ,CAAC;KAC/C;IAGD,KAAK,CAA4B,GAAQ,EAAE,GAAQ,EAAE,YAAgD;QACnG,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,SAAU,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAEvF,CAAC,GAAG,UAAU,CAAC,CAAC,OAAO,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,KAAK,SAAU,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACrF;IAED,OAAO,CACL,SAAc,EACd,IAAU,EACV,KAAyB;QAEzB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE;YACzB,GAAI,MAAiB;YACrB,CAAC,IAAI,GAAG,KAAK;SACd,CAAC,CAAC;KACJ;IAED,OAAO,CACL,SAAc,EACd,IAAU,EACV,QAA6B;QAE7B,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACnC,OAAO,MAAO,CAAC,IAAI,CAAC,IAAK,QAA+B,CAAC;KAC1D;CACF;MAEY,eAAe,GAAG,IAAI,eAAe;;MC9CrC,MAAM;IAAnB;QACU,WAAM,GAAG,IAAI,GAAG,EAA8B,CAAC;KAaxD;IAXC,KAAK,CAAC,MAAuB;QAC3B,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAQ,CAAC,CAAC;KACtD;IAED,GAAG,CAAqC,GAAS,EAAE,KAA4B;QAC7E,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KAC7B;IAED,GAAG,CAAqC,GAAS,EAAE,QAAgC;QACjF,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC;KACzC;CACF;MAEY,MAAM,GAAG,IAAI,MAAM;;;;","names":[],"sources":["src/config/components.config.ts","src/config/config.ts"],"sourcesContent":["import { Configuration } from '@cheese-grinder/stencil-component-config';\r\n\r\ntype Options = Configuration.ComponentsConfig;\r\n\r\nexport class ComponentConfig {\r\n  private config = new Map<keyof Options, any>();\r\n\r\n  reset(Components: Options): void {\r\n    this.config = new Map(Object.entries(Components) as any);\r\n  }\r\n\r\n  set<Tag extends keyof Options>(component: Tag, config: Options[Tag]): void {\r\n    this.config.set(component, config);\r\n  }\r\n\r\n  get<Tag extends keyof Options>(component: Tag, fallback: Options[Tag] = {} as Options[Tag]): Options[Tag] {\r\n    return this.config.get(component) ?? fallback;\r\n  }\r\n\r\n  apply(ref: any, tag: string, defaultValue: Record<string, any>): void;\r\n  apply<Tag extends keyof Options>(ref: any, tag: Tag, defaultValue: Options[Tag] & Record<string, any>): void {\r\n    const component = this.get(tag);\r\n    const uniqueKeys = new Set([...Object.keys(component!), ...Object.keys(defaultValue)]);\r\n\r\n    [...uniqueKeys].forEach(key => (ref[key] ??= component![key] ?? defaultValue[key]));\r\n  }\r\n\r\n  setProp<Tag extends keyof Options, Prop extends keyof Options[Tag]>(\r\n    component: Tag,\r\n    prop: Prop,\r\n    value: Options[Tag][Prop],\r\n  ): void {\r\n    const config = this.get(component);\r\n    this.config.set(component, {\r\n      ...(config as object),\r\n      [prop]: value,\r\n    });\r\n  }\r\n\r\n  getProp<Tag extends keyof Options, Prop extends keyof Options[Tag]>(\r\n    component: Tag,\r\n    prop: Prop,\r\n    fallback?: Options[Tag][Prop],\r\n  ): Options[Tag][Prop] {\r\n    const config = this.get(component);\r\n    return config![prop] ?? (fallback as Options[Tag][Prop]);\r\n  }\r\n}\r\n\r\nexport const componentConfig = new ComponentConfig();\r\n","import { Size } from 'src/interfaces';\r\nimport { Configuration } from '@cheese-grinder/stencil-component-config';\r\n\r\nexport class Config {\r\n  private config = new Map<keyof FrameworkConfig, any>();\r\n\r\n  reset(config: FrameworkConfig): void {\r\n    this.config = new Map(Object.entries(config) as any);\r\n  }\r\n\r\n  set<Conf extends keyof FrameworkConfig>(key: Conf, value: FrameworkConfig[Conf]): void {\r\n    this.config.set(key, value);\r\n  }\r\n\r\n  get<Conf extends keyof FrameworkConfig>(key: Conf, fallback?: FrameworkConfig[Conf]): FrameworkConfig[Conf] {\r\n    return this.config.get(key) ?? fallback;\r\n  }\r\n}\r\n\r\nexport const config = new Config();\r\n\r\nexport interface FrameworkConfig {\r\n  defaultSize?: Size;\r\n}\r\n\r\nexport type PoppyConfigInit = {\r\n  components?: Configuration.ComponentsConfig;\r\n} & FrameworkConfig;\r\n"],"version":3}