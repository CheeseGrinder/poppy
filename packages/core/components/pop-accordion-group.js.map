{"file":"pop-accordion-group.js","mappings":";;;;;;;;;;;MAOa,cAAc;;;;;;;;QAiFzB,kCAAW,CAAC,EAAS;YACnB,EAAE,CAAC,cAAc,EAAE,CAAC;YAEpB,MAAM,SAAS,GAAG,EAAE,CAAC,MAAiC,CAAC;YACvD,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,QAAQ;gBAAE,OAAO;YAEnE,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;YAC5B,MAAM,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC;YAEjC,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAI,CAAC,MAAM;oBACT,OAAO,KAAK,SAAS;0BACjB,CAAC,SAAS,CAAC;0BACX,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;8BAC7B,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC;8BAC7C,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;aACrC;iBAAM;gBACL,IAAI,CAAC,MAAM,GAAG,OAAO,KAAK,SAAS,GAAG,SAAS,GAAG,IAAI,CAAC;aACxD;SACF,EAAC;;;;;;IAvEF,cAAc,CAAC,KAAwB;QACrC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACxB,KAAK;SACN,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAClB,KAAK;SACN,CAAC,CAAC;KACJ;IAED,iBAAiB;QACf,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,qBAAqB,EAAE;YACjD,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAC;KACJ;IAED,gBAAgB;QACd,uBAAA,IAAI,iEAAY,CAAC,OAAO,CAAC,SAAS;YAChC,IAAI,IAAI,CAAC,QAAQ;gBAAE,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YACtD,IAAI,IAAI,CAAC,QAAQ;gBAAE,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;SACvD,CAAC,CAAC;QACH,uBAAA,IAAI,4DAAW,MAAf,IAAI,CAAa,CAAC;KACnB;IAkDD,MAAM;QACJ,QACE,EAAC,IAAI,qDAAC,OAAO,EAAE,uBAAA,IAAI,+BAAS,IAC1B,8DAAQ,CACH,EACP;KACH;;;;;;;;;;;;;;IArDC,IAAI,CAAC,IAAI,CAAC,MAAM;QAAE,OAAO;IAEzB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;QACxB,KAAK,EAAE,IAAI,CAAC,MAAM;KACnB,CAAC,CAAC;AACL,CAAC;IAGC,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,CAAC;AACjE,CAAC;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/accordion-group/accordion-group.tsx"],"sourcesContent":["import { componentConfig } from '#config';\r\nimport { Component, ComponentInterface, Element, Event, EventEmitter, Host, Prop, Watch, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'pop-accordion-group',\r\n  shadow: true,\r\n})\r\nexport class AccordionGroup implements ComponentInterface {\r\n  @Element() host: HTMLElement;\r\n\r\n  /**\r\n   * If `true`, the user cannot interact with the element.\r\n   *\r\n   * @config @default \"false\"\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) readonly?: boolean;\r\n\r\n  /**\r\n   * If `true`, the user cannot interact with the element.\r\n   *\r\n   * @config @default \"false\"\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) disabled?: boolean;\r\n\r\n  /**\r\n   * If `true`, the user can open multiple accordion.\r\n   *\r\n   * @config @default \"false\"\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) multiple: boolean;\r\n\r\n  /**\r\n   * name of the active the accordion.\r\n   */\r\n  @Prop({ mutable: true }) active?: string | string[];\r\n  @Watch('active')\r\n  onActiveChange(value: string | string[]) {\r\n    this.popActiveChange.emit({\r\n      value,\r\n    });\r\n    this.popChange.emit({\r\n      value,\r\n    });\r\n  }\r\n\r\n  componentWillLoad(): void {\r\n    componentConfig.apply(this, 'pop-accordion-group', {\r\n      readonly: false,\r\n      disabled: false,\r\n      multiple: false,\r\n    });\r\n  }\r\n\r\n  componentDidLoad(): void {\r\n    this.#accordions.forEach(accordion => {\r\n      if (this.readonly) accordion.readonly = this.readonly;\r\n      if (this.disabled) accordion.disabled = this.disabled;\r\n    });\r\n    this.#applyOpen();\r\n  }\r\n\r\n  #applyOpen(): void {\r\n    if (!this.active) return;\r\n\r\n    this.popActiveChange.emit({\r\n      value: this.active,\r\n    });\r\n  }\r\n\r\n  get #accordions() {\r\n    return Array.from(this.host.querySelectorAll('pop-accordion'));\r\n  }\r\n\r\n  /**\r\n   * The `popChange` event is fired when the user select an open of close an accordion.\r\n   *\r\n   */\r\n  @Event() popChange: EventEmitter<AccordionGroupChangeEventDetail>;\r\n\r\n  /**\r\n   * Emitted when the `active` property has changed.\r\n   * This is used to ensure that `pop-accordion` can respond\r\n   * to any value property changes from the group.\r\n   *\r\n   * @internal\r\n   */\r\n  @Event() popActiveChange!: EventEmitter<AccordionGroupChangeEventDetail>;\r\n\r\n  #onClick = (ev: Event) => {\r\n    ev.preventDefault();\r\n\r\n    const accordion = ev.target as HTMLPopAccordionElement;\r\n    if (!accordion || accordion.disabled || accordion.readonly) return;\r\n\r\n    const current = this.active;\r\n    const newActive = accordion.name;\r\n\r\n    if (this.multiple) {\r\n      this.active =\r\n        current === undefined\r\n          ? [newActive]\r\n          : this.active.includes(newActive)\r\n            ? [...this.active].filter(a => a !== newActive)\r\n            : [newActive, ...this.active];\r\n    } else {\r\n      this.active = current !== newActive ? newActive : null;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host onClick={this.#onClick}>\r\n        <slot />\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}