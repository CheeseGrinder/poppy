{"file":"radio.js","mappings":"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","names":[],"sources":["src/components/radio/radio.scss?tag=pop-radio&encapsulation=shadow","src/components/radio/radio.tsx"],"sourcesContent":["@use \"../../global/styles/radius\";\r\n@use \"../../global/styles/theme\";\r\n@use \"../../global/styles/input\";\r\n\r\n/**\r\n * @prop --border-radius: Border radius\r\n * @prop --border-color: Border color\r\n * @prop --border-opacity: Border opacity\r\n *\r\n * @prop --background: Background color\r\n * @prop --opacity: Change background opacity\r\n *\r\n * @prop --animation-duration: Animation duration\r\n */\r\n\r\n// Radio\r\n// ----------------------------------------------------------------\r\n\r\n:host {\r\n  @include input.label;\r\n\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  gap: 4px;\r\n  flex-shrink: 0;\r\n\r\n  outline: none;\r\n\r\n  > input {\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-radius: var(--border-radius, #{radius.$full});\r\n    border-color: var(--border-color, oklch(theme.get-color(\"base.content\") / var(--border-opacity, 0.2)));\r\n\r\n    margin: 0;\r\n    margin-inline-start: auto;\r\n    appearance: none;\r\n    cursor: pointer;\r\n\r\n    &:focus {\r\n      box-shadow: none;\r\n    }\r\n    &:focus-visible {\r\n      outline-style: solid;\r\n      outline-width: 2px;\r\n      outline-offset: 2px;\r\n      outline-color: var(--border-color, oklch(theme.get-color(\"base.content\")));\r\n    }\r\n    &:checked {\r\n      background-color: var(--background, oklch(theme.get-color(\"base.content\")));\r\n      background-image: none;\r\n\r\n      animation: radiomark var(--animation-duration, 0.2s) ease-out;\r\n\r\n      box-shadow:\r\n        0 0 0 4px var(--shadow, oklch(theme.get-color(\"base.100\"))) inset,\r\n        0 0 0 4px var(--shadow, oklch(theme.get-color(\"base.100\"))) inset;\r\n    }\r\n  }\r\n\r\n  @keyframes radiomark {\r\n    0% {\r\n      box-shadow:\r\n        0 0 0 12px var(--shadow, oklch(theme.get-color(\"base.100\"))) inset,\r\n        0 0 0 12px var(--shadow, oklch(theme.get-color(\"base.100\"))) inset;\r\n    }\r\n    50% {\r\n      box-shadow:\r\n        0 0 0 3px var(--shadow, oklch(theme.get-color(\"base.100\"))) inset,\r\n        0 0 0 3px var(--shadow, oklch(theme.get-color(\"base.100\"))) inset;\r\n    }\r\n    100% {\r\n      box-shadow:\r\n        0 0 0 4px var(--shadow, oklch(theme.get-color(\"base.100\"))) inset,\r\n        0 0 0 4px var(--shadow, oklch(theme.get-color(\"base.100\"))) inset;\r\n    }\r\n  }\r\n}\r\n\r\n// Radio size\r\n// ----------------------------------------------------------------\r\n\r\n:host([size=\"xs\"]),\r\n:host-context(pop-list[size=\"xs\"]) {\r\n  > input {\r\n    height: 1rem;\r\n    width: 1rem;\r\n  }\r\n}\r\n:host([size=\"sm\"]),\r\n:host-context(pop-list[size=\"sm\"]) {\r\n  > input {\r\n    height: 1.25rem;\r\n    width: 1.25rem;\r\n  }\r\n}\r\n:host([size=\"md\"]),\r\n:host(:not([size])) {\r\n  > input {\r\n    height: 1.5rem;\r\n    width: 1.5rem;\r\n  }\r\n}\r\n:host([size=\"lg\"]),\r\n:host-context(pop-list[size=\"lg\"]) {\r\n  > input {\r\n    height: 2rem;\r\n    width: 2rem;\r\n  }\r\n}\r\n\r\n// Radio colors\r\n// ----------------------------------------------------------------\r\n\r\n@mixin generate-color($colors...) {\r\n  @each $color in $colors {\r\n    $base: theme.get-color(\"#{$color}.base\");\r\n\r\n    :host([color=\"#{$color}\"]) {\r\n      --border-color: oklch(#{$base} / var(--border-opacity, 1));\r\n      --background: oklch(#{$base} / var(--opacity, 1));\r\n    }\r\n  }\r\n}\r\n@include generate-color(primary, secondary, accent, info, success, warning, error);\r\n\r\n:host(:not([color])) {\r\n  --border-color: oklch(#{theme.get-color(\"base.content\")} / var(--border-opacity, 1));\r\n  --background: oklch(#{theme.get-color(\"base.content\")} / var(--opacity, 1));\r\n}\r\n\r\n// Radio state\r\n// ----------------------------------------------------------------\r\n\r\n:host([disabled]) {\r\n  --border-color: oklch(#{theme.get-color(\"base.content\")});\r\n  --background: oklch(#{theme.get-color(\"base.content\")});\r\n\r\n  > input {\r\n    opacity: var(--opacity, 0.2);\r\n\r\n    cursor: not-allowed;\r\n  }\r\n}\r\n\r\n// Radio Context\r\n// ----------------------------------------------------------------\r\n\r\n:host-context(pop-item) {\r\n  grid-column: span 2;\r\n\r\n  > .label {\r\n    padding-inline-start: 0;\r\n  }\r\n}\r\n:host-context(pop-list[size=\"xs\"]) > .label {\r\n  padding-top: 2px;\r\n  padding-bottom: 2px;\r\n}\r\n:host-context(pop-list[size=\"sm\"]) > .label {\r\n  padding-top: 4px;\r\n  padding-bottom: 4px;\r\n}\r\n","import { componentConfig, config } from '#config';\r\nimport { compareOptions } from '#utils/forms';\r\nimport { Attributes, inheritAriaAttributes } from '#utils/helpers';\r\nimport { Component, ComponentInterface, Element, Event, EventEmitter, Host, Method, Prop, h } from '@stencil/core';\r\nimport type { Color, Size } from 'src/interfaces';\r\nimport { Show } from '../Show';\r\n\r\n/**\r\n * Radio buttons allow the user to select one option from a set.\r\n *\r\n * @slot - Slot for the content of the label\r\n *\r\n * @part label - The native HTML label element that wrap the text .\r\n * @part native - The native HTML input element.\r\n */\r\n@Component({\r\n  tag: 'pop-radio',\r\n  styleUrl: 'radio.scss',\r\n  shadow: true,\r\n})\r\nexport class Radio implements ComponentInterface {\r\n  #inputId = `pop-radio-${radioIds++}`;\r\n  #inheritedAttributes: Attributes;\r\n\r\n  #radioGroup?: HTMLPopRadioGroupElement;\r\n  #nativeInput!: HTMLInputElement;\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  /**\r\n   * The name of the control, which is submitted with the form data.\r\n   */\r\n  @Prop() name: string = this.#inputId;\r\n\r\n  /**\r\n   * The value of the radio does not mean if it's checked or not, use the `checked`\r\n   * property for that.\r\n   *\r\n   * The value of a radio is analogous to the value of a `<input type=\"radio\">`,\r\n   * it's only used when the radio participates in a native `<form>`.\r\n   */\r\n  @Prop({ mutable: true }) value?: any | null = '';\r\n\r\n  /**\r\n   * If `true`, the radio is selected.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) checked?: boolean = false;\r\n\r\n  /**\r\n   * If `true`, the user must fill in a value before submitting a form.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) required?: boolean;\r\n\r\n  /**\r\n   * If `true`, the user cannot interact with the element.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) disabled?: boolean;\r\n\r\n  /**\r\n   * If `true`, the element will be focused on page load.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) autoFocus?: boolean = false;\r\n\r\n  /**\r\n   * The color to use from your application's color palette.\r\n   * Default options are: `\"primary\"`, `\"secondary\"`, `\"accent\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `\"error\"`.\r\n   * For more information on colors, see [theming](/docs/theming/basics).\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) color?: Color;\r\n\r\n  /**\r\n   * Change size of the component\r\n   * Options are: `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`.\r\n   *\r\n   * @config @default 'md'\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) size?: Size;\r\n\r\n  /**\r\n   * Emitted when the input has focus.\r\n   */\r\n  @Event() popFocus: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted when the input loses focus.\r\n   */\r\n  @Event() popBlur: EventEmitter<void>;\r\n\r\n  componentWillLoad(): void {\r\n    this.#inheritedAttributes = inheritAriaAttributes(this.host);\r\n\r\n    componentConfig.apply(this, 'pop-radio', {\r\n      required: false,\r\n      disabled: false,\r\n      size: config.get('defaultSize', 'md'),\r\n    });\r\n  }\r\n\r\n  connectedCallback(): void {\r\n    this.#radioGroup = this.host.closest('pop-radio-group');\r\n\r\n    this.#radioGroup?.addEventListener('popValueChange', this.#handleValueChanged);\r\n  }\r\n\r\n  disconnectedCallback(): void {\r\n    this.#radioGroup?.removeEventListener('popValueChange', this.#handleValueChanged);\r\n  }\r\n\r\n  #handleValueChanged = (): void => {\r\n    if (!this.#radioGroup) return;\r\n\r\n    const { compare, value: newValue } = this.#radioGroup;\r\n    const currentValue = this.value;\r\n\r\n    this.checked = compareOptions(currentValue, newValue, compare);\r\n  };\r\n\r\n  /**\r\n   * Sets focus on the native `textarea` in `pop-textarea`. Use this method instead of the global\r\n   * `textarea.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus(): Promise<void> {\r\n    this.#nativeInput?.focus();\r\n  }\r\n\r\n  #onClick = () => {\r\n    const { checked, disabled } = this;\r\n    if (disabled) return;\r\n\r\n    if (checked && this.#radioGroup?.allowEmpty) {\r\n      this.checked = false;\r\n    } else {\r\n      this.checked = true;\r\n    }\r\n  };\r\n\r\n  #onFocus = () => {\r\n    this.popFocus.emit();\r\n  };\r\n\r\n  #onBlur = () => {\r\n    this.popBlur.emit();\r\n  };\r\n\r\n  render() {\r\n    const { host, checked } = this;\r\n    const inputId = this.#inputId;\r\n\r\n    const hasLabel = host.textContent !== '';\r\n\r\n    return (\r\n      <Host\r\n        role=\"radio\"\r\n        aria-checked={`${checked}`}\r\n        aria-labelledby={inputId}\r\n        aria-hidden={this.disabled ? 'true' : null}\r\n        onClick={this.#onClick}\r\n      >\r\n        <Show when={hasLabel}>\r\n          <div class=\"label\">\r\n            <label htmlFor={inputId} part=\"label\">\r\n              <slot />\r\n            </label>\r\n          </div>\r\n        </Show>\r\n        <input\r\n          part=\"native\"\r\n          type=\"radio\"\r\n          id={inputId}\r\n          name={this.name}\r\n          checked={this.checked}\r\n          required={this.required}\r\n          disabled={this.disabled}\r\n          autoFocus={this.autoFocus}\r\n          onFocus={this.#onFocus}\r\n          onBlur={this.#onBlur}\r\n          ref={el => (this.#nativeInput = el)}\r\n          {...this.#inheritedAttributes}\r\n        />\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nlet radioIds: number = 0;\r\n"],"version":3}