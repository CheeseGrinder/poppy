{"file":"pop-modal.js","mappings":";;;;;AAAA,MAAM,QAAQ,GAAG,u8DAAu8D,CAAC;AACz9D,uBAAe,QAAQ;;;;;;;;;;;;;;;;;;;MC6BV,KAAK;;;;;;;QAChB,gCAA2B;QAC3B,wCAAkC;QAElC,mCAAqB,iBAAiB,CAAC,MAAM,EAAE,EAAC;;;;;;;;IAUhD,eAAe,CAAC,OAAe;QAC7B,IAAI,OAAO,EAAE;YACX,uBAAA,IAAI,gCAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACzD;KACF;IA6CD,YAAY,CAAC,MAAe;QAC1B,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;aAAM;YACL,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACpB;KACF;IAYD,iBAAiB;QACf,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEzB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;KAC/B;IAED,iBAAiB;QACf,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,EAAE;YACvC,YAAY,EAAE,KAAK;YACnB,eAAe,EAAE,KAAK;YACtB,IAAI,EAAE,KAAK;SACZ,CAAC,CAAC;KACJ;IAED,kBAAkB;QAChB,uBAAA,IAAI,yBAAmB,IAAI,gBAAgB,CAAC;YAC1C,IAAI,CAAC,IAAI,GAAG,uBAAA,IAAI,qBAAQ,CAAC,IAAI,CAAC;SAC/B,CAAC,MAAA,CAAC;QACH,uBAAA,IAAI,6BAAgB,CAAC,OAAO,CAAC,uBAAA,IAAI,qBAAQ,EAAE;YACzC,UAAU,EAAE,IAAI;YAChB,eAAe,EAAE,CAAC,MAAM,CAAC;SAC1B,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,uBAAA,IAAI,qBAAQ,CAAC,SAAS,EAAE,CAAC;SAC1B;KACF;IAED,oBAAoB;QAClB,uBAAA,IAAI,gCAAmB,CAAC,cAAc,EAAE,CAAC;QACzC,uBAAA,IAAI,6BAAgB,CAAC,UAAU,EAAE,CAAC;KACnC;IAGD,MAAM,OAAO;QACX,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtB,IAAI,IAAI,EAAE;YACR,OAAO,KAAK,CAAC;SACd;QAED,uBAAA,IAAI,qBAAQ,CAAC,SAAS,EAAE,CAAC;QACzB,OAAO,IAAI,CAAC;KACb;;;;;;IAQD,MAAM,OAAO,CAAC,IAAS;QACrB,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QAExB,uBAAA,IAAI,qBAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACzB,OAAO,IAAI,CAAC;KACb;IAED,MAAM;QACJ,QACE,EAAC,IAAI,uDACH,+DAAQ,KAAK,EAAC,OAAO,EAAC,GAAG,EAAE,EAAE,KAAK,uBAAA,IAAI,iBAAW,EAAE,MAAA,CAAC,IAClD,4DAAK,KAAK,EAAC,eAAe,IACxB,8DAAQ,EAER,4DAAK,KAAK,EAAC,eAAe,IACxB,6DAAM,IAAI,EAAC,SAAS,GAAG,CACnB,CACF,EACN,EAAC,IAAI,qDAAC,IAAI,EAAE,IAAI,CAAC,eAAe,IAC9B,6DAAM,MAAM,EAAC,QAAQ,EAAC,KAAK,EAAC,gBAAgB,IAC1C,yEAAsB,CACjB,CACF,CACA,CACJ,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/modal/modal.scss?tag=pop-modal&encapsulation=shadow","src/components/modal/modal.tsx"],"sourcesContent":["@use \"../../global/styles/theme\";\r\n@use \"../../global/styles/radius\";\r\n\r\n:host {\r\n  .modal {\r\n    position: fixed;\r\n    inset: 0;\r\n\r\n    display: grid;\r\n    place-items: center;\r\n\r\n    border: none;\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    width: 100%;\r\n    max-width: none;\r\n    height: 100%;\r\n    max-height: none;\r\n\r\n    // overscroll-behavior: contain;\r\n\r\n    background-color: transparent;\r\n    color: inherit;\r\n\r\n    transition-duration: 0.2s;\r\n    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\r\n    transition-property: transform, opacity, visibility;\r\n    overflow-y: hidden;\r\n\r\n    &:not([open]) {\r\n      opacity: 0;\r\n      pointer-events: none;\r\n\r\n      > .model-content {\r\n        scale: 0.9;\r\n      }\r\n    }\r\n    &[open] > .model-content {\r\n      scale: 1;\r\n    }\r\n\r\n    &::backdrop {\r\n      animation: modal-pop 0.2s ease-out;\r\n\r\n      @keyframes modal-pop {\r\n        0% {\r\n          opacity: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    &-content {\r\n      box-sizing: border-box;\r\n\r\n      grid-column-start: 1;\r\n      grid-row-start: 1;\r\n\r\n      padding: 1.5rem;\r\n\r\n      border-radius: var(--border-radius, #{radius.$md});\r\n\r\n      width: calc(100% / 12 * 11);\r\n      max-width: 32rem;\r\n      max-height: calc(100vh - 5em);\r\n\r\n      background-color: var(--background, oklch(#{theme.get-color(\"base.100\")}));\r\n\r\n      box-shadow: #00000040 0 25px 50px -12px;\r\n\r\n      overflow-y: auto;\r\n      overscroll-behavior: contain;\r\n\r\n      transition-property:\r\n        color,\r\n        background-color,\r\n        border-color,\r\n        text-decoration-color,\r\n        fill,\r\n        stroke,\r\n        opacity,\r\n        box-shadow,\r\n        transform,\r\n        scale,\r\n        filter,\r\n        backdrop-filter,\r\n        -webkit-backdrop-filter;\r\n      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\r\n      transition-duration: 0.2s;\r\n    }\r\n\r\n    &-actions {\r\n      display: flex;\r\n      margin-top: 1.5rem;\r\n      justify-content: flex-end;\r\n    }\r\n\r\n    &-backdrop {\r\n      z-index: -1;\r\n\r\n      display: grid;\r\n      align-self: stretch;\r\n      justify-self: stretch;\r\n\r\n      grid-column-start: 1;\r\n      grid-row-start: 1;\r\n\r\n      color: transparent;\r\n\r\n      > button {\r\n        cursor: pointer;\r\n        opacity: 0;\r\n      }\r\n    }\r\n\r\n    @media screen and (max-width: 640px) {\r\n      place-items: end;\r\n\r\n      & > .modal-content {\r\n        width: 100%;\r\n        max-width: none;\r\n\r\n        border-top-left-radius: var(--border-radius, #{radius.$md});\r\n        border-top-right-radius: var(--border-radius, #{radius.$md});\r\n        border-bottom-right-radius: 0;\r\n        border-bottom-left-radius: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n:host(:not([showBackdrop])) .modal::backdrop {\r\n  background-color: transparent;\r\n}\r\n\r\n:host([showBackdrop]) .modal::backdrop {\r\n  background-color: #0006;\r\n}\r\n","import { componentConfig } from '#config';\r\nimport { OverlayInterface } from '#utils/overlay';\r\nimport { TriggerController } from '#utils/trigger';\r\nimport {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  Watch,\r\n  h,\r\n} from '@stencil/core';\r\nimport { ComponentProps, ComponentRef } from 'src/interfaces';\r\nimport { Show } from '../Show';\r\n\r\n/**\r\n * Describe whats does the component\r\n *\r\n * @part {name} - // Describe css part\r\n *\r\n * @slot - // Describe slot content\r\n */\r\n@Component({\r\n  tag: 'pop-modal',\r\n  styleUrl: 'modal.scss',\r\n  shadow: true,\r\n})\r\nexport class Modal implements ComponentInterface, OverlayInterface {\r\n  #dialog: HTMLDialogElement;\r\n  #dialogObserver: MutationObserver;\r\n\r\n  #triggerController = TriggerController.create();\r\n\r\n  @Element() host: HTMLElement & OverlayInterface;\r\n\r\n  /**\r\n   * An ID corresponding to the trigger element that\r\n   * causes the modal to open when clicked.\r\n   */\r\n  @Prop() trigger?: string;\r\n  @Watch('trigger')\r\n  onTriggerChange(trigger: string) {\r\n    if (trigger) {\r\n      this.#triggerController.addListener(this.host, trigger);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The component to display inside of the popover.\r\n   * You only need to use this if you are not using\r\n   * a JavaScript framework. Otherwise, you can just\r\n   * slot your component inside of `pop-popover`.\r\n   */\r\n  @Prop({ mutable: true }) component?: ComponentRef;\r\n\r\n  /**\r\n   * The data to pass to the popover component.\r\n   * You only need to use this if you are not using\r\n   * a JavaScript framework. Otherwise, you can just\r\n   * set the props directly on your component.\r\n   */\r\n  @Prop({ mutable: true }) componentProps?: ComponentProps;\r\n\r\n  /**\r\n   * If `true`, a backdrop will be displayed behind the modal.\r\n   * This property controls whether or not the backdrop\r\n   * darkens the screen when the modal is presented.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) showBackdrop?: boolean;\r\n\r\n  /**\r\n   * If `true`, the modal will be dismissed when the backdrop is clicked.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ mutable: true }) backdropDismiss?: boolean;\r\n\r\n  /**\r\n   * If `true`, the modal will open. If `false`, the modal will close.\r\n   * Use this if you need finer grained control over presentation, otherwise\r\n   * just use the modalController or the `trigger` property.\r\n   * Note: `open` will automatically be set back to `false` when\r\n   * the modal dismisses.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) open?: boolean;\r\n  @Watch('open')\r\n  onOpenChange(isOpen: boolean): void {\r\n    if (isOpen) {\r\n      this.present();\r\n    } else {\r\n      this.dismiss(null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emitted after the modal has presented.\r\n   */\r\n  @Event() didPresent: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted after the modal has dismissed.\r\n   */\r\n  @Event() didDismiss: EventEmitter<void>;\r\n\r\n  connectedCallback(): void {\r\n    const { trigger } = this;\r\n\r\n    this.onTriggerChange(trigger);\r\n  }\r\n\r\n  componentWillLoad(): void {\r\n    componentConfig.apply(this, 'pop-modal', {\r\n      showBackdrop: false,\r\n      backdropDismiss: false,\r\n      open: false,\r\n    });\r\n  }\r\n\r\n  componentDidRender(): void {\r\n    this.#dialogObserver = new MutationObserver(() => {\r\n      this.open = this.#dialog.open;\r\n    });\r\n    this.#dialogObserver.observe(this.#dialog, {\r\n      attributes: true,\r\n      attributeFilter: ['open'],\r\n    });\r\n\r\n    if (this.open) {\r\n      this.#dialog.showModal();\r\n    }\r\n  }\r\n\r\n  disconnectedCallback(): void {\r\n    this.#triggerController.removeListener();\r\n    this.#dialogObserver.disconnect();\r\n  }\r\n\r\n  @Method()\r\n  async present(): Promise<boolean> {\r\n    const { open } = this;\r\n    if (open) {\r\n      return false;\r\n    }\r\n\r\n    this.#dialog.showModal();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Close the modal\r\n   * @param data Data to return on close\r\n   * @returns `true` if the modal has been closed, otherwise `false`\r\n   */\r\n  @Method()\r\n  async dismiss(data: any): Promise<boolean> {\r\n    const { open } = this;\r\n    if (!open) return false;\r\n\r\n    this.#dialog.close(data);\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <dialog class=\"modal\" ref={el => (this.#dialog = el)}>\r\n          <div class=\"modal-content\">\r\n            <slot />\r\n\r\n            <div class=\"modal-actions\">\r\n              <slot name=\"actions\" />\r\n            </div>\r\n          </div>\r\n          <Show when={this.backdropDismiss}>\r\n            <form method=\"dialog\" class=\"modal-backdrop\">\r\n              <button>close</button>\r\n            </form>\r\n          </Show>\r\n        </dialog>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}