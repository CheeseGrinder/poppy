{"file":"pop-drawer.js","mappings":";;;;;AAAA,MAAM,SAAS,GAAG,8hEAA8hE,CAAC;AACjjE,wBAAe,SAAS;;;;;;;;;;MCmBX,MAAM;;;;;QACjB,oCAAqB,iBAAiB,CAAC,MAAM,EAAE,EAAC;QAuFhD,0BAAW;YACT,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB,EAAC;;;;;;IA7EF,eAAe,CAAC,OAAe;QAC7B,IAAI,OAAO,EAAE;YACX,uBAAA,IAAI,iCAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;SAC7E;KACF;IAeD,qBAAqB,CAAC,aAA4B;QAChD,uBAAA,IAAI,iCAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;KAC7E;IAiBD,iBAAiB;QACf,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEzB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;KAC/B;IAED,iBAAiB;QACf,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,YAAY,EAAE;YACxC,IAAI,EAAE,KAAK;YACX,IAAI,EAAE,OAAO;YACb,aAAa,EAAE,OAAO;SACvB,CAAC,CAAC;KACJ;IAGD,MAAM,OAAO;QACX,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtB,IAAI,IAAI;YAAE,OAAO,KAAK,CAAC;QAEvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,OAAO,IAAI,CAAC;KACb;IAGD,MAAM,OAAO;QACX,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QAExB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,OAAO,IAAI,CAAC;KACb;IAGD,MAAM,MAAM;QACV,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;KACxB;IAMD,MAAM;QACJ,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QAEtB,QACE,EAAC,IAAI,qDACH,KAAK,EAAE;gBACL,MAAM,EAAE,IAAI;gBACZ,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC;aAC1B,IAED,4DAAK,KAAK,EAAC,gBAAgB,IACzB,8DAAQ,CACJ,EAEN,8DAAO,KAAK,EAAC,aAAa,IACxB,4DAAK,IAAI,EAAC,UAAU,EAAC,KAAK,EAAC,iBAAiB,EAAC,OAAO,EAAE,uBAAA,IAAI,uBAAS,GAAQ,EAC3E,4DAAK,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,mBAAmB,IACxC,6DAAM,IAAI,EAAC,MAAM,GAAG,CAChB,CACA,CACH,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/drawer/drawer.scss?tag=pop-drawer&encapsulation=shadow","src/components/drawer/drawer.tsx"],"sourcesContent":["@use \"../../global/styles/theme\";\r\n@use \"../../global/styles/radius\";\r\n\r\n/**\r\n * @prop --background: Change sidebar background\r\n * @prop --color: Change sidebar text color\r\n *\r\n * @prop --background-backdrop: Change backdrop background color\r\n */\r\n\r\n// Drawer\r\n// ----------------------------------------------------------------\r\n\r\n:host {\r\n  --backdrop-background: #0006;\r\n  --background: oklch(#{theme.get-color(\"base.200\")});\r\n  --color: oklch(#{theme.get-color(\"base.content\")});\r\n\r\n  position: relative;\r\n\r\n  display: grid;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n  max-width: 100vw;\r\n\r\n  .drawer {\r\n    &-content {\r\n      grid-row-start: 1;\r\n\r\n      min-width: 0px;\r\n    }\r\n\r\n    &-side {\r\n      position: fixed;\r\n      z-index: 1000;\r\n      top: 0px;\r\n      inset-inline-start: 0px;\r\n\r\n      overflow-y: auto;\r\n      overscroll-behavior: contain;\r\n\r\n      grid-row-start: 1;\r\n\r\n      display: grid;\r\n      grid-template-columns: repeat(1, minmax(0, 1fr));\r\n      grid-template-rows: repeat(1, minmax(0, 1fr));\r\n      align-items: flex-start;\r\n\r\n      width: 100%;\r\n      height: 100dvh;\r\n\r\n      pointer-events: none;\r\n\r\n      &-inner {\r\n        z-index: 1;\r\n        grid-column-start: 1;\r\n        grid-row-start: 1;\r\n\r\n        height: 100%;\r\n\r\n        background-color: var(--background);\r\n        color: var(--color);\r\n\r\n        will-change: transform;\r\n\r\n        transition-property: transform;\r\n        transition-timing-function: ease-out;\r\n        transition-duration: 300ms;\r\n      }\r\n    }\r\n\r\n    &-backdrop {\r\n      position: sticky;\r\n      top: 0px;\r\n\r\n      grid-column-start: 1;\r\n      grid-row-start: 1;\r\n      place-self: stretch;\r\n\r\n      background-color: transparent;\r\n\r\n      cursor: pointer;\r\n\r\n      transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\r\n      transition-timing-function: ease-out;\r\n      transition-duration: 200ms;\r\n    }\r\n  }\r\n}\r\n\r\n// Drawer Side\r\n// ----------------------------------------------------------------\r\n\r\n// using .drawer-rtl because [dir=rtl] :host() is impossible\r\n\r\n:host([side=\"start\"]) {\r\n  grid-auto-columns: max-content auto;\r\n\r\n  .drawer {\r\n    &-content {\r\n      grid-column-start: 2;\r\n    }\r\n    &-side {\r\n      inset-inline-start: 0px;\r\n\r\n      grid-column-start: 1;\r\n      justify-items: start;\r\n\r\n      &-inner {\r\n        transform: translateX(-100%);\r\n      }\r\n    }\r\n  }\r\n}\r\n:host([side=\"start\"].drawer-rtl) {\r\n  .drawer-side-inner {\r\n    transform: translateX(100%);\r\n  }\r\n}\r\n\r\n:host([side=\"end\"]) {\r\n  grid-auto-columns: auto max-content;\r\n\r\n  .drawer {\r\n    &-content {\r\n      grid-column-start: 1;\r\n      overflow: hidden;\r\n    }\r\n    &-side {\r\n      grid-column-start: 2;\r\n      justify-items: end;\r\n\r\n      overflow-x: hidden;\r\n\r\n      &-inner {\r\n        transform: translateX(100%);\r\n      }\r\n    }\r\n  }\r\n}\r\n:host([side=\"end\"].drawer-rtl) {\r\n  .drawer-side-inner {\r\n    transform: translateX(-100%);\r\n  }\r\n}\r\n\r\n// Drawer Open\r\n// ----------------------------------------------------------------\r\n\r\n// .drawer is needed for CSS selector specificity to avoid !important\r\n:host(.drawer[open]) {\r\n  .drawer {\r\n    &-side {\r\n      visibility: visible;\r\n      pointer-events: auto;\r\n\r\n      &-inner {\r\n        transform: translateX(0%);\r\n      }\r\n    }\r\n\r\n    &-backdrop {\r\n      background-color: var(--background-backdrop);\r\n    }\r\n  }\r\n}\r\n","import { componentConfig } from '#config';\r\nimport { isRTL } from '#utils/dir';\r\nimport { OverlayInterface } from '#utils/overlay';\r\nimport { TriggerAction, TriggerController } from '#utils/trigger';\r\nimport { Component, ComponentInterface, Element, Host, Method, Prop, Watch, h } from '@stencil/core';\r\n\r\n/**\r\n * Drawer is a grid layout that can show/hide a sidebar on the left or right side of the page.\r\n *\r\n * @part backdrop - The backdrop that appears over the main content when the menu is open\r\n * @part side - The container for the menu content.\r\n *\r\n * @slot - Container for all page content\r\n * @slot side - Content is placed in the drawer and is shown or hidden based on open state.\r\n */\r\n@Component({\r\n  tag: 'pop-drawer',\r\n  styleUrl: 'drawer.scss',\r\n  shadow: true,\r\n})\r\nexport class Drawer implements ComponentInterface, OverlayInterface {\r\n  #triggerController = TriggerController.create();\r\n\r\n  @Element() host: HTMLPopDrawerElement;\r\n\r\n  /**\r\n   * An ID corresponding to the trigger element that\r\n   * causes the drawer to open. Use the `trigger-action`\r\n   * property to customize the interaction that results in\r\n   * the sidebar opening.\r\n   */\r\n  @Prop() trigger?: string;\r\n  @Watch('trigger')\r\n  onTriggerChange(trigger: string) {\r\n    if (trigger) {\r\n      this.#triggerController.addListener(this.host, trigger, this.triggerAction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Describes what kind of interaction with the trigger that should\r\n   * cause the sidebar to open. Does not apply when the `trigger` property is `undefined`.\r\n   * - `\"click\"`: the sidebar will be presented when the trigger is left clicked.\r\n   * - `\"hover\"`: the sidebar will be presented when a pointer hovers over the trigger.\r\n   * - `\"context-menu\"`: the sidebar will be presented when the trigger is right\r\n   * clicked on desktop and long pressed on mobile. This will also prevent your\r\n   * device's normal context menu from appearing.\r\n   *\r\n   * @config @default \"click\"\r\n   */\r\n  @Prop() triggerAction?: TriggerAction;\r\n  @Watch('triggerAction')\r\n  onTriggerActionChange(triggerAction: TriggerAction) {\r\n    this.#triggerController.addListener(this.host, this.trigger, triggerAction);\r\n  }\r\n\r\n  /**\r\n   * Where to place the sidebar relative to the screen.\r\n   * - `\"start\"`: The sidebar will appear to the left of the screen in LTR and to the right in RTL.\r\n   * - `\"end\"`: The sidebar will appear to the right of the screen in LTR and to the left in RTL.\r\n   *\r\n   * @config @default \"start\"\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) side?: 'start' | 'end';\r\n\r\n  /**\r\n   * Forces the drawer to be open\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) open?: boolean;\r\n\r\n  connectedCallback(): void {\r\n    const { trigger } = this;\r\n\r\n    this.onTriggerChange(trigger);\r\n  }\r\n\r\n  componentWillLoad(): void {\r\n    componentConfig.apply(this, 'pop-drawer', {\r\n      open: false,\r\n      side: 'start',\r\n      triggerAction: 'click',\r\n    });\r\n  }\r\n\r\n  @Method()\r\n  async present(): Promise<boolean> {\r\n    const { open } = this;\r\n    if (open) return false;\r\n\r\n    this.open = true;\r\n    return true;\r\n  }\r\n\r\n  @Method()\r\n  async dismiss(): Promise<boolean> {\r\n    const { open } = this;\r\n    if (!open) return false;\r\n\r\n    this.open = false;\r\n    return true;\r\n  }\r\n\r\n  @Method()\r\n  async toggle(): Promise<void> {\r\n    this.open = !this.open;\r\n  }\r\n\r\n  #onClick = (): void => {\r\n    this.dismiss();\r\n  };\r\n\r\n  render() {\r\n    const { host } = this;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          drawer: true,\r\n          'drawer-rtl': isRTL(host),\r\n        }}\r\n      >\r\n        <div class=\"drawer-content\">\r\n          <slot />\r\n        </div>\r\n\r\n        <aside class=\"drawer-side\">\r\n          <div part=\"backdrop\" class=\"drawer-backdrop\" onClick={this.#onClick}></div>\r\n          <div part=\"side\" class=\"drawer-side-inner\">\r\n            <slot name=\"side\" />\r\n          </div>\r\n        </aside>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}