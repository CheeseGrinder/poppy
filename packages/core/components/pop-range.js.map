{"file":"pop-range.js","mappings":"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","names":[],"sources":["src/components/range/range.scss?tag=pop-range&encapsulation=shadow","src/components/range/range.tsx"],"sourcesContent":["@use \"../../global/styles/radius\";\r\n@use \"../../global/styles/theme\";\r\n\r\n/**\r\n * @prop --track-size: Height of the range track\r\n * @prop --track-color: Color of the unselected part\r\n * @prop --active-track-color: Color of active part\r\n *\r\n * @prop --thumb-size: Height of the active range track\r\n * @prop --thumb-color: Height of the active range track\r\n *\r\n * @prop --border-radius: Border radius\r\n *\r\n */\r\n\r\n@mixin track {\r\n  width: 100%;\r\n  height: var(--track-size);\r\n  border-radius: var(--border-radius, #{radius.$xl});\r\n  background-color: var(--track-color, oklch(var(--base-content) / var(--track-opacity, 0.2)));\r\n}\r\n@mixin thumb {\r\n  height: var(--thumb-size);\r\n  width: var(--thumb-size);\r\n\r\n  border-style: none;\r\n  border-radius: var(--border-radius, #{radius.$xl});\r\n\r\n  --filler-size: 50rem;\r\n  --active-track-size: calc(var(--filler-size) * -1 - var(--filler-offset));\r\n\r\n  background-color: var(--thumb-color);\r\n  box-shadow:\r\n    0 0 0 3px var(--active-track-color) inset,\r\n    var(--focus-shadow, 0 0),\r\n    var(--active-track-size) 0 0 var(--filler-size);\r\n}\r\n\r\n// Range\r\n// ----------------------------------------------------------------\r\n\r\n:host {\r\n  --thumb-color: oklch(#{theme.get-color(\"base.100\")});\r\n\r\n  width: 100%;\r\n\r\n  > input {\r\n    appearance: none;\r\n    -webkit-appearance: none;\r\n\r\n    overflow: hidden;\r\n\r\n    width: 100%;\r\n    height: var(--thumb-size);\r\n    margin: 0;\r\n    border-radius: var(--border-radius, #{radius.$xl});\r\n\r\n    color: var(--active-track-color);\r\n    background-color: transparent;\r\n\r\n    cursor: pointer;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n    &:focus-visible {\r\n      --focus-shadow: 0 0 0 6px var(--thumb-color) inset, 0 0 0 2rem var(--active-track-color) inset;\r\n    }\r\n\r\n    &::-webkit-slider-runnable-track {\r\n      @include track;\r\n    }\r\n    &::-webkit-slider-thumb {\r\n      @include thumb;\r\n\r\n      appearance: none;\r\n      -webkit-appearance: none;\r\n\r\n      position: relative;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n    }\r\n    &::-moz-range-track {\r\n      @include track;\r\n    }\r\n    &::-moz-range-thumb {\r\n      @include thumb;\r\n    }\r\n  }\r\n}\r\n\r\n// Range Size\r\n// ----------------------------------------------------------------\r\n\r\n:host([size=\"xs\"]) {\r\n  --track-size: 0.25rem;\r\n  --thumb-size: 1rem;\r\n  --filler-offset: 0.4rem;\r\n}\r\n:host([size=\"sm\"]) {\r\n  --track-size: 0.25rem;\r\n  --thumb-size: 1.25rem;\r\n  --filler-offset: 0.5rem;\r\n}\r\n:host([size=\"md\"]),\r\n:host(:not([size])) {\r\n  --track-size: 0.5rem;\r\n  --thumb-size: 1.5rem;\r\n  --filler-offset: 0.6rem;\r\n}\r\n:host([size=\"lg\"]) {\r\n  --track-size: 1rem;\r\n  --thumb-size: 2rem;\r\n  --filler-offset: 1rem;\r\n}\r\n\r\n// Range Color\r\n// ----------------------------------------------------------------\r\n\r\n@mixin generate-color($colors...) {\r\n  @each $color in $colors {\r\n    $base: theme.get-color(\"#{$color}.base\");\r\n\r\n    :host([color=\"#{$color}\"]) {\r\n      --active-track-color: oklch(#{$base} / var(--active-track-opacity, 1));\r\n    }\r\n  }\r\n}\r\n@include generate-color(primary, secondary, accent, info, success, warning, error);\r\n\r\n:host(:not([color])) {\r\n  --track-color: oklch(#{theme.get-color(\"base.content\")} / var(--track-opacity, 0.2));\r\n  --active-track-color: oklch(#{theme.get-color(\"base.content\")} / var(--active-track-opacity, 1));\r\n}\r\n\r\n// Range State\r\n// ----------------------------------------------------------------\r\n\r\n:host([disabled]) > input {\r\n  --active-track-color: oklch(#{theme.get-color(\"base.content\")} / var(--active-track-opacity, 1));\r\n\r\n  opacity: var(--opacity, 0.2);\r\n  cursor: not-allowed;\r\n}\r\n","import { componentConfig, config } from '#config';\r\nimport { Attributes, inheritAriaAttributes } from '#utils/helpers';\r\nimport {\r\n  AttachInternals,\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  Watch,\r\n  h,\r\n} from '@stencil/core';\r\nimport type { Color, Size } from 'src/interfaces';\r\n\r\n/**\r\n * Range slider is used to select a value by sliding a handle.\r\n *\r\n * @part native - The native HTML input element.\r\n */\r\n@Component({\r\n  tag: 'pop-range',\r\n  styleUrl: 'range.scss',\r\n  shadow: true,\r\n  formAssociated: true,\r\n})\r\nexport class Range implements ComponentInterface {\r\n  #inputId = `pop-range-${rangeIds++}`;\r\n  #inheritedAttributes: Attributes;\r\n\r\n  #nativeInput!: HTMLInputElement;\r\n  #debounceTimer: NodeJS.Timeout;\r\n\r\n  @Element() host: HTMLElement;\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  /**\r\n   * The name of the control, which is submitted with the form data.\r\n   */\r\n  @Prop() name: string = this.#inputId;\r\n\r\n  /**\r\n   * The value of the toggle does not mean if it's checked or not, use the `checked`\r\n   * property for that.\r\n   *\r\n   * The value of a toggle is analogous to the value of a `<input type=\"checkbox\">`,\r\n   * it's only used when the toggle participates in a native `<form>`.\r\n   */\r\n  @Prop({ mutable: true }) value?: number | null;\r\n  @Watch('value')\r\n  onValueChange(value: number) {\r\n    this.internals.setFormValue(value.toString(), value.toString());\r\n  }\r\n\r\n  /**\r\n   * The minimum value, which must not be greater than its maximum (max attribute) value.\r\n   *\r\n   * @config @default 0\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) min?: number;\r\n\r\n  /**\r\n   * The maximum value, which must not be less than its minimum (min attribute) value.\r\n   *\r\n   * @config @default 100\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) max?: number;\r\n\r\n  /**\r\n   * Works with the min and max attributes to limit the increments at which a value can be set.\r\n   *\r\n   * @config @default 1\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) step?: number;\r\n\r\n  /**\r\n   * If `true`, the user must fill in a value before submitting a form.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) required?: boolean;\r\n\r\n  /**\r\n   * If `true`, the user cannot interact with the element.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) disabled?: boolean;\r\n\r\n  /**\r\n   * If `true`, the element will be focused on page load.\r\n   */\r\n  @Prop({ mutable: true }) autoFocus?: boolean = false;\r\n\r\n  /**\r\n   * The color to use from your application's color palette.\r\n   * Default options are: `\"primary\"`, `\"secondary\"`, `\"accent\"`, `\"ghost\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `\"error\"`.\r\n   * For more information on colors, see [theming](/docs/theming/basics).\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) color?: Color | 'ghost';\r\n\r\n  /**\r\n   * Change size of the component\r\n   * Options are: `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`.\r\n   *\r\n   * @config @default 'md'\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) size?: Size;\r\n\r\n  /**\r\n   * Set the amount of time, in milliseconds, to wait to trigger the ionInput event after each keystroke.\r\n   *\r\n   * @config @default 0\r\n   */\r\n  @Prop({ mutable: true }) debounce?: number = 0;\r\n\r\n  /**\r\n   * The `popChange` event is fired when the user modifies the input's value.\r\n   * Unlike the popInput event, the `popChange` event is fired when the element loses focus after its value has been modified.\r\n   */\r\n  @Event() popChange: EventEmitter<RangeChangeEventDetail>;\r\n\r\n  /**\r\n   * Emitted when the input has focus.\r\n   */\r\n  @Event() popFocus: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted when the input loses focus.\r\n   */\r\n  @Event() popBlur: EventEmitter<void>;\r\n\r\n  formResetCallback(): void {\r\n    this.value = 0;\r\n  }\r\n\r\n  formStateRestoreCallback(state: string) {\r\n    this.value = +state;\r\n  }\r\n\r\n  componentWillLoad(): void {\r\n    this.#inheritedAttributes = inheritAriaAttributes(this.host);\r\n\r\n    componentConfig.apply(this, 'pop-range', {\r\n      min: 0,\r\n      max: 100,\r\n      step: 1,\r\n      required: false,\r\n      disabled: false,\r\n      size: config.get('defaultSize', 'md'),\r\n      debounce: 0,\r\n    });\r\n  }\r\n\r\n  disconnectedCallback(): void {\r\n    clearTimeout(this.#debounceTimer);\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the native `input` in `pop-range`. Use this method instead of the global\r\n   * `input.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus(): Promise<void> {\r\n    this.#nativeInput?.focus();\r\n  }\r\n\r\n  #onChange = (): void => {\r\n    clearTimeout(this.#debounceTimer);\r\n    this.#debounceTimer = setTimeout(() => {\r\n      this.value = this.#nativeInput.valueAsNumber;\r\n\r\n      this.popChange.emit({\r\n        value: this.value,\r\n      });\r\n    }, this.debounce || 0);\r\n  };\r\n\r\n  #onFocus = (): void => {\r\n    this.popFocus.emit();\r\n  };\r\n\r\n  #onBlur = (): void => {\r\n    this.popBlur.emit();\r\n  };\r\n\r\n  render() {\r\n    const { #inputId: inputId } = this;\r\n\r\n    return (\r\n      <Host aria-labelledby={inputId} aria-hidden={this.disabled ? 'true' : null}>\r\n        <input\r\n          part=\"native\"\r\n          id={inputId}\r\n          name={this.name}\r\n          type=\"range\"\r\n          min={this.min}\r\n          max={this.max}\r\n          step={this.step}\r\n          value={this.value}\r\n          required={this.required}\r\n          disabled={this.disabled}\r\n          autoFocus={this.autoFocus}\r\n          onInput={this.#onChange}\r\n          onFocus={this.#onFocus}\r\n          onBlur={this.#onBlur}\r\n          ref={el => (this.#nativeInput = el)}\r\n          {...this.#inheritedAttributes}\r\n        />\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nlet rangeIds = 0;\r\n"],"version":3}