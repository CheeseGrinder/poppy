{"file":"pop-img.js","mappings":";;;AAAA,MAAM,MAAM,GAAG,mIAAmI,CAAC;AACnJ,qBAAe,MAAM;;;;;;;;;;;;;;;;;;;MCqBR,GAAG;;;;;;;;;QACd,iCAA6B;QAC7B,mCAAmC,EAAE,EAAC;QAEtC,gCAAiC;QA2EjC,sBAAU;YACR,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;SACxB,EAAC;QAEF,uBAAW;YACT,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;SACtB,EAAC;;;;;;IArEF,WAAW;QACT,uBAAA,IAAI,yCAAc,MAAlB,IAAI,CAAgB,CAAC;KACtB;IAwBD,iBAAiB;QACf,uBAAA,IAAI,4BAAwB,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,CAAC,CAAC,MAAA,CAAC;KACzE;IAED,gBAAgB;QACd,uBAAA,IAAI,yCAAc,MAAlB,IAAI,CAAgB,CAAC;KACtB;IAuCD,MAAM;QACJ,MAAM,EAAE,SAAS,EAAE,GAAG,uBAAA,IAAI,gCAAqB,CAAC;QAEhD,QACE,EAAC,IAAI,uDACH,4DACE,IAAI,EAAC,OAAO,EACZ,OAAO,EAAC,OAAO;;YAEf,GAAG,EAAE,IAAI,CAAC,OAAO,EACjB,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,EAAE,EACnB,MAAM,EAAE,uBAAA,IAAI,mBAAQ,EACpB,OAAO,EAAE,uBAAA,IAAI,oBAAS,EACtB,SAAS,EAAE,WAAW,CAAC,SAAS,CAAC,EACjC,GAAG,EAAE,EAAE,KAAK,uBAAA,IAAI,kBAAc,EAAE,MAAA,CAAC,GACjC,CACG,EACP;KACH;;;;;;;;;;;;;;;IAtDC,IAAI,CAAC,IAAI,CAAC,GAAG;QAAE,OAAO;IAEtB,IAAI,2BAA2B,EAAE,EAAE;QACjC,uBAAA,IAAI,2CAAgB,MAApB,IAAI,CAAkB,CAAC;QACvB,uBAAA,IAAI,iBAAa,IAAI,oBAAoB,CAAC,OAAO;YAC/C,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE;gBACjC,uBAAA,IAAI,iCAAM,MAAV,IAAI,CAAQ,CAAC;gBACb,uBAAA,IAAI,2CAAgB,MAApB,IAAI,CAAkB,CAAC;aACxB;SACF,CAAC,MAAA,CAAC;QACH,uBAAA,IAAI,qBAAU,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnC;SAAM;QACL,uBAAA,IAAI,sBAAW,CAAC,OAAO,GAAG,MAAM,CAAC;QACjC,uBAAA,IAAI,iCAAM,MAAV,IAAI,CAAQ,CAAC;KACd;AACH,CAAC;IAGC,uBAAA,IAAI,qBAAU,EAAE,UAAU,EAAE,CAAC;IAC7B,uBAAA,IAAI,iBAAa,SAAS,MAAA,CAAC;AAC7B,CAAC;IAGC,IAAI,CAAC,SAAS,GAAG,uBAAA,IAAI,oBAAS,CAAC;IAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;IACxB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;AAC1B,CAAC;AA+BH,SAAS,2BAA2B;IAClC,QACE,sBAAsB,IAAI,MAAM;QAChC,2BAA2B,IAAI,MAAM;QACrC,gBAAgB,IAAI,MAAM,CAAC,yBAAyB,CAAC,SAAS,EAC9D;AACJ,CAAC;AACD;;;;;;;AAOA,MAAM,WAAW,GAAG,CAAC,SAAkB;IACrC,QAAQ,SAAS;QACf,KAAK,MAAM;YACT,OAAO,IAAI,CAAC;QACd,KAAK,OAAO;YACV,OAAO,KAAK,CAAC;QACf;YACE,OAAO,SAAS,CAAC;KACpB;AACH,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/img/img.scss?tag=pop-img&encapsulation=shadow","src/components/img/img.tsx"],"sourcesContent":["// Img\r\n// ----------------------------------------------------------------\r\n\r\n:host {\r\n  display: block;\r\n\r\n  object-fit: contain;\r\n\r\n  > img {\r\n    display: block;\r\n\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    object-fit: inherit;\r\n    object-position: inherit;\r\n  }\r\n}\r\n","import { Attributes, inheritAttributes } from '#utils/helpers';\r\nimport {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  h,\r\n} from '@stencil/core';\r\n\r\n/**\r\n * @part image - The inner `img` element.\r\n */\r\n@Component({\r\n  tag: 'pop-img',\r\n  styleUrl: 'img.scss',\r\n  shadow: true,\r\n})\r\nexport class Img implements ComponentInterface {\r\n  #nativeImg: HTMLImageElement;\r\n  #inheritedAttributes: Attributes = {};\r\n\r\n  #observer?: IntersectionObserver;\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  @State() loadSrc?: string;\r\n  @State() loadError?: () => void;\r\n\r\n  /**\r\n   * The image URL. This attribute is mandatory for the `<img>` element.\r\n   */\r\n  @Prop() src: string;\r\n  @Watch('src')\r\n  onSrcChange() {\r\n    this.#initObserver();\r\n  }\r\n\r\n  /**\r\n   * This attribute defines the alternative text describing the image.\r\n   * Users will see this text displayed if the image URL is wrong,\r\n   * the image is not in one of the supported formats, or if the image is not yet downloaded.\r\n   */\r\n  @Prop() alt?: string;\r\n\r\n  /**\r\n   * Emitted when the img src has been set\r\n   */\r\n  @Event() popWillLoad: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted when the image has finished loading\r\n   */\r\n  @Event() popDidLoad: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted when the img fails to load\r\n   */\r\n  @Event() popError: EventEmitter<void>;\r\n\r\n  componentWillLoad(): void {\r\n    this.#inheritedAttributes = inheritAttributes(this.host, ['draggable']);\r\n  }\r\n\r\n  componentDidLoad(): void {\r\n    this.#initObserver();\r\n  }\r\n\r\n  #initObserver(): void {\r\n    if (!this.src) return;\r\n\r\n    if (supportIntersectionObserver()) {\r\n      this.#removeObserver();\r\n      this.#observer = new IntersectionObserver(entries => {\r\n        if (entries.at(-1).isIntersecting) {\r\n          this.#load();\r\n          this.#removeObserver();\r\n        }\r\n      });\r\n      this.#observer.observe(this.host);\r\n    } else {\r\n      this.#nativeImg.loading = 'lazy';\r\n      this.#load();\r\n    }\r\n  }\r\n\r\n  #removeObserver(): void {\r\n    this.#observer?.disconnect();\r\n    this.#observer = undefined;\r\n  }\r\n\r\n  #load(): void {\r\n    this.loadError = this.#onError;\r\n    this.loadSrc = this.src;\r\n    this.popWillLoad.emit();\r\n  }\r\n\r\n  #onLoad = (): void => {\r\n    this.popDidLoad.emit();\r\n  };\r\n\r\n  #onError = (): void => {\r\n    this.popError.emit();\r\n  };\r\n\r\n  render() {\r\n    const { draggable } = this.#inheritedAttributes;\r\n\r\n    return (\r\n      <Host>\r\n        <img\r\n          part=\"image\"\r\n          loading=\"eager\"\r\n          // decoding=\"sync\"\r\n          src={this.loadSrc}\r\n          alt={this.alt || ''}\r\n          onLoad={this.#onLoad}\r\n          onError={this.#onError}\r\n          draggable={isDraggable(draggable)}\r\n          ref={el => (this.#nativeImg = el)}\r\n        />\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nfunction supportIntersectionObserver(): boolean {\r\n  return (\r\n    'IntersectionObserver' in window &&\r\n    'IntersectionObserverEntry' in window &&\r\n    'isIntersecting' in window.IntersectionObserverEntry.prototype\r\n  );\r\n}\r\n/**\r\n * Enumerated strings must be set as booleans\r\n * as Stencil will not render 'false' in the DOM.\r\n * The need to explicitly render draggable=\"true\"\r\n * as only certain elements are draggable by default.\r\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable.\r\n */\r\nconst isDraggable = (draggable?: string): boolean | undefined => {\r\n  switch (draggable) {\r\n    case 'true':\r\n      return true;\r\n    case 'false':\r\n      return false;\r\n    default:\r\n      return undefined;\r\n  }\r\n};\r\n"],"version":3}