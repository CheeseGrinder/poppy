{"file":"checkbox.js","mappings":"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","names":[],"sources":["src/components/checkbox/checkbox.scss?tag=pop-checkbox&encapsulation=shadow","src/components/checkbox/checkbox.tsx"],"sourcesContent":["@use \"../../global/styles/radius\";\r\n@use \"../../global/styles/theme\";\r\n@use \"../../global/styles/input\";\r\n\r\n/**\r\n * @prop --border-radius: Change border radius\r\n * @prop --border-color: Change border color\r\n *\r\n * @prop --background: Change background color\r\n * @prop --checkmark-color: Change checkmark color\r\n *\r\n * @prop --animation: Change animation duration\r\n */\r\n\r\n// Checkbox\r\n// ----------------------------------------------------------------\r\n\r\n:host {\r\n  --border-radius: #{radius.$md};\r\n  --border-color: oklch(theme.get-color(\"base.content\") / 0.2);\r\n\r\n  --background: #{theme.get-color(\"base.content\")};\r\n  --checkmark-color: #{theme.get-color(\"base.100\")};\r\n\r\n  --animation: 0.2s ease-out;\r\n\r\n  @include input.label;\r\n\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  gap: 4px;\r\n  flex-shrink: 0;\r\n\r\n  input {\r\n    border: 1px solid var(--border-color);\r\n    border-radius: var(--border-radius);\r\n\r\n    appearance: none;\r\n    cursor: pointer;\r\n    margin: 0;\r\n\r\n    &:focus-visible {\r\n      outline-style: solid;\r\n      outline-width: 2px;\r\n      outline-offset: 2px;\r\n      outline-color: var(--background);\r\n    }\r\n    &:checked {\r\n      background-repeat: no-repeat;\r\n      animation: checkmark var(--animation);\r\n      background-color: var(--background);\r\n      background-image: linear-gradient(-45deg, transparent 65%, var(--background) 65.99%),\r\n        linear-gradient(45deg, transparent 75%, var(--background) 75.99%),\r\n        linear-gradient(-45deg, var(--background) 40%, transparent 40.99%),\r\n        linear-gradient(\r\n          45deg,\r\n          var(--background) 30%,\r\n          var(--checkmark-color) 30.99%,\r\n          var(--checkmark-color) 40%,\r\n          transparent 40.99%\r\n        ),\r\n        linear-gradient(-45deg, var(--checkmark-color) 50%, var(--background) 50.99%);\r\n    }\r\n  }\r\n\r\n  @keyframes checkmark {\r\n    0% {\r\n      background-position-y: 5px;\r\n    }\r\n    50% {\r\n      background-position-y: -2px;\r\n    }\r\n    100% {\r\n      background-position-y: 0;\r\n    }\r\n  }\r\n}\r\n\r\n// Checkbox placement\r\n// ----------------------------------------------------------------\r\n\r\n// start is the default in flex so no css needed here.\r\n:host([placement=\"start\"]) {\r\n  input {\r\n    margin-inline-end: auto;\r\n  }\r\n}\r\n:host([placement=\"end\"]) {\r\n  flex-direction: row-reverse;\r\n\r\n  input {\r\n    margin-inline-start: auto;\r\n  }\r\n}\r\n\r\n// Checkbox size\r\n// ----------------------------------------------------------------\r\n\r\n:host([size=\"xs\"]),\r\n:host(.in-list.in-list-xs) {\r\n  input {\r\n    height: 1rem;\r\n    width: 1rem;\r\n  }\r\n}\r\n:host([size=\"sm\"]),\r\n:host(.in-list.in-list-sm) {\r\n  input {\r\n    height: 1.25rem;\r\n    width: 1.25rem;\r\n  }\r\n}\r\n:host([size=\"md\"]),\r\n:host(.in-list.in-list-lg) {\r\n  input {\r\n    height: 1.5rem;\r\n    width: 1.5rem;\r\n  }\r\n}\r\n:host([size=\"lg\"]),\r\n:host(.in-list.in-list-lg) {\r\n  input {\r\n    height: 2rem;\r\n    width: 2rem;\r\n  }\r\n}\r\n\r\n// Checkbox Color\r\n// ----------------------------------------------------------------\r\n\r\n@mixin generate-color($colors...) {\r\n  @each $color in $colors {\r\n    $base: theme.get-color(\"#{$color}.base\");\r\n    $text: theme.get-color(\"#{$color}.content\");\r\n\r\n    :host([color=\"#{$color}\"]) {\r\n      --background: oklch(#{$base});\r\n      --border-color: oklch(#{$base} / 0.2);\r\n      --checkmark-color: oklch(#{$text});\r\n    }\r\n  }\r\n}\r\n@include generate-color(primary, secondary, accent, info, success, warning, error);\r\n\r\n:host(:not([color])) > input {\r\n  --background: oklch(#{theme.get-color(\"base.content\")});\r\n  --border-color: oklch(#{theme.get-color(\"base.content\")} / 0.2);\r\n  --checkmark-color: oklch(#{theme.get-color(\"base.100\")});\r\n}\r\n\r\n// Checkbox status\r\n// ----------------------------------------------------------------\r\n\r\n:host([disabled]) > input {\r\n  --border-color: transparent;\r\n  --background: oklch(#{theme.get-color(\"base.content\")});\r\n  opacity: 0.2;\r\n  cursor: not-allowed;\r\n\r\n  background-color: var(--background);\r\n  background-image: linear-gradient(-45deg, transparent 65%, var(--background) 65.99%),\r\n    linear-gradient(45deg, transparent 75%, var(--background) 75.99%),\r\n    linear-gradient(-45deg, var(--background) 40%, transparent 40.99%),\r\n    linear-gradient(\r\n      45deg,\r\n      var(--background) 30%,\r\n      var(--checkmark-color) 30.99%,\r\n      var(--checkmark-color) 40%,\r\n      transparent 40.99%\r\n    ),\r\n    linear-gradient(-45deg, var(--checkmark-color) 50%, var(--background) 50.99%);\r\n}\r\n:host([indeterminate]) > input {\r\n  background-repeat: no-repeat;\r\n  background-color: var(--background, oklch(theme.get-color(\"base.content\")));\r\n  animation: checkmark var(--animation-duration, 0.2s) ease-out;\r\n  background-image: linear-gradient(90deg, transparent 80%, var(--background) 80%),\r\n    linear-gradient(-90deg, transparent 80%, var(--background) 80%),\r\n    linear-gradient(\r\n      0deg,\r\n      var(--background) 43%,\r\n      var(--checkmark-color) 43%,\r\n      var(--checkmark-color) 57%,\r\n      var(--background) 57%\r\n    );\r\n}\r\n\r\n// Checkbox Context\r\n// ----------------------------------------------------------------\r\n\r\n:host(.in-item) {\r\n  grid-column: span 2;\r\n\r\n  > .label {\r\n    padding-inline-start: 0;\r\n  }\r\n}\r\n","import { componentConfig, config } from '#config';\r\nimport { Attributes, getHostContextProperty, hostContext, inheritAriaAttributes } from '#utils/helpers';\r\nimport {\r\n  AttachInternals,\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  Watch,\r\n  h,\r\n} from '@stencil/core';\r\nimport type { Color, Placement, Size } from 'src/interfaces';\r\nimport { Show } from '../Show';\r\n\r\n/**\r\n * Toggles are switches that change the state of a single option.\r\n * They can be switched on or off by pressing.\r\n * Toggles can also be `\"checked\"` programmatically by setting the checked property.\r\n *\r\n * @slot - The label text to associate with the toggle. Use the `\"placement\"` property to control where the label is placed relative to the toggle.\r\n *\r\n * @part label - The label text describing the toggle.\r\n * @part native - The native HTML input element.\r\n */\r\n@Component({\r\n  tag: 'pop-checkbox',\r\n  styleUrl: 'checkbox.scss',\r\n  shadow: true,\r\n  formAssociated: true,\r\n})\r\nexport class Checkbox implements ComponentInterface {\r\n  #inputId = `pop-cb-${checkboxIds++}`;\r\n  #inheritedAttributes: Attributes;\r\n  #nativeInput!: HTMLInputElement;\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  /**\r\n   * The name of the control, which is submitted with the form data.\r\n   */\r\n  @Prop() name: string = this.#inputId;\r\n\r\n  /**\r\n   * The value of the toggle does not mean if it's checked or not, use the `checked`\r\n   * property for that.\r\n   *\r\n   * The value of a toggle is analogous to the value of a `<input type=\"checkbox\">`,\r\n   * it's only used when the toggle participates in a native `<form>`.\r\n   */\r\n  @Prop({ reflect: true }) value?: string | null = 'on';\r\n\r\n  /**\r\n   * If `true`, the user must fill in a value before submitting a form.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) required?: boolean;\r\n\r\n  /**\r\n   * If `true`, the user cannot modify the value.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) readonly?: boolean;\r\n\r\n  /**\r\n   * If `true`, the toggle is selected.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) checked?: boolean;\r\n  @Watch('checked')\r\n  onCheckedChange(newChecked: boolean): void {\r\n    this.indeterminate = false;\r\n\r\n    this.popChange.emit({\r\n      checked: newChecked,\r\n      value: this.value || '',\r\n    });\r\n    this.internals.setFormValue(newChecked ? this.value : '', newChecked.toString());\r\n    this.internals.ariaChecked = newChecked.toString();\r\n  }\r\n\r\n  /**\r\n   * If a developer want to use `indeterminate`, `checked` property should be set to `false`\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) indeterminate?: boolean;\r\n\r\n  /**\r\n   * If true, the user cannot interact with the native element.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) disabled: boolean;\r\n\r\n  /**\r\n   * The color to use from your application's color palette.\r\n   * Default options are: `\"primary\"`, `\"secondary\"`, `\"accent\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `\"error\"`.\r\n   * For more information on colors, see [theming](/docs/theming/basics).\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) color?: Color;\r\n\r\n  /**\r\n   * Change size of the component\r\n   * Options are: `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`.\r\n   *\r\n   * @config @default 'md'\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) size?: Size;\r\n\r\n  /**\r\n   * Where to place the label relative to the checkbox.\r\n   * - `\"start\"`: The label will appear to the left of the checkbox in LTR and to the right in RTL.\r\n   * - `\"end\"`: The label will appear to the right of the checkbox in LTR and to the left in RTL.\r\n   *\r\n   * @config @default 'start'\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) placement?: Placement;\r\n\r\n  /**\r\n   * Emitted when the user switches the toggle on or off.\r\n   */\r\n  @Event() popChange: EventEmitter<CheckboxChangeEventDetail<string>>;\r\n\r\n  /**\r\n   * Emitted when the input has focus.\r\n   */\r\n  @Event() popFocus: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted when the input loses focus.\r\n   */\r\n  @Event() popBlur: EventEmitter<void>;\r\n\r\n  formResetCallback(): void {\r\n    this.checked = false;\r\n  }\r\n\r\n  formStateRestoreCallback(state: string): void {\r\n    this.checked = state === 'true';\r\n  }\r\n\r\n  componentWillLoad(): void {\r\n    this.#inheritedAttributes = inheritAriaAttributes(this.host);\r\n\r\n    componentConfig.apply(this, 'pop-checkbox', {\r\n      required: false,\r\n      readonly: false,\r\n      checked: false,\r\n      indeterminate: false,\r\n      disabled: false,\r\n      size: config.get('defaultSize', 'md'),\r\n      placement: 'start',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the native `input` in `pop-checkbox`. Use this method instead of the global\r\n   * `input.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus(): Promise<void> {\r\n    this.#nativeInput?.focus();\r\n  }\r\n\r\n  #onClick = (): void => {\r\n    const { disabled, readonly } = this;\r\n    if (disabled || readonly) return;\r\n\r\n    this.checked = !this.checked;\r\n  };\r\n\r\n  #onChecked = (ev: Event): void => {\r\n    const input = ev.target as HTMLInputElement;\r\n    this.checked = input.checked;\r\n  };\r\n\r\n  #onFocus = (): void => {\r\n    this.popFocus.emit();\r\n  };\r\n\r\n  #onBlur = (): void => {\r\n    this.popBlur.emit();\r\n  };\r\n\r\n  render() {\r\n    const { host, name, disabled, checked, indeterminate } = this;\r\n    const inputId = this.#inputId;\r\n    const ariaChecked = indeterminate ? 'mixed' : checked ? 'true' : 'false';\r\n\r\n    const hasLabel = host.textContent !== '';\r\n    const listSize = getHostContextProperty(host, 'pop-list', 'size', 'md');\r\n\r\n    return (\r\n      <Host\r\n        aria-labelledby={inputId}\r\n        aria-checked={ariaChecked}\r\n        aria-hidden={disabled ? 'true' : null}\r\n        onClick={this.#onClick}\r\n        class={{\r\n          'in-list': hostContext(host, 'pop-list'),\r\n          [`in-list-${listSize}`]: listSize !== null,\r\n          'in-item': hostContext(host, 'pop-item'),\r\n        }}\r\n      >\r\n        <Show when={hasLabel}>\r\n          <div class=\"label\">\r\n            <label htmlFor={inputId} part=\"label\">\r\n              <slot />\r\n            </label>\r\n          </div>\r\n        </Show>\r\n        <input\r\n          type=\"checkbox\"\r\n          part=\"native\"\r\n          id={inputId}\r\n          name={name}\r\n          aria-checked={ariaChecked}\r\n          indeterminate={this.indeterminate}\r\n          required={this.required}\r\n          readOnly={this.readonly}\r\n          checked={checked}\r\n          disabled={disabled}\r\n          onChange={this.#onChecked}\r\n          onFocus={this.#onFocus}\r\n          onBlur={this.#onBlur}\r\n          ref={el => (this.#nativeInput = el)}\r\n          {...this.#inheritedAttributes}\r\n        />\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nlet checkboxIds = 0;\r\n"],"version":3}