{"file":"pop-toggle.js","mappings":"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","names":[],"sources":["src/components/toggle/toggle.scss?tag=pop-toggle&encapsulation=shadow","src/components/toggle/toggle.tsx"],"sourcesContent":["@use \"../../global/styles/radius\";\r\n@use \"../../global/styles/theme\";\r\n@use \"../../global/styles/input\";\r\n\r\n/**\r\n * @prop --border-radius: Border radius\r\n *\r\n * @prop --background: Background color\r\n *\r\n * @prop --color: Change border and thumd color\r\n * @prop --required-color: Change required star color\r\n * @prop --checked-color: Change border and thumd color when toggle is checked\r\n *\r\n * @prop --opacity: Change border and thumd opacity\r\n *\r\n * @prop --animation-duration: Animation duration\r\n */\r\n\r\n// Toogle\r\n// ----------------------------------------------------------------\r\n\r\n:host {\r\n  --background: oklch(#{theme.get-color(\"base.100\")});\r\n  --handleoffsetcalculator: calc(var(--handleoffset) * -1);\r\n\r\n  @include input.label;\r\n\r\n  box-sizing: border-box;\r\n  display: inline-flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 4px;\r\n  flex-shrink: 0;\r\n\r\n  > input {\r\n    appearance: none;\r\n\r\n    margin: 0;\r\n    margin-inline-start: auto;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-color: currentColor;\r\n    border-radius: var(--border-radius, #{radius.$xxl});\r\n    background-color: currentColor;\r\n\r\n    color: var(--color, oklch(theme.get-color(\"base.content\") / var(--opacity, 0.5)));\r\n    transition:\r\n      color,\r\n      background,\r\n      box-shadow var(--animation-duration, 0.2s) ease-out;\r\n    box-shadow:\r\n      var(--handleoffsetcalculator) 0 0 2px var(--background) inset,\r\n      0 0 0 2px var(--background) inset,\r\n      var(--togglehandleborder, 0 0);\r\n\r\n    cursor: pointer;\r\n\r\n    &:focus-visible {\r\n      outline-style: solid;\r\n      outline-width: 2px;\r\n      outline-offset: 2px;\r\n      outline-color: var(--color, oklch(theme.get-color(\"base.content\") / 0.2));\r\n    }\r\n    &:checked {\r\n      --handleoffsetcalculator: var(--handleoffset);\r\n      color: var(--checked-color);\r\n      background-image: none;\r\n    }\r\n  }\r\n}\r\n\r\n// Toogle Size\r\n// ----------------------------------------------------------------\r\n\r\n:host([size=\"xs\"]),\r\n:host-context(pop-list[size=\"xs\"]) {\r\n  --handleoffset: 0.5rem;\r\n\r\n  > input {\r\n    height: 1rem;\r\n    width: 1.5rem;\r\n  }\r\n}\r\n:host([size=\"sm\"]),\r\n:host-context(pop-list[size=\"sm\"]) {\r\n  --handleoffset: 0.75rem;\r\n\r\n  > input {\r\n    height: 1.25rem;\r\n    width: 2rem;\r\n  }\r\n}\r\n:host([size=\"md\"]),\r\n:host(:not([size])) {\r\n  --handleoffset: 1.5rem;\r\n\r\n  > input {\r\n    height: 1.5rem;\r\n    width: 3rem;\r\n  }\r\n}\r\n:host([size=\"lg\"]),\r\n:host-context(pop-list[size=\"lg\"]) {\r\n  --handleoffset: 2rem;\r\n\r\n  > input {\r\n    height: 2rem;\r\n    width: 4rem;\r\n  }\r\n}\r\n\r\n// Toogle Color\r\n// ----------------------------------------------------------------\r\n\r\n@mixin generate-color($colors...) {\r\n  @each $color in $colors {\r\n    $base: theme.get-color(\"#{$color}.base\");\r\n\r\n    :host([color=\"#{$color}\"]) > input:checked {\r\n      --color: oklch(#{$base} / var(--opacity, 1));\r\n      --checked-color: oklch(#{$base} / var(--opacity, 1));\r\n    }\r\n  }\r\n}\r\n@include generate-color(primary, secondary, accent, info, success, warning, error);\r\n\r\n:host(:not([color])) > input:checked {\r\n  --checked-color: oklch(#{theme.get-color(\"base.content\")} / var(--opacity, 1));\r\n}\r\n\r\n// Toogle State\r\n// ----------------------------------------------------------------\r\n\r\n:host([indeterminate]) > input {\r\n  color: var(--checked-color, oklch(theme.get-color(\"base.content\")));\r\n\r\n  box-shadow:\r\n    calc(1.5rem / 2) 0 0 2px var(--background) inset,\r\n    calc(1.5rem / -2) 0 0 2px var(--background) inset,\r\n    0 0 0 2px var(--background) inset,\r\n    calc(1.5rem / 2) 0 0 3px currentColor inset,\r\n    calc(1.5rem / -2) 0 0 3px currentColor inset;\r\n}\r\n\r\n:host([disabled]) > input {\r\n  $base: theme.get-color(\"base.content\");\r\n\r\n  --color: oklch(#{$base} / var(--opacity, 1));\r\n  --togglehandleborder: 0 0 0 3px oklch(#{$base}) inset, var(--handleoffsetcalculator) 0 0 3px oklch(#{$base}) inset;\r\n\r\n  border-color: var(--color, oklch(#{$base}));\r\n  background-color: transparent;\r\n  opacity: 0.3;\r\n  cursor: not-allowed;\r\n}\r\n\r\n// Toggle Context\r\n// ----------------------------------------------------------------\r\n\r\n:host-context(pop-item) {\r\n  grid-column: span 2;\r\n\r\n  > .label {\r\n    padding-inline-start: 0;\r\n  }\r\n}\r\n","import { componentConfig, config } from '#config';\r\nimport { Attributes, inheritAriaAttributes } from '#utils/helpers';\r\nimport {\r\n  AttachInternals,\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  Watch,\r\n  h,\r\n} from '@stencil/core';\r\nimport type { Color, Size } from 'src/interfaces';\r\nimport { Show } from '../Show';\r\n\r\n/**\r\n * Toggle is a checkbox that is styled to look like a switch button.\r\n *\r\n * @slot - Slot for the content of the label\r\n *\r\n * @part label - The native HTML label element that wrap the text .\r\n * @part native - The native HTML input element.\r\n */\r\n@Component({\r\n  tag: 'pop-toggle',\r\n  styleUrl: 'toggle.scss',\r\n  shadow: true,\r\n  formAssociated: true,\r\n})\r\nexport class Toggle implements ComponentInterface {\r\n  #inputId = `pop-tg-${toggleIds++}`;\r\n  #inheritedAttributes: Attributes;\r\n  #nativeInput!: HTMLInputElement;\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  /**\r\n   * The name of the control, which is submitted with the form data.\r\n   */\r\n  @Prop() name: string = this.#inputId;\r\n\r\n  /**\r\n   * The value of the toggle does not mean if it's checked or not, use the `checked`\r\n   * property for that.\r\n   *\r\n   * The value of a toggle is analogous to the value of a `<input type=\"checkbox\">`,\r\n   * it's only used when the toggle participates in a native `<form>`.\r\n   */\r\n  @Prop({ reflect: true }) value?: string | null = 'on';\r\n\r\n  /**\r\n   * If `true`, the user must fill in a value before submitting a form.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) required?: boolean;\r\n\r\n  /**\r\n   * If `true`, the user cannot modify the value.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) readonly?: boolean;\r\n\r\n  /**\r\n   * If `true`, the toggle is selected.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) checked?: boolean;\r\n  @Watch('checked')\r\n  onCheckedChange(checked: boolean): void {\r\n    this.indeterminate = false;\r\n\r\n    this.internals.setFormValue(this.value, checked.toString());\r\n    this.popChange.emit({\r\n      checked,\r\n      value: this.value || '',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If a developer want to use `indeterminate`, `checked` property should be set to `false`\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) indeterminate?: boolean = false;\r\n\r\n  /**\r\n   * If true, the user cannot interact with the native element.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) disabled: boolean;\r\n\r\n  /**\r\n   * The color to use from your application's color palette.\r\n   * Default options are: `\"primary\"`, `\"secondary\"`, `\"accent\"`, `\"ghost\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `\"error\"`.\r\n   * For more information on colors, see [theming](/docs/theming/basics).\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) color?: Color | 'ghost';\r\n\r\n  /**\r\n   * Change size of the component\r\n   * Options are: `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`.\r\n   *\r\n   * @config @default 'md'\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) size?: Size;\r\n\r\n  /**\r\n   * Emitted when the input checked attribut change\r\n   */\r\n  @Event() popChange: EventEmitter<ToggleChangeEventDetail<string>>;\r\n\r\n  /**\r\n   * Emitted when the input has focus.\r\n   */\r\n  @Event() popFocus: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted when the input loses focus.\r\n   */\r\n  @Event() popBlur: EventEmitter<void>;\r\n\r\n  formResetCallback(): void {\r\n    this.checked = false;\r\n  }\r\n\r\n  formStateRestoreCallback(state: string): void {\r\n    this.checked = state === 'true';\r\n  }\r\n\r\n  componentWillLoad(): void {\r\n    this.#inheritedAttributes = inheritAriaAttributes(this.host);\r\n\r\n    componentConfig.apply(this, 'pop-toggle', {\r\n      required: false,\r\n      readonly: false,\r\n      checked: false,\r\n      indeterminate: false,\r\n      disabled: false,\r\n      size: config.get('defaultSize', 'md'),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the native `input` in `pop-toggle`. Use this method instead of the global\r\n   * `input.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus(): Promise<void> {\r\n    this.#nativeInput?.focus();\r\n  }\r\n\r\n  #onClick = () => {\r\n    const { checked, disabled, readonly } = this;\r\n    if (disabled || readonly) return;\r\n\r\n    this.checked = !checked;\r\n  };\r\n\r\n  #onChecked = (ev: Event) => {\r\n    const input = ev.target as HTMLInputElement;\r\n    this.checked = input.checked;\r\n  };\r\n\r\n  #onFocus = () => {\r\n    this.popFocus.emit();\r\n  };\r\n\r\n  #onBlur = () => {\r\n    this.popBlur.emit();\r\n  };\r\n\r\n  render() {\r\n    const { host, name, disabled, checked } = this;\r\n    const inputId = this.#inputId;\r\n\r\n    const hasLabel = host.textContent !== '';\r\n\r\n    return (\r\n      <Host\r\n        aria-labelledby={inputId}\r\n        aria-checked={`${checked}`}\r\n        aria-hidden={disabled ? 'true' : null}\r\n        onClick={this.#onClick}\r\n      >\r\n        <Show when={hasLabel}>\r\n          <div class=\"label\">\r\n            <label htmlFor={inputId} part=\"label\">\r\n              <slot />\r\n            </label>\r\n          </div>\r\n        </Show>\r\n        <input\r\n          type=\"checkbox\"\r\n          role=\"switch\"\r\n          part=\"native\"\r\n          id={inputId}\r\n          name={name}\r\n          aria-checked={`${checked}`}\r\n          indeterminate={this.indeterminate}\r\n          required={this.required}\r\n          readOnly={this.readonly}\r\n          checked={checked}\r\n          disabled={disabled}\r\n          onChange={this.#onChecked}\r\n          onFocus={this.#onFocus}\r\n          onBlur={this.#onBlur}\r\n          ref={el => (this.#nativeInput = el)}\r\n          {...this.#inheritedAttributes}\r\n        />\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nlet toggleIds = 0;\r\n"],"version":3}