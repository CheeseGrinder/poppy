{"file":"pop-accordion.js","mappings":";;;;;AAAA,MAAM,YAAY,GAAG,qvDAAqvD,CAAC;AAC3wD,2BAAe,YAAY;;;;;;;;;;;;;;;;;;;MCkBd,SAAS;;;;;QACpB,4CAA+C;QAsE/C,wCAAsB;YACpB,IAAI,CAAC,uBAAA,IAAI,iCAAgB;gBAAE,OAAO;YAElC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,uBAAA,IAAI,iCAAgB,CAAC;YACnD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;YAE1B,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SAClD,EAAC;QAEF,6BAAW;YACT,IAAI,uBAAA,IAAI,iCAAgB;gBAAE,OAAO;YAEjC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;YACpC,IAAI,QAAQ,IAAI,QAAQ;gBAAE,OAAO;YACjC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;SAC5B,EAAC;wBA9E4C,KAAK;wBAKL,KAAK;;sBAYQ,KAAK;;IAEhE,iBAAiB;QACf,uBAAA,IAAI,6BAAmB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,MAAA,CAAC;QAEhE,uBAAA,IAAI,iCAAgB,EAAE,gBAAgB,CAAC,iBAAiB,EAAE,uBAAA,IAAI,qCAAoB,CAAC,CAAC;KACrF;IAED,oBAAoB;QAClB,uBAAA,IAAI,iCAAgB,EAAE,mBAAmB,CAAC,iBAAiB,EAAE,uBAAA,IAAI,qCAAoB,CAAC,CAAC;KACxF;;;;;IAOD,MAAM,IAAI;QACR,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,KAAK,CAAC;SACd;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,OAAO,IAAI,CAAC;KACb;;;;;IAOD,MAAM,KAAK;QACT,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;QACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,OAAO,IAAI,CAAC;KACb;;;;IAMD,MAAM,MAAM;QACV,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;KAC5B;IAmBD,MAAM;QACJ,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QAEtB,QACE,EAAC,IAAI,qDACH,KAAK,EAAE;gBACL,WAAW,EAAE,WAAW,CAAC,IAAI,EAAE,UAAU,CAAC;aAC3C,IAED,+DAAQ,IAAI,EAAC,QAAQ,EAAC,KAAK,EAAC,iBAAiB,EAAC,OAAO,EAAE,uBAAA,IAAI,0BAAS,IAClE,4DAAK,KAAK,EAAC,gBAAgB,IACzB,6DAAM,IAAI,EAAC,QAAQ,GAAG,CAClB,EACN,EAAC,WAAW,sDAAG,CACR,EACT,4DAAK,IAAI,EAAC,SAAS,EAAC,KAAK,EAAC,mBAAmB,IAC3C,8DAAQ,CACJ,CACD,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/accordion/accordion.scss?tag=pop-accordion&encapsulation=shadow","src/components/accordion/accordion.tsx"],"sourcesContent":["@use \"../../global/styles/theme\";\r\n@use \"../../global/styles/radius\";\r\n@use \"../../global/styles/join-item\";\r\n\r\n/**\r\n * @prop --border-radius: Change border radius\r\n * @prop --border-color: Change border color\r\n *\r\n * @prop --background: Change background color\r\n *\r\n * @prop --animation: Change animation timing\r\n */\r\n\r\n// Accordion\r\n// ----------------------------------------------------------------\r\n\r\n@include join-item.item_root;\r\n\r\n:host {\r\n  --border-radius: #{radius.$xl};\r\n  --border-color: oklch(#{theme.get-color(\"base.300\")});\r\n  --background: oklch(#{theme.get-color(\"base.200\")});\r\n  --animation: 0.2s;\r\n\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  display: grid;\r\n\r\n  overflow: hidden;\r\n\r\n  width: 100%;\r\n\r\n  border: 1px solid var(--border-color);\r\n  border-radius: var(--border-radius);\r\n\r\n  background-color: var(--background);\r\n\r\n  transition: grid-template-rows var(--animation);\r\n\r\n  > .accordion-title {\r\n    box-sizing: border-box;\r\n    position: relative;\r\n\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    grid-column-start: 1;\r\n    grid-row-start: 1;\r\n\r\n    padding: 1rem;\r\n    padding-inline-end: 1.5rem;\r\n\r\n    width: 100%;\r\n    min-height: 3.75rem;\r\n\r\n    cursor: pointer;\r\n    user-select: none;\r\n\r\n    transition: background-color var(--animation) ease-out;\r\n  }\r\n\r\n  > .accordion-content {\r\n    grid-column-start: 1;\r\n    grid-row-start: 2;\r\n\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n\r\n    min-height: 0;\r\n\r\n    transition:\r\n      visibility var(--animation),\r\n      padding var(--animation) ease-out,\r\n      background-color var(--animation) ease-out;\r\n\r\n    cursor: unset;\r\n  }\r\n\r\n  > svg {\r\n    margin-inline-start: auto;\r\n    transition: transform 150ms ease 0ms;\r\n  }\r\n}\r\n\r\n// Accordion Open State\r\n// ----------------------------------------------------------------\r\n\r\n:host(:not([is-open])) {\r\n  grid-template-rows: auto 0fr;\r\n\r\n  > .accordion-content {\r\n    visibility: hidden;\r\n  }\r\n}\r\n\r\n:host([is-open]) {\r\n  grid-template-rows: auto 1fr;\r\n\r\n  svg {\r\n    transform: rotateX(180deg);\r\n  }\r\n\r\n  > .accordion-content {\r\n    visibility: visible;\r\n    min-height: fit-content;\r\n    padding-bottom: 1rem;\r\n  }\r\n}\r\n","import { compareOptions } from '#utils/forms';\r\nimport { hostContext } from '#utils/helpers';\r\nimport { Component, ComponentInterface, Element, Host, Method, Prop, h } from '@stencil/core';\r\nimport { ChevronDown } from '../ChevronDown';\r\n\r\n/**\r\n * Accordion is used for showing and hiding content.\r\n *\r\n * @slot - Content that will be hiding or shown\r\n * @slot header - Content of the accordion header\r\n *\r\n * @part header - Header of the accordion\r\n * @part content - Content of the accordion\r\n */\r\n@Component({\r\n  tag: 'pop-accordion',\r\n  styleUrl: 'accordion.scss',\r\n  shadow: true,\r\n})\r\nexport class Accordion implements ComponentInterface {\r\n  #accordionGroup?: HTMLPopAccordionGroupElement;\r\n\r\n  @Element() host: HTMLElement;\r\n\r\n  /**\r\n   * If `true`, the user cannot interact with the element.\r\n   */\r\n  @Prop({ reflect: true }) readonly?: boolean = false;\r\n\r\n  /**\r\n   * If `true`, the user cannot interact with the element.\r\n   */\r\n  @Prop({ reflect: true }) disabled?: boolean = false;\r\n\r\n  /**\r\n   * name of the accordion\r\n   */\r\n  @Prop({ reflect: true }) name!: string;\r\n\r\n  /**\r\n   * If `true`, the accordion is open.\r\n   *\r\n   * The developer must not set this value to `true` if the accordion is used in `<accordion-group>` element and set the active property to the name of the accordion.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) isOpen?: boolean = false;\r\n\r\n  connectedCallback(): void {\r\n    this.#accordionGroup = this.host.closest('pop-accordion-group');\r\n\r\n    this.#accordionGroup?.addEventListener('popActiveChange', this.#handleValueChanged);\r\n  }\r\n\r\n  disconnectedCallback(): void {\r\n    this.#accordionGroup?.removeEventListener('popActiveChange', this.#handleValueChanged);\r\n  }\r\n\r\n  /**\r\n   * Open the accordion.\r\n   * If the method returns `false`, the accordion was already open. otherwise it returns `true`\r\n   */\r\n  @Method()\r\n  async open(): Promise<boolean> {\r\n    if (this.isOpen) {\r\n      return false;\r\n    }\r\n    this.isOpen = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Close the accordion.\r\n   * If the method returns `false`, the accordion was already closed. otherwise it returns `true`\r\n   */\r\n  @Method()\r\n  async close(): Promise<boolean> {\r\n    if (!this.isOpen) {\r\n      return false;\r\n    }\r\n    this.isOpen = false;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Open or close the accordion depending on his actual state\r\n   */\r\n  @Method()\r\n  async toggle(): Promise<void> {\r\n    this.isOpen = !this.isOpen;\r\n  }\r\n\r\n  #handleValueChanged = (): void => {\r\n    if (!this.#accordionGroup) return;\r\n\r\n    const { active: newActive } = this.#accordionGroup;\r\n    const current = this.name;\r\n\r\n    this.isOpen = compareOptions(current, newActive);\r\n  };\r\n\r\n  #onClick = () => {\r\n    if (this.#accordionGroup) return;\r\n\r\n    const { readonly, disabled } = this;\r\n    if (disabled || readonly) return;\r\n    this.isOpen = !this.isOpen;\r\n  };\r\n\r\n  render() {\r\n    const { host } = this;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          'join-item': hostContext(host, 'pop-join'),\r\n        }}\r\n      >\r\n        <header part=\"header\" class=\"accordion-title\" onClick={this.#onClick}>\r\n          <div class=\"header-content\">\r\n            <slot name=\"header\" />\r\n          </div>\r\n          <ChevronDown />\r\n        </header>\r\n        <div part=\"content\" class=\"accordion-content\">\r\n          <slot />\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}