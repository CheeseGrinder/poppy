{"file":"pop-badge.js","mappings":";;;;AAAA,MAAM,QAAQ,GAAG,iuHAAiuH,CAAC;AACnvH,uBAAe,QAAQ;;;;;;;;;;;;;;;;;;;MCiBV,KAAK;;;;;QAChB,qCAAmC,EAAE,EAAC;;;wBA0BuB,KAAK;;;IASlE,iBAAiB;QACf,uBAAA,IAAI,8BAAwB,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAA,CAAC;QAE7D,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,EAAE;YACvC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC;YACrC,QAAQ,EAAE,KAAK;YACf,EAAE,EAAE,KAAK;SACV,CAAC,CAAC;KACJ;IAED,mBAAmB;QACjB,uBAAA,IAAI,8BAAwB,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAA,CAAC;KAC9D;IAED,MAAM;QACJ,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC;QAEpB,QACE,EAAC,IAAI,uDACH,EAAC,GAAG,qDAAC,KAAK,EAAC,OAAO,EAAC,IAAI,EAAC,QAAQ,KAAK,uBAAA,IAAI,kCAAqB,IAC5D,8DAAa,CACT,CACD,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/badge/badge.scss?tag=pop-badge&encapsulation=shadow","src/components/badge/badge.tsx"],"sourcesContent":["@use \"../../global/styles/radius\";\r\n@use \"../../global/styles/theme\";\r\n\r\n/**\r\n * @prop --border-radius: Border radius\r\n * @prop --border-color: Border color\r\n *\r\n * @prop --background: Color of the background\r\n *\r\n * @prop --color: Color of the text\r\n */\r\n\r\n// Badge\r\n// ----------------------------------------------------------------\r\n\r\n:host {\r\n  --border-radius: #{radius.$full};\r\n  --border-color: oklch(#{theme.get-color(\"base.200\")});\r\n  --background: oklch(#{theme.get-color(\"base.100\")});\r\n  --color: oklch(#{theme.get-color(\"base.content\")});\r\n\r\n  display: inline-flex;\r\n  width: max-content;\r\n\r\n  > .badge {\r\n    box-sizing: border-box;\r\n\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    transition-property:\r\n      color,\r\n      background-color,\r\n      border-color,\r\n      text-decoration-color,\r\n      fill,\r\n      stroke,\r\n      opacity,\r\n      box-shadow,\r\n      transform,\r\n      filter,\r\n      backdrop-filter,\r\n      -webkit-backdrop-filter;\r\n    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\r\n    transition-duration: 0.2s;\r\n\r\n    width: fit-content;\r\n    height: 100%;\r\n\r\n    border: solid 1px var(--border-color);\r\n    border-radius: var(--border-radius);\r\n    background-color: var(--background);\r\n    color: var(--color);\r\n  }\r\n}\r\n\r\n// Badge Size\r\n// ----------------------------------------------------------------\r\n\r\n:host([size=\"xs\"]) {\r\n  height: 0.75rem;\r\n\r\n  > .badge {\r\n    font-size: 0.75rem;\r\n    line-height: 0.75rem;\r\n\r\n    padding-left: 0.313rem;\r\n    padding-right: 0.313rem;\r\n  }\r\n}\r\n:host([size=\"sm\"]) {\r\n  height: 1rem;\r\n\r\n  > .badge {\r\n    font-size: 0.75rem;\r\n    line-height: 1rem;\r\n\r\n    padding-left: 0.438rem;\r\n    padding-right: 0.438rem;\r\n  }\r\n}\r\n:host([size=\"md\"]) {\r\n  height: 1.25rem;\r\n\r\n  > .badge {\r\n    font-size: 0.875rem;\r\n    line-height: 1.25rem;\r\n\r\n    padding-left: 0.563rem;\r\n    padding-right: 0.563rem;\r\n  }\r\n}\r\n:host([size=\"lg\"]) {\r\n  height: 1.5rem;\r\n\r\n  > .badge {\r\n    font-size: 1rem;\r\n    line-height: 1.5rem;\r\n\r\n    padding-left: 0.688rem;\r\n    padding-right: 0.688rem;\r\n  }\r\n}\r\n\r\n// Badge Color\r\n// ----------------------------------------------------------------\r\n\r\n@mixin generate-color($colors...) {\r\n  @each $color in $colors {\r\n    $base: theme.get-color(\"#{$color}.base\");\r\n    $text: theme.get-color(\"#{$color}.content\");\r\n\r\n    :host([color=\"#{$color}\"]) {\r\n      --border-color: oklch(#{$base});\r\n      --background: oklch(#{$base});\r\n      --color: oklch(#{$text});\r\n    }\r\n    :host([color=\"#{$color}\"][outlined]) {\r\n      --color: oklch(#{$base});\r\n    }\r\n  }\r\n}\r\n@include generate-color(neutral, primary, secondary, accent, info, success, warning, error);\r\n\r\n:host(:not([color], [outlined])) {\r\n  --border-color: oklch(#{theme.get-color(\"base.200\")});\r\n  --background: oklch(#{theme.get-color(\"base.100\")});\r\n  --color: oklch(#{theme.get-color(\"base.content\")});\r\n}\r\n\r\n// Badge Outline\r\n// ----------------------------------------------------------------\r\n\r\n:host([outlined]) {\r\n  --border-color: currentColor;\r\n  --background: transparent;\r\n}\r\n","import { componentConfig, config } from '#config';\r\nimport { Attributes, inheritAriaAttributes } from '#utils/helpers';\r\nimport { Component, ComponentInterface, Element, Host, Prop, h } from '@stencil/core';\r\nimport type { Color, Size } from 'src/interfaces';\r\nimport type { BadgeAs } from './badge.interface';\r\n\r\n/**\r\n * Badges are used to inform the user of the status of specific data.\r\n *\r\n * @slot - Slot for the content of the badge\r\n *\r\n * @part native - The native HTML div or span element that wraps the content.\r\n */\r\n@Component({\r\n  tag: 'pop-badge',\r\n  styleUrl: 'badge.scss',\r\n  shadow: true,\r\n})\r\nexport class Badge implements ComponentInterface {\r\n  #inheritedAttributes: Attributes = {};\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  /**\r\n   * The color to use from your application's color palette.\r\n   * Default options are: `\"neutral\"`, `\"primary\"`, `\"secondary\"`, `\"accent\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `\"error\"`.\r\n   * For more information on colors, see [theming](/docs/theming/basics).\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) color?: Color | 'neutral';\r\n\r\n  /**\r\n   * Change size of the component\r\n   * Options are: `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`.\r\n   *\r\n   * @config @default 'md'\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) size?: Size;\r\n\r\n  /**\r\n   * Transparent Badge with colored border\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) outlined?: boolean = false;\r\n\r\n  /**\r\n   * Used HTML element for\r\n   *\r\n   * @config @default 'div'\r\n   */\r\n  @Prop({ mutable: true }) as?: BadgeAs;\r\n\r\n  componentWillLoad(): void {\r\n    this.#inheritedAttributes = inheritAriaAttributes(this.host);\r\n\r\n    componentConfig.apply(this, 'pop-badge', {\r\n      size: config.get('defaultSize', 'md'),\r\n      outlined: false,\r\n      as: 'div',\r\n    });\r\n  }\r\n\r\n  componentWillRender(): void {\r\n    this.#inheritedAttributes = inheritAriaAttributes(this.host);\r\n  }\r\n\r\n  render() {\r\n    const Tag = this.as;\r\n\r\n    return (\r\n      <Host>\r\n        <Tag class=\"badge\" part=\"native\" {...this.#inheritedAttributes}>\r\n          <slot></slot>\r\n        </Tag>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}