{"file":"pop-popover.js","mappings":"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","names":[],"sources":["src/components/popover/popover.scss?tag=pop-popover&encapsulation=shadow","src/components/popover/popover.tsx"],"sourcesContent":["@use \"../../global/styles/theme\";\r\n@use \"../../global/styles/shadow\";\r\n@use \"../../global/styles/radius\";\r\n\r\n:host {\r\n  .popover {\r\n    box-sizing: border-box;\r\n    position: absolute;\r\n\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    border: none;\r\n\r\n    color: var(--color, oklch(#{theme.get-color(\"base.content\")}));\r\n\r\n    background: transparent;\r\n\r\n    &:not([popover], [open]) {\r\n      opacity: 0;\r\n    }\r\n\r\n    &::backdrop {\r\n      background-color: rgb(0 0 0 / 0.125);\r\n      transition: opacity 15s ease 0ms;\r\n    }\r\n\r\n    &-content {\r\n      min-height: 2rem;\r\n\r\n      border: solid;\r\n      border-color: oklch(#{theme.get-color(\"base.200\")});\r\n      border-width: 1px;\r\n      border-radius: var(--border-radius, #{radius.$md});\r\n\r\n      background-color: var(--background, oklch(#{theme.get-color(\"base.100\")}));\r\n\r\n      box-shadow: shadow.$md;\r\n\r\n      animation-name: present;\r\n      animation-duration: 200ms;\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes present {\r\n  from {\r\n    opacity: 0.6;\r\n    scale: 0.95;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    scale: 1;\r\n  }\r\n}\r\n","import { componentConfig } from '#config';\r\nimport { componentOnReady, raf } from '#utils/helpers';\r\nimport { OverlayInterface } from '#utils/overlay';\r\nimport { TriggerAction, TriggerController } from '#utils/trigger';\r\nimport {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  Event as StencilEvent,\r\n  Watch,\r\n  h,\r\n} from '@stencil/core';\r\nimport { ComponentProps, ComponentRef } from 'src/interfaces';\r\n\r\n@Component({\r\n  tag: 'pop-popover',\r\n  styleUrl: 'popover.scss',\r\n  shadow: true,\r\n})\r\nexport class Popover implements ComponentInterface, OverlayInterface {\r\n  #dialog: HTMLDialogElement;\r\n  #handler: (event: ToggleEvent) => void;\r\n\r\n  #triggerController = TriggerController.create();\r\n\r\n  @Element() host: HTMLPopPopoverElement;\r\n\r\n  /**\r\n   * If `true`, the popover will open. If `false`, the popover will close.\r\n   * Use this if you need finer grained control over presentation, otherwise\r\n   * just use the popoverController or the `trigger` property.\r\n   * Note: `open` will not automatically be set back to `false` when\r\n   * the popover dismisses. You will need to do that in your code.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) open: boolean;\r\n  @Watch('open')\r\n  onOpenChange(isOpen: boolean): void {\r\n    if (isOpen) {\r\n      this.present();\r\n    } else {\r\n      this.dismiss(null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If `true`, the popover will animate.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) animated = true;\r\n\r\n  /**\r\n   * If `true`, a backdrop will be displayed behind the popover.\r\n   * This property controls whether or not the backdrop\r\n   * darkens the screen when the popover is presented.\r\n   * It does not control whether or not the backdrop\r\n   * is active or present in the DOM.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) showBackdrop: boolean = false;\r\n\r\n  /**\r\n   * If `true`, the popover will be dismissed when the backdrop is clicked.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) backdropDismiss: boolean = false;\r\n\r\n  /**\r\n   * The event to pass to the popover animation.\r\n   */\r\n  @Prop() event: Event;\r\n\r\n  /**\r\n   * An ID corresponding to the trigger element that\r\n   * causes the popover to open. Use the `trigger-action`\r\n   * property to customize the interaction that results in\r\n   * the popover opening.\r\n   */\r\n  @Prop() trigger?: string;\r\n  @Watch('trigger')\r\n  onTriggerChange(trigger: string) {\r\n    if (trigger) {\r\n      this.#triggerController.addListener(this.host, trigger, this.triggerAction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Describes what kind of interaction with the trigger that\r\n   * should cause the popover to open. Does not apply when the `trigger`\r\n   * property is `undefined`.\r\n   * If `\"click\"`, the popover will be presented when the trigger is left clicked.\r\n   * If `\"hover\"`, the popover will be presented when a pointer hovers over the trigger.\r\n   * If `\"context-menu\"`, the popover will be presented when the trigger is right\r\n   * clicked on desktop and long pressed on mobile. This will also prevent your\r\n   * device's normal context menu from appearing.\r\n   *\r\n   * @config @default 'click'\r\n   */\r\n  @Prop({ mutable: true }) triggerAction: TriggerAction;\r\n  @Watch('triggerAction')\r\n  onTriggerActionChange(triggerAction: TriggerAction) {\r\n    this.#triggerController.addListener(this.host, this.trigger, triggerAction);\r\n  }\r\n\r\n  /**\r\n   * The component to display inside of the popover.\r\n   * You only need to use this if you are not using\r\n   * a JavaScript framework. Otherwise, you can just\r\n   * slot your component inside of `pop-popover`.\r\n   */\r\n  @Prop({ mutable: true }) component?: ComponentRef;\r\n\r\n  /**\r\n   * The data to pass to the popover component.\r\n   * You only need to use this if you are not using\r\n   * a JavaScript framework. Otherwise, you can just\r\n   * set the props directly on your component.\r\n   */\r\n  @Prop({ mutable: true }) componentProps?: ComponentProps;\r\n\r\n  /**\r\n   * Emitted before the popover has presented.\r\n   */\r\n  @StencilEvent() willPresent: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted after the popover has presented.\r\n   */\r\n  @StencilEvent() didPresent: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted before the popover has dismissed.\r\n   */\r\n  @StencilEvent() willDismiss: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted after the popover has dismissed.\r\n   */\r\n  @StencilEvent() didDismiss: EventEmitter<void>;\r\n\r\n  /**\r\n   * Use this function to emit `didDismiss` event instead of the StencilEvent because when this event is fired the element doesnt exist anymore in the DOM.\r\n   * The live above is only here for compilation and documentation purpose.\r\n   */\r\n  #didDismiss(): void {\r\n    if (this.host.isConnected) return;\r\n\r\n    this.host.dispatchEvent(\r\n      new CustomEvent('didDismiss', {\r\n        detail: {},\r\n      }),\r\n    );\r\n  }\r\n\r\n  connectedCallback(): void {\r\n    const { trigger } = this;\r\n\r\n    this.onTriggerChange(trigger);\r\n  }\r\n\r\n  componentWillLoad(): void {\r\n    componentConfig.apply(this, 'pop-popover', {\r\n      open: false,\r\n      animated: false,\r\n      showBackdrop: false,\r\n      backdropDismiss: false,\r\n      triggerAction: 'click',\r\n    });\r\n  }\r\n\r\n  componentDidLoad(): void {\r\n    this.#setupListener();\r\n\r\n    /**\r\n     * If popover was rendered with open=\"true\"\r\n     * then we should open popover immediately.\r\n     */\r\n    if (this.open) {\r\n      raf(() => this.present());\r\n    }\r\n  }\r\n\r\n  disconnectedCallback(): void {\r\n    this.#triggerController.removeListener();\r\n    this.#dialog.removeEventListener('beforetoggle', this.#handler);\r\n    this.#didDismiss();\r\n  }\r\n\r\n  @Method()\r\n  async present(): Promise<boolean> {\r\n    const { open, component, componentProps, host } = this;\r\n    if (open) {\r\n      return false;\r\n    }\r\n\r\n    this.willPresent.emit();\r\n\r\n    const el: any = typeof component === 'string' ? host.ownerDocument?.createElement(component) : component;\r\n    // if (cssClasses) {\r\n    //   cssClasses.forEach((c) => el.classList.add(c));\r\n    // }\r\n    if (componentProps) {\r\n      Object.assign(el, componentProps);\r\n    }\r\n\r\n    host.appendChild(el);\r\n    await new Promise(resolve => componentOnReady(el, resolve));\r\n    this.#present();\r\n    this.didPresent.emit();\r\n\r\n    return true;\r\n  }\r\n\r\n  @Method()\r\n  async dismiss(data?: any): Promise<boolean> {\r\n    const { open, backdropDismiss } = this;\r\n    if (!open) return false;\r\n\r\n    this.willDismiss.emit();\r\n    backdropDismiss ? this.#dialog.hidePopover() : this.#dialog.close(data);\r\n    this.#didDismiss();\r\n\r\n    return true;\r\n  }\r\n\r\n  #setupListener(): void {\r\n    this.#handler = (event: ToggleEvent) => {\r\n      if (event.oldState === 'open') {\r\n        this.willDismiss.emit();\r\n        this.host.remove();\r\n      }\r\n    };\r\n\r\n    this.#dialog.addEventListener('beforetoggle', this.#handler);\r\n  }\r\n\r\n  #present(): void {\r\n    const { backdropDismiss, event } = this;\r\n    const target = event.target as Element;\r\n    const rect = target.getBoundingClientRect();\r\n\r\n    this.#dialog.style.setProperty('top', `${rect.bottom}px`);\r\n    this.#dialog.style.setProperty('left', `${rect.left}px`);\r\n    this.#dialog.style.setProperty('width', `${rect.width}px`);\r\n\r\n    backdropDismiss ? this.#dialog.showPopover() : this.#dialog.showModal();\r\n    this.#dialog.focus();\r\n  }\r\n\r\n  render() {\r\n    const { backdropDismiss } = this;\r\n\r\n    return (\r\n      <Host aria-modal=\"true\">\r\n        <dialog popover={backdropDismiss ? '' : null} class=\"popover\" ref={el => (this.#dialog = el)}>\r\n          <div part=\"content\" class=\"popover-content\">\r\n            <slot />\r\n          </div>\r\n        </dialog>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}