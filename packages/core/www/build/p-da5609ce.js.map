{"version":3,"names":["ComponentConfig","constructor","this","config","Map","reset","Components","Object","entries","set","component","get","fallback","apply","ref","tag","defaultValue","uniqueKeys","Set","keys","forEach","key","setProp","prop","value","getProp","componentConfig","Config"],"sources":["src/config/components.config.ts","src/config/config.ts"],"sourcesContent":["import { Configuration } from '@cheese-grinder/stencil-component-config';\r\n\r\ntype Options = Configuration.ComponentsConfig;\r\n\r\nexport class ComponentConfig {\r\n  private config = new Map<keyof Options, any>();\r\n\r\n  reset(Components: Options): void {\r\n    this.config = new Map(Object.entries(Components) as any);\r\n  }\r\n\r\n  set<Tag extends keyof Options>(component: Tag, config: Options[Tag]): void {\r\n    this.config.set(component, config);\r\n  }\r\n\r\n  get<Tag extends keyof Options>(component: Tag, fallback: Options[Tag] = {} as Options[Tag]): Options[Tag] {\r\n    return this.config.get(component) ?? fallback;\r\n  }\r\n\r\n  apply(ref: any, tag: string, defaultValue: Record<string, any>): void;\r\n  apply<Tag extends keyof Options>(ref: any, tag: Tag, defaultValue: Options[Tag] & Record<string, any>): void {\r\n    const component = this.get(tag);\r\n    const uniqueKeys = new Set([...Object.keys(component!), ...Object.keys(defaultValue)]);\r\n\r\n    [...uniqueKeys].forEach(key => (ref[key] ??= component![key] ?? defaultValue[key]));\r\n  }\r\n\r\n  setProp<Tag extends keyof Options, Prop extends keyof Options[Tag]>(\r\n    component: Tag,\r\n    prop: Prop,\r\n    value: Options[Tag][Prop],\r\n  ): void {\r\n    const config = this.get(component);\r\n    this.config.set(component, {\r\n      ...(config as object),\r\n      [prop]: value,\r\n    });\r\n  }\r\n\r\n  getProp<Tag extends keyof Options, Prop extends keyof Options[Tag]>(\r\n    component: Tag,\r\n    prop: Prop,\r\n    fallback?: Options[Tag][Prop],\r\n  ): Options[Tag][Prop] {\r\n    const config = this.get(component);\r\n    return config![prop] ?? (fallback as Options[Tag][Prop]);\r\n  }\r\n}\r\n\r\nexport const componentConfig = new ComponentConfig();\r\n","import { Size } from 'src/interfaces';\r\nimport { Configuration } from '@cheese-grinder/stencil-component-config';\r\n\r\nexport class Config {\r\n  private config = new Map<keyof FrameworkConfig, any>();\r\n\r\n  reset(config: FrameworkConfig): void {\r\n    this.config = new Map(Object.entries(config) as any);\r\n  }\r\n\r\n  set<Conf extends keyof FrameworkConfig>(key: Conf, value: FrameworkConfig[Conf]): void {\r\n    this.config.set(key, value);\r\n  }\r\n\r\n  get<Conf extends keyof FrameworkConfig>(key: Conf, fallback?: FrameworkConfig[Conf]): FrameworkConfig[Conf] {\r\n    return this.config.get(key) ?? fallback;\r\n  }\r\n}\r\n\r\nexport const config = new Config();\r\n\r\nexport interface FrameworkConfig {\r\n  defaultSize?: Size;\r\n}\r\n\r\nexport type PoppyConfigInit = {\r\n  components?: Configuration.ComponentsConfig;\r\n} & FrameworkConfig;\r\n"],"mappings":"MAIaA;EAAb,WAAAC;IACUC,KAAAC,SAAS,IAAIC;;EAErB,KAAAC,CAAMC;IACJJ,KAAKC,SAAS,IAAIC,IAAIG,OAAOC,QAAQF;;EAGvC,GAAAG,CAA+BC,GAAgBP;IAC7CD,KAAKC,OAAOM,IAAIC,GAAWP;;EAG7B,GAAAQ,CAA+BD,GAAgBE,IAAyB;IACtE,OAAOV,KAAKC,OAAOQ,IAAID,MAAcE;;EAIvC,KAAAC,CAAiCC,GAAUC,GAAUC;IACnD,MAAMN,IAAYR,KAAKS,IAAII;IAC3B,MAAME,IAAa,IAAIC,IAAI,KAAIX,OAAOY,KAAKT,OAAgBH,OAAOY,KAAKH;IAEvE,KAAIC,IAAYG,SAAQC,KAAQP,EAAIO,OAASX,EAAWW,MAAQL,EAAaK;;EAG/E,OAAAC,CACEZ,GACAa,GACAC;IAEA,MAAMrB,IAASD,KAAKS,IAAID;IACxBR,KAAKC,OAAOM,IAAIC,GAAW;SACrBP;MACJoB,CAACA,IAAOC;;;EAIZ,OAAAC,CACEf,GACAa,GACAX;IAEA,MAAMT,IAASD,KAAKS,IAAID;IACxB,OAAOP,EAAQoB,MAAUX;;;;MAIhBc,IAAkB,IAAI1B;;MC9CtB2B;EAAb,WAAA1B;IACUC,KAAAC,SAAS,IAAIC;;EAErB,KAAAC,CAAMF;IACJD,KAAKC,SAAS,IAAIC,IAAIG,OAAOC,QAAQL;;EAGvC,GAAAM,CAAwCY,GAAWG;IACjDtB,KAAKC,OAAOM,IAAIY,GAAKG;;EAGvB,GAAAb,CAAwCU,GAAWT;IACjD,OAAOV,KAAKC,OAAOQ,IAAIU,MAAQT;;;;MAItBT,IAAS,IAAIwB","ignoreList":[]}