{"version":3,"names":["buttonCss","PopButtonStyle0","Button","_Button_inheritedAttributes","set","this","_Button_onFocus","popFocus","emit","_Button_onBlur","popBlur","componentWillLoad","componentConfig","apply","disabled","size","config","get","outlined","componentWillRender","__classPrivateFieldSet","inheritAriaAttributes","host","render","h","Host","key","class","hostContext","part","onFocus","__classPrivateFieldGet","onBlur","name"],"sources":["src/components/button/button.scss?tag=pop-button&encapsulation=shadow","src/components/button/button.tsx"],"sourcesContent":["@use \"../../global/styles/radius\";\r\n@use \"../../global/styles/theme\";\r\n@use \"../../global/styles/join-item\";\r\n\r\n/**\r\n * @prop --border-radius: Change border radius\r\n * @prop --border-color: Change border color\r\n *\r\n * @prop --background: Change background color\r\n * @prop --color: Change text color\r\n *\r\n * @prop --animation: Change animation duration\r\n * @prop --focus-scale: Change scale transformation when the button is active\r\n *\r\n */\r\n\r\n@include join-item.item(button);\r\n\r\n// Button\r\n// ----------------------------------------------------------------\r\n\r\n:host {\r\n  --border-radius: #{radius.$md};\r\n  --border-color: transparent;\r\n  --background: oklch(#{theme.get-color(\"base.200\")});\r\n  --color: oklch(#{theme.get-color(\"base.content\")});\r\n\r\n  --animation: 0.25s ease-out;\r\n  --focus-scale: 0.97;\r\n\r\n  width: max-content;\r\n\r\n  button {\r\n    box-sizing: border-box;\r\n\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    flex-wrap: wrap;\r\n    flex-shrink: 0;\r\n\r\n    border: 1px solid var(--border-color);\r\n    border-radius: var(--border-radius);\r\n\r\n    background-color: var(--background);\r\n    color: var(--color);\r\n    outline-color: var(--background);\r\n\r\n    font-weight: 600;\r\n    line-height: 1em;\r\n    text-align: center;\r\n    text-decoration-line: none;\r\n    text-rendering: optimizeLegibility;\r\n\r\n    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\r\n\r\n    animation: button-pop var(--animation);\r\n    transition-duration: 200ms;\r\n    transition-timing-function: ease-out;\r\n    transition-property: color, background-color, border-color, opacity, box-shadow, transform;\r\n\r\n    user-select: none;\r\n\r\n    &:hover {\r\n      cursor: pointer;\r\n    }\r\n\r\n    &:active:hover,\r\n    &:active:focus {\r\n      animation: button-pop 0s ease-out;\r\n      transform: scale(var(--focus-scale));\r\n    }\r\n\r\n    &:focus-visible {\r\n      outline-style: solid;\r\n      outline-width: 2px;\r\n      outline-offset: 2px;\r\n    }\r\n  }\r\n\r\n  @keyframes button-pop {\r\n    0% {\r\n      transform: scale(var(--focus-scale));\r\n    }\r\n    40% {\r\n      transform: scale(1.02);\r\n    }\r\n    100% {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n}\r\n\r\n// Button Size\r\n// ----------------------------------------------------------------\r\n\r\n:host([size=\"xs\"]) button {\r\n  height: 1.5rem;\r\n  min-height: 1.5rem;\r\n  font-size: 0.75rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n}\r\n:host([size=\"sm\"]) button {\r\n  height: 2rem;\r\n  min-height: 2rem;\r\n  font-size: 0.875rem;\r\n  padding-left: 0.75rem;\r\n  padding-right: 0.75rem;\r\n}\r\n:host([size=\"md\"]) button {\r\n  height: 3rem;\r\n  min-height: 3rem;\r\n  font-size: 0.875rem;\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n}\r\n:host([size=\"lg\"]) button {\r\n  height: 4rem;\r\n  min-height: 4rem;\r\n  font-size: 1.125rem;\r\n  padding-left: 1.5rem;\r\n  padding-right: 1.5rem;\r\n}\r\n\r\n// Button Color\r\n// ----------------------------------------------------------------\r\n\r\n@mixin generate-color($colors...) {\r\n  @each $color in $colors {\r\n    $base: theme.get-color(\"#{$color}.base\");\r\n    $text: theme.get-color(\"#{$color}.content\");\r\n\r\n    :host([color=\"#{$color}\"]) {\r\n      --background: oklch(#{$base});\r\n      --color: oklch(#{$text});\r\n\r\n      button:hover {\r\n        --background: color-mix(in oklab, oklch(#{$base}), black 10%);\r\n      }\r\n    }\r\n  }\r\n\r\n  @supports not (color: color-mix(in oklab, black, black)) {\r\n    @each $color in $colors {\r\n      $shade: theme.get-color(\"#{$color}.shade\");\r\n\r\n      :host([color=\"#{$color}\"]) button:hover {\r\n        --background: oklch(#{$shade});\r\n      }\r\n    }\r\n  }\r\n}\r\n@include generate-color(neutral, primary, secondary, accent, info, success, warning, error);\r\n\r\n:host([color=\"ghost\"]:not([outlined])) {\r\n  --background: transparent;\r\n  --color: currentColor;\r\n\r\n  button {\r\n    outline-color: currentColor;\r\n\r\n    &:hover {\r\n      --background: oklch(#{theme.get-color(\"base.content\")} / 0.2);\r\n    }\r\n  }\r\n}\r\n:host(:not([color], [outlined])) {\r\n  --background: oklch(#{theme.get-color(\"base.200\")});\r\n  --color: oklch(#{theme.get-color(\"base.content\")});\r\n\r\n  button {\r\n    outline-color: oklch(#{theme.get-color(\"base.content\")});\r\n\r\n    &:hover {\r\n      --background: oklch(#{theme.get-color(\"base.300\")});\r\n    }\r\n  }\r\n}\r\n\r\n// Button Outlined\r\n// ----------------------------------------------------------------\r\n\r\n:host([outlined]) {\r\n  button {\r\n    box-shadow: none;\r\n\r\n    &:hover {\r\n      border-color: transparent;\r\n    }\r\n\r\n    &:not(:hover) {\r\n      border-color: currentColor;\r\n      color: var(--background);\r\n      background-color: transparent;\r\n    }\r\n  }\r\n}\r\n:host(:not([color])[outlined]) {\r\n  --background: oklch(#{theme.get-color(\"base.content\")});\r\n\r\n  button:hover {\r\n    --background: oklch(#{theme.get-color(\"base.content\")});\r\n    --color: oklch(#{theme.get-color(\"base.200\")});\r\n  }\r\n}\r\n\r\n// Button Expand\r\n// ----------------------------------------------------------------\r\n\r\n:host([expand=\"block\"]) {\r\n  width: 100%;\r\n\r\n  button {\r\n    width: 100%;\r\n  }\r\n}\r\n:host([expand=\"wide\"]) button {\r\n  width: 16rem;\r\n}\r\n\r\n// Button Shape\r\n// ----------------------------------------------------------------\r\n\r\n:host([shape=\"square\"]),\r\n:host([shape=\"circle\"]) {\r\n  button {\r\n    aspect-ratio: 1 / 1;\r\n    padding: 0;\r\n  }\r\n}\r\n:host([shape=\"circle\"]) {\r\n  --border-radius: #{radius.$full};\r\n}\r\n\r\n// Button State\r\n// ----------------------------------------------------------------\r\n\r\n:host([disabled]) {\r\n  cursor: not-allowed;\r\n\r\n  > button:disabled {\r\n    --background: oklch(#{theme.get-color(\"neutral.base\")} / 0.2);\r\n    --color: oklch(#{theme.get-color(\"neutral.content\")} / 0.2);\r\n\r\n    border-color: transparent;\r\n    pointer-events: none;\r\n  }\r\n}\r\n","import { componentConfig, config } from '#config';\r\nimport { Attributes, hostContext, inheritAriaAttributes } from '#utils/helpers';\r\nimport { Component, ComponentInterface, Element, Event, EventEmitter, Host, Prop, h } from '@stencil/core';\r\nimport type { Color, Size } from 'src/interfaces';\r\nimport type { ButtonExpand, ButtonShape, ButtonType } from './button.interface';\r\n\r\n/**\r\n * Buttons allow the user to take actions or make choices.\r\n *\r\n * @slot - Slot for the content of the button\r\n * @slot start-icon - Slot for placing an icon at the start\r\n * @slot end-icon - Slot for placing an icon at the end\r\n *\r\n * @part native - The native HTML button or anchor element that wraps all child elements.\r\n */\r\n@Component({\r\n  tag: 'pop-button',\r\n  styleUrl: 'button.scss',\r\n  shadow: true,\r\n})\r\nexport class Button implements ComponentInterface {\r\n  #inheritedAttributes: Attributes = {};\r\n\r\n  @Element() host!: HTMLElement;\r\n\r\n  /**\r\n   * The type of the button.\r\n   */\r\n  @Prop() type?: ButtonType = 'button';\r\n\r\n  /**\r\n   * The HTML form element id. Used to submit a form when the button is not a child of the form.\r\n   */\r\n  @Prop() form?: string;\r\n\r\n  /**\r\n   * If `true`, the user cannot interact with the element.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) disabled?: boolean;\r\n\r\n  /**\r\n   * The color to use from your application's color palette.\r\n   * Default options are: `\"neutral\"`, `\"ghost\"`, `\"primary\"`, `\"secondary\"`, `\"accent\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `\"error\"`.\r\n   * For more information on colors, see [theming](/docs/theming/basics).\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) color?: Color | 'neutral' | 'ghost';\r\n\r\n  /**\r\n   * Change size of the component\r\n   * Options are: `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`.\r\n   *\r\n   * @config @default 'md'\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) size?: Size;\r\n\r\n  /**\r\n   * Transparent Button with colored border\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) outlined?: boolean;\r\n\r\n  /**\r\n   * `square` set button width and heigth with 1:1 ratio\r\n   * `round` set button width and heigth with 1:1 ratio and rounded corners.\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) shape?: ButtonShape;\r\n\r\n  /**\r\n   * `wide` Add more horizontal padding\r\n   * `block` make a full width button\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) expand?: ButtonExpand;\r\n\r\n  /**\r\n   * Emitted when the button has focus.\r\n   */\r\n  @Event() popFocus!: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted when the button loses focus.\r\n   */\r\n  @Event() popBlur!: EventEmitter<void>;\r\n\r\n  componentWillLoad(): void {\r\n    componentConfig.apply(this, 'pop-button', {\r\n      disabled: false,\r\n      size: config.get('defaultSize', 'md'),\r\n      outlined: false,\r\n    });\r\n  }\r\n\r\n  componentWillRender(): void {\r\n    this.#inheritedAttributes = inheritAriaAttributes(this.host);\r\n  }\r\n\r\n  #onFocus = (): void => {\r\n    this.popFocus.emit();\r\n  };\r\n\r\n  #onBlur = (): void => {\r\n    this.popBlur.emit();\r\n  };\r\n\r\n  render() {\r\n    const { host, disabled } = this;\r\n\r\n    return (\r\n      <Host\r\n        aria-disabled={disabled ? 'true' : null}\r\n        class={{\r\n          'join-item': hostContext(host, 'pop-join'),\r\n        }}\r\n      >\r\n        <button\r\n          part=\"native\"\r\n          disabled={disabled}\r\n          onFocus={this.#onFocus}\r\n          onBlur={this.#onBlur}\r\n          {...this.#inheritedAttributes}\r\n        >\r\n          <slot name=\"start-icon\"></slot>\r\n          <slot></slot>\r\n          <slot name=\"end-icon\"></slot>\r\n        </button>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAAA,MAAMA,IAAY;;AAClB,MAAAC,IAAeD;;;;;;;;;;;;;;;;;MCmBFE,IAAM;;;;;IACjBC,EAAAC,IAAAC,MAAmC;IAmFnCC,EAAAF,IAAAC,OAAW;MACTA,KAAKE,SAASC;AAAM;IAGtBC,EAAAL,IAAAC,OAAU;MACRA,KAAKK,QAAQF;AAAM;gBAjFO;;;;;;;;;EAgE5B,iBAAAG;IACEC,EAAgBC,MAAMR,MAAM,cAAc;MACxCS,UAAU;MACVC,MAAMC,EAAOC,IAAI,eAAe;MAChCC,UAAU;;;EAId,mBAAAC;IACEC,EAAAf,MAAIF,GAAwBkB,EAAsBhB,KAAKiB,OAAK;;EAW9D,MAAAC;IACE,OAAMD,MAAEA,GAAIR,UAAEA,KAAaT;IAE3B,OACEmB,EAACC,GAAI;MAAAC,KAAA;MAAA,iBACYZ,IAAW,SAAS;MACnCa,OAAO;QACL,aAAaC,EAAYN,GAAM;;OAGjCE,EAAA;MAAAE,KAAA;MACEG,MAAK;MACLf,UAAUA;MACVgB,SAASC,EAAA1B,MAAIC,GAAA;MACb0B,QAAQD,EAAA1B,MAAII,GAAA;SACRsB,EAAA1B,MAAIF,GAAA;OAERqB,EAAA;MAAAE,KAAA;MAAMO,MAAK;QACXT,EAAA;MAAAE,KAAA;QACAF,EAAA;MAAAE,KAAA;MAAMO,MAAK","ignoreList":[]}