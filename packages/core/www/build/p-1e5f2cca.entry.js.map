{"version":3,"names":["ClickOutsideOptionsDefaults","triggerEvents","exclude","ClickOutside","opt","proto","methodName","connectedCallback","disconnectedCallback","host","getElement","this","method","registerClickOutside","call","removeClickOutside","component","element","callback","excludedNodes","getExcludedNodes","getTriggerEvents","forEach","triggerEvent","window","addEventListener","e","initClickOutside","removeEventListener","event","target","contains","isExcluded","split","map","trim","Array","from","document","querySelectorAll","err","console","warn","excudedNodes","excludedNode","dropdownCss","PopDropdownStyle0","Dropdown","_Dropdown_dropdown","set","_Dropdown_debounceTimer","_Dropdown_onClick","triggerAction","present","_Dropdown_onHover","clearTimeout","__classPrivateFieldGet","_Dropdown_onBlur","__classPrivateFieldSet","setTimeout","dismiss","debounce","_Dropdown_onContext","ev","preventDefault","componentWillLoad","componentConfig","apply","side","align","open","showBackdrop","componentDidRender","onClickOutside","render","h","Host","key","part","class","onMouseEnter","onMouseLeave","ref","el","onClick","onContextMenu","name","Show","when","__decorate"],"sources":["src/utils/click-outside.ts","src/components/dropdown/dropdown.scss?tag=pop-dropdown&encapsulation=shadow","src/components/dropdown/dropdown.tsx"],"sourcesContent":["// Code from https://github.com/jarrvis/stencil-click-outside\r\n// Since the maintenainer doesnt accept PR or push on this repo\r\n// I copy paste the code in case i need to make an evolution\r\n\r\nimport { Build, ComponentInterface, getElement } from '@stencil/core';\r\n\r\ndeclare type ClickOutsideDecorator = (target: ComponentInterface, propertyKey: string) => void;\r\n\r\ndeclare interface ClickOutsideOptions {\r\n  triggerEvents?: string;\r\n  exclude?: string;\r\n}\r\n\r\nconst ClickOutsideOptionsDefaults: ClickOutsideOptions = {\r\n  triggerEvents: 'click',\r\n  exclude: '',\r\n};\r\n\r\n/**\r\n * Call this function as soon as the click outside of annotated method's host is done.\r\n */\r\nexport function ClickOutside(opt: ClickOutsideOptions = ClickOutsideOptionsDefaults): ClickOutsideDecorator {\r\n  return (proto: ComponentInterface, methodName: string) => {\r\n    // this is to resolve the 'compiler optimization issue':\r\n    // lifecycle events not being called when not explicitly declared in at least one of components from bundle\r\n    (Build as any).connectedCallback = true;\r\n    (Build as any).disconnectedCallback = true;\r\n\r\n    const { connectedCallback, disconnectedCallback } = proto;\r\n\r\n    proto.connectedCallback = function () {\r\n      const host = getElement(this);\r\n      const method = this[methodName];\r\n      registerClickOutside(this, host, method, opt);\r\n      return connectedCallback?.call(this);\r\n    };\r\n\r\n    proto.disconnectedCallback = function () {\r\n      const host = getElement(this);\r\n      const method = this[methodName];\r\n      removeClickOutside(this, host, method, opt);\r\n      return disconnectedCallback?.call(this);\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * Register callback function for HTMLElement to be executed when user clicks outside of element.\r\n */\r\nexport function registerClickOutside(\r\n  component: ComponentInterface,\r\n  element: HTMLElement,\r\n  callback: () => void,\r\n  opt: ClickOutsideOptions = ClickOutsideOptionsDefaults,\r\n): void {\r\n  const excludedNodes = getExcludedNodes(opt);\r\n  getTriggerEvents(opt).forEach(triggerEvent => {\r\n    window.addEventListener(\r\n      triggerEvent,\r\n      (e: Event) => {\r\n        initClickOutside(e, component, element, callback, excludedNodes);\r\n      },\r\n      false,\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Remove click outside callback function for HTMLElement.\r\n */\r\nexport function removeClickOutside(\r\n  component: ComponentInterface,\r\n  element: HTMLElement,\r\n  callback: () => void,\r\n  opt: ClickOutsideOptions = ClickOutsideOptionsDefaults,\r\n): void {\r\n  getTriggerEvents(opt).forEach(triggerEvent => {\r\n    window.removeEventListener(\r\n      triggerEvent,\r\n      (e: Event) => {\r\n        initClickOutside(e, component, element, callback);\r\n      },\r\n      false,\r\n    );\r\n  });\r\n}\r\n\r\nfunction initClickOutside(\r\n  event: Event,\r\n  component: ComponentInterface,\r\n  element: HTMLElement,\r\n  callback: () => void,\r\n  excludedNodes?: Array<HTMLElement>,\r\n) {\r\n  const target = event.target as HTMLElement;\r\n  if (!element.contains(target) && !isExcluded(target, excludedNodes)) {\r\n    callback.call(component);\r\n  }\r\n}\r\n\r\nfunction getTriggerEvents(opt: ClickOutsideOptions): Array<string> {\r\n  if (opt.triggerEvents) {\r\n    return opt.triggerEvents.split(',').map(e => e.trim());\r\n  }\r\n  return ['click'];\r\n}\r\n\r\nfunction getExcludedNodes(opt: ClickOutsideOptions): Array<HTMLElement> {\r\n  if (opt.exclude) {\r\n    try {\r\n      return Array.from(document.querySelectorAll(opt.exclude));\r\n    } catch (err) {\r\n      console.warn(\r\n        `@ClickOutside: Exclude: '${opt.exclude}' will not be evaluated. Check your exclude selector syntax.`,\r\n        err,\r\n      );\r\n    }\r\n  }\r\n  return;\r\n}\r\n\r\nfunction isExcluded(target: HTMLElement, excudedNodes?: Array<HTMLElement>): boolean {\r\n  if (target && excudedNodes) {\r\n    for (let excludedNode of excudedNodes) {\r\n      if (excludedNode.contains(target)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n","@use \"../../global/styles/theme\";\r\n@use \"../../global/styles/shadow\";\r\n@use \"../../global/styles/radius\";\r\n\r\n/**\r\n * @prop --border-radius: Change border radius\r\n * @prop --border-color: Change border color\r\n *\r\n * @prop --background: Change sidebar background\r\n * @prop --color: Change sidebar text color\r\n *\r\n * @prop --shadow: Change box-shadow\r\n */\r\n\r\n// Dropdown\r\n// ----------------------------------------------------------------\r\n\r\n:host {\r\n  --border-radius: #{radius.$md};\r\n  --border-color: oklch(#{theme.get-color(\"base.200\")});\r\n  --background: oklch(#{theme.get-color(\"base.100\")});\r\n  --color: oklch(#{theme.get-color(\"base.content\")});\r\n  --shadow: #{shadow.$md};\r\n\r\n  .dropdown {\r\n    position: relative;\r\n    display: grid;\r\n    width: 100%;\r\n\r\n    &-trigger {\r\n      display: inline-block;\r\n      grid-column-start: 1;\r\n      grid-row-start: 1;\r\n    }\r\n\r\n    &-content {\r\n      position: absolute;\r\n\r\n      min-height: 2rem;\r\n\r\n      border: 1px solid var(--border-color);\r\n      border-radius: var(--border-radius);\r\n\r\n      color: var(--color);\r\n      background-color: var(--background);\r\n\r\n      box-shadow: var(--shadow);\r\n\r\n      animation-name: present;\r\n      animation-duration: 200ms;\r\n    }\r\n  }\r\n}\r\n\r\n// Dropdown Open state\r\n// ----------------------------------------------------------------\r\n\r\n:host(:not([open])) {\r\n  .dropdown-content {\r\n    opacity: 0;\r\n    pointer-events: none;\r\n  }\r\n}\r\n:host([open]) {\r\n  .dropdown-content {\r\n    z-index: 100;\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n// Dropdown Placement\r\n// ----------------------------------------------------------------\r\n\r\n:host([side=\"bottom\"][align=\"end\"]) .dropdown-content {\r\n  inset-inline-end: 0;\r\n}\r\n\r\n:host([side=\"top\"]) .dropdown-content {\r\n  top: auto;\r\n  bottom: 100%;\r\n}\r\n:host([side=\"top\"][align=\"end\"]) .dropdown-content {\r\n  inset-inline-end: 0;\r\n}\r\n\r\n:host([side=\"left\"]) .dropdown-content {\r\n  top: 0;\r\n  bottom: auto;\r\n  inset-inline-end: 100%;\r\n}\r\n:host([side=\"left\"][align=\"end\"]) .dropdown-content {\r\n  top: auto;\r\n  bottom: 0;\r\n}\r\n\r\n:host([side=\"right\"]) .dropdown-content {\r\n  top: 0;\r\n  bottom: auto;\r\n  inset-inline-start: 100%;\r\n}\r\n:host([side=\"right\"][align=\"end\"]) .dropdown-content {\r\n  top: auto;\r\n  bottom: 0;\r\n}\r\n\r\n@keyframes present {\r\n  from {\r\n    opacity: 0.6;\r\n    scale: 0.95;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    scale: 1;\r\n  }\r\n}\r\n","import { componentConfig } from '#config';\r\nimport { ClickOutside } from '#utils/click-outside';\r\nimport { OverlayInterface } from '#utils/overlay';\r\nimport { TriggerAction } from '#utils/trigger';\r\nimport { Component, ComponentInterface, Element, Event, EventEmitter, Host, Method, Prop, h } from '@stencil/core';\r\nimport { Show } from '../Show';\r\n\r\n/**\r\n * Describe whats does the component\r\n *\r\n * @part {name} - // Describe css part\r\n *\r\n * @slot - // Describe slot content\r\n */\r\n@Component({\r\n  tag: 'pop-dropdown',\r\n  styleUrl: 'dropdown.scss',\r\n  shadow: true,\r\n})\r\nexport class Dropdown implements ComponentInterface, OverlayInterface {\r\n  #dropdown: HTMLDetailsElement;\r\n  #debounceTimer: NodeJS.Timeout;\r\n\r\n  @Element() host: HTMLElement & OverlayInterface;\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @config @default 'bottom'\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) side?: 'left' | 'right' | 'top' | 'bottom';\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @config @default 'start'\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) align?: 'start' | 'end';\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) open?: boolean;\r\n\r\n  /**\r\n   * Describes what kind of intertion with the trigger (sloted element) that should cause the dropdown to open.\r\n   * - `\"click\"`: the dropdown will be presented when the trigger is left clicked.\r\n   * - `\"hover\"`: the dropdown will be presented when a pointer hovers over the trigger.\r\n   * - `\"context-menu\"`: the dropdown will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.\r\n   *\r\n   * @config @default 'click'\r\n   */\r\n  @Prop({ mutable: true }) triggerAction: TriggerAction;\r\n\r\n  /**\r\n   * Set the amount of time, in milliseconds after the user no longer hover the trigger or dropdown, will dismiss.\r\n   * Only apply on `triggerAction=hover`\r\n   *\r\n   * @config @default 100\r\n   */\r\n  @Prop({ mutable: true }) debounce?: number = 100;\r\n\r\n  /**\r\n   * If `true`, a backdrop will be displayed behind the modal.\r\n   * This property controls whether or not the backdrop\r\n   * darkens the screen when the modal is presented.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) showBackdrop?: boolean;\r\n\r\n  /**\r\n   * Emitted after the modal has presented.\r\n   */\r\n  @Event() didPresent: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted after the modal has dismissed.\r\n   */\r\n  @Event() didDismiss: EventEmitter<void>;\r\n\r\n  componentWillLoad(): void {\r\n    componentConfig.apply(this, 'pop-dropdown', {\r\n      side: 'bottom',\r\n      align: 'start',\r\n      open: false,\r\n      triggerAction: 'click',\r\n      debounce: 100,\r\n      showBackdrop: false,\r\n    });\r\n  }\r\n\r\n  componentDidRender(): void {\r\n    const { open } = this;\r\n    if (open) {\r\n      this.#dropdown.open = true;\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async present(): Promise<boolean> {\r\n    const { open } = this;\r\n    if (open) return false;\r\n\r\n    this.open = true;\r\n    return true;\r\n  }\r\n\r\n  @Method()\r\n  async dismiss(): Promise<boolean> {\r\n    const { open } = this;\r\n    if (!open) return false;\r\n\r\n    this.open = false;\r\n    return true;\r\n  }\r\n\r\n  @ClickOutside()\r\n  onClickOutside(): void {\r\n    if (!this.open) return;\r\n\r\n    this.dismiss();\r\n  }\r\n\r\n  #onClick = (): void => {\r\n    if (this.triggerAction === 'click') {\r\n      this.present();\r\n    }\r\n  };\r\n\r\n  #onHover = (): void => {\r\n    if (this.triggerAction === 'hover') {\r\n      clearTimeout(this.#debounceTimer);\r\n      this.present();\r\n    }\r\n  };\r\n\r\n  #onBlur = (): void => {\r\n    if (this.triggerAction === 'hover') {\r\n      clearTimeout(this.#debounceTimer);\r\n      this.#debounceTimer = setTimeout(() => {\r\n        this.dismiss();\r\n      }, this.debounce || 500);\r\n    }\r\n  };\r\n\r\n  #onContext = (ev: PointerEvent): void => {\r\n    if (this.triggerAction === 'context-menu') {\r\n      ev.preventDefault();\r\n      this.present();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <details\r\n          part=\"dropdown\"\r\n          class=\"dropdown\"\r\n          onMouseEnter={this.#onHover}\r\n          onMouseLeave={this.#onBlur}\r\n          ref={(el: HTMLDetailsElement) => (this.#dropdown = el)}\r\n        >\r\n          <summary part=\"trigger\" class=\"dropdown-trigger\" onClick={this.#onClick} onContextMenu={this.#onContext}>\r\n            <slot name=\"trigger\" />\r\n          </summary>\r\n          <div part=\"content\" class=\"dropdown-content\">\r\n            <slot />\r\n          </div>\r\n          <Show when={this.showBackdrop}>\r\n            <div part=\"backdrop\" class=\"dropdown-backdrop\" onClick={() => this.dismiss()}></div>\r\n          </Show>\r\n        </details>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}