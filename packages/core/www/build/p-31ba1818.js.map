{"version":3,"names":["TriggerController","constructor","_TriggerController_destroy","set","this","removeListener","__classPrivateFieldGet","call","__classPrivateFieldSet","undefined","addListener","overlay","trigger","action","triggerEl","document","getElementById","console","warn","configureTriggerInteraction","targetEl","overlayEl","openOverlay","ev","preventDefault","present","addEventListener","_TriggerController_instances","_TriggerController_getEvent","removeEventListener","create","triggers","click","hover"],"sources":["src/utils/trigger.ts"],"sourcesContent":["import { OverlayInterface } from './overlay';\r\n\r\nexport type TriggerAction = 'click' | 'hover' | 'context-menu';\r\n\r\nexport class TriggerController {\r\n  #destroy?: () => void;\r\n\r\n  /**\r\n   * Removes the click listener from the trigger element.\r\n   */\r\n  removeListener(): void {\r\n    this.#destroy?.();\r\n    this.#destroy = undefined;\r\n  }\r\n\r\n  /**\r\n   * Adds a click listener to the trigger element.\r\n   * Presents the overlay when the trigger is clicked.\r\n   *\r\n   * @param overlay The overlay element.\r\n   * @param trigger The ID of the element to add a click listener to.\r\n   */\r\n  addListener(overlay: OverlayInterface, trigger: string, action: TriggerAction = 'click'): void {\r\n    this.removeListener();\r\n\r\n    const triggerEl = trigger !== undefined ? document.getElementById(trigger) : null;\r\n    if (!triggerEl) {\r\n      console.warn(\r\n        `[Poppy Warning]: A trigger element with the ID \"${trigger}\" was not found in the DOM. The trigger element must be in the DOM when the \"trigger\" property is set on an overlay component.`,\r\n        overlay,\r\n      );\r\n      return;\r\n    }\r\n\r\n    const configureTriggerInteraction = (targetEl: HTMLElement, overlayEl: OverlayInterface) => {\r\n      const openOverlay = (ev: Event): void => {\r\n        ev.preventDefault();\r\n        overlayEl.present();\r\n      };\r\n      targetEl.addEventListener(this.#getEvent(action), openOverlay);\r\n\r\n      return () => {\r\n        targetEl.removeEventListener(this.#getEvent(action), openOverlay);\r\n      };\r\n    };\r\n\r\n    this.#destroy = configureTriggerInteraction(triggerEl, overlay);\r\n  }\r\n\r\n  #getEvent(action: TriggerAction) {\r\n    const triggers: Record<TriggerAction, keyof HTMLElementEventMap> = {\r\n      click: 'click',\r\n      hover: 'mouseenter',\r\n      'context-menu': 'contextmenu',\r\n    };\r\n    return triggers[action];\r\n  }\r\n\r\n  static create() {\r\n    return new TriggerController();\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;MAIaA;EAAb,WAAAC;;IACEC,EAAAC,IAAAC,WAAA;;;;SAKA,cAAAC;IACEC,EAAAF,MAAIF,GAAA,MAAWK,KAAfH;IACAI,EAAAJ,MAAIF,GAAYO,WAAS;;;;;;;;SAU3B,WAAAC,CAAYC,GAA2BC,GAAiBC,IAAwB;IAC9ET,KAAKC;IAEL,MAAMS,IAAYF,MAAYH,YAAYM,SAASC,eAAeJ,KAAW;IAC7E,KAAKE,GAAW;MACdG,QAAQC,KACN,mDAAmDN,mIACnDD;MAEF;;IAGF,MAAMQ,8BAA8B,CAACC,GAAuBC;MAC1D,MAAMC,cAAeC;QACnBA,EAAGC;QACHH,EAAUI;AAAS;MAErBL,EAASM,iBAAiBpB,EAAAF,MAAIuB,GAAA,KAAAC,GAAUrB,KAAdH,MAAeS,IAASS;MAElD,OAAO;QACLF,EAASS,oBAAoBvB,EAAAF,MAAIuB,GAAA,KAAAC,GAAUrB,KAAdH,MAAeS,IAASS;AAAY;AAClE;IAGHd,EAAAJ,MAAIF,GAAYiB,4BAA4BL,GAAWH,IAAQ;;EAYjE,aAAOmB;IACL,OAAO,IAAI9B;;;;2EAVHa;EACR,MAAMkB,IAA6D;IACjEC,OAAO;IACPC,OAAO;IACP,gBAAgB;;EAElB,OAAOF,EAASlB;AAClB","ignoreList":[]}