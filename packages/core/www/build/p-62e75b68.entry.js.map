{"version":3,"names":["APP_PREFIX","APP_TAG","raf","h","__zone_symbol__requestAnimationFrame","requestAnimationFrame","setTimeout","componentOnReady","el","callback","then","resolvedEl","getAppRoot","doc","querySelector","body","OverlayController","constructor","tag","_OverlayController_tag","set","this","__classPrivateFieldSet","create","options","__classPrivateFieldGet","_OverlayController_instances","_OverlayController_create","call","dismiss","data","role","id","_OverlayController_dismiss","document","getTop","_OverlayController_getPresented","overlay","classList","contains","_OverlayController_getOverlays","selector","undefined","Array","from","querySelectorAll","_OverlayController_getAllPresented","overlayTag","filter","o","_OverlayController_isHidden","open","overlays","at","find","async","window","customElements","whenDefined","element","createElement","add","Object","assign","hasController","root","appendChild","Promise","resolve","reject","popoverController","selectCss","PopSelectStyle0","Select","_Select_inputId","selectIds","_Select_inheritedAttributes","_Select_popover","_Select_trigger","_Select_onFocus","popFocus","emit","_Select_onBlur","popBlur","_Select_onClick","ev","target","onValueChange","value","errorText","_Select_instances","_Select_errorText_get","internals","setFormValue","popChange","formResetCallback","formStateRestoreCallback","state","componentWillLoad","inheritAttributes","host","componentConfig","apply","multiple","required","disabled","bordered","size","config","get","setFocus","focus","event","isExpanded","selectedValue","popover","component","componentProps","_Select_values_get","color","_Select_options_get","map","option","getOptionValue","clazz","cls","text","textContent","checked","isOptionSelected","compare","cssClass","OPTION_CLASS","handler","close","dismissOnSelect","animated","backdropDismiss","showBackdrop","keyboardClose","reference","alignment","addEventListener","popDismiss","present","indexOfSelected","indexOf","firstEnabledOption","closest","selectedItem","interactiveEl","render","helperText","inputId","hasError","hasHelper","hasBottomText","Host","key","class","hostContext","htmlFor","part","name","_Select_renderSelectText","_Select_renderListbox","ChevronDown","Show","when","isArray","_Select_text_get","selectedText","values","length","selected","optionValue","compareOptions","Boolean","join","_Select_ariaLabel_get","placeholder","displayValue","definedLabel","renderedLabel","min","notEnoughErrorText","max","tooManyErrorText","addPlaceholderClass","selectText","textPart","onClick","onFocus","onBlur","ref","selectOptionCss","PopSelectOptionStyle0","SelectOption","_SelectOption_inputId","selectOptionIds","selectPopoverCss","PopSelectPopoverStyle0","SelectPopover","_SelectPopover_instances","_SelectPopover_renderOptions","_SelectPopover_getValues","_SelectPopover_findOptionFromEvent","_SelectPopover_setChecked","detail","_SelectPopover_renderRadioOptions","allowEmpty","onPopChange","fromEntries","_SelectPopover_renderCheckboxOptions","Fragment"],"sources":["src/framework.constant.ts","src/utils/helpers.ts","src/utils/overlay.ts","src/components/select/select.scss?tag=pop-select&encapsulation=shadow","src/components/select/select.tsx","src/components/select-option/select-option.scss?tag=pop-select-option","src/components/select-option/select-option.tsx","src/components/select-popover/select-popover.scss?tag=pop-select-popover","src/components/select-popover/select-popover.tsx"],"sourcesContent":["export const APP_PREFIX = 'pop';\r\n\r\nexport const APP_TAG = `${APP_PREFIX}-app`;\r\n","import { JSX } from '@stencil/core';\r\nimport { JSXBase } from '@stencil/core/internal';\r\nimport { APP_TAG } from 'src/framework.constant';\r\n\r\nexport type Attributes = { [key: string]: any };\r\n\r\n/**\r\n * Elements inside of web components sometimes need to inherit global attributes\r\n * set on the host. For example, the inner input in `pop-input` should inherit\r\n * the `title` attribute that developers set directly on `pop-input`. This\r\n * helper function should be called in componentWillLoad and assigned to a variable\r\n * that is later used in the render function.\r\n *\r\n * This does not need to be reactive as changing attributes on the host element\r\n * does not trigger a re-render.\r\n */\r\nexport const inheritAttributes = (el: HTMLElement, attributes: string[] = []) => {\r\n  const attributeObject: Attributes = {};\r\n\r\n  attributes.forEach(attr => {\r\n    if (el.hasAttribute(attr)) {\r\n      const value = el.getAttribute(attr);\r\n      if (value !== null) {\r\n        attributeObject[attr] = el.getAttribute(attr);\r\n      }\r\n      el.removeAttribute(attr);\r\n    }\r\n  });\r\n\r\n  return attributeObject;\r\n};\r\n\r\n/**\r\n * List of available ARIA attributes + `role`.\r\n * Removed deprecated attributes.\r\n * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\r\n */\r\nconst ariaAttributes = [\r\n  'role',\r\n  'aria-activedescendant',\r\n  'aria-atomic',\r\n  'aria-autocomplete',\r\n  'aria-braillelabel',\r\n  'aria-brailleroledescription',\r\n  'aria-busy',\r\n  'aria-checked',\r\n  'aria-colcount',\r\n  'aria-colindex',\r\n  'aria-colindextext',\r\n  'aria-colspan',\r\n  'aria-controls',\r\n  'aria-current',\r\n  'aria-describedby',\r\n  'aria-description',\r\n  'aria-details',\r\n  'aria-disabled',\r\n  'aria-errormessage',\r\n  'aria-expanded',\r\n  'aria-flowto',\r\n  'aria-haspopup',\r\n  'aria-hidden',\r\n  'aria-invalid',\r\n  'aria-keyshortcuts',\r\n  'aria-label',\r\n  'aria-labelledby',\r\n  'aria-level',\r\n  'aria-live',\r\n  'aria-multiline',\r\n  'aria-multiselectable',\r\n  'aria-orientation',\r\n  'aria-owns',\r\n  'aria-placeholder',\r\n  'aria-posinset',\r\n  'aria-pressed',\r\n  'aria-readonly',\r\n  'aria-relevant',\r\n  'aria-required',\r\n  'aria-roledescription',\r\n  'aria-rowcount',\r\n  'aria-rowindex',\r\n  'aria-rowindextext',\r\n  'aria-rowspan',\r\n  'aria-selected',\r\n  'aria-setsize',\r\n  'aria-sort',\r\n  'aria-valuemax',\r\n  'aria-valuemin',\r\n  'aria-valuenow',\r\n  'aria-valuetext',\r\n];\r\n\r\n/**\r\n * Returns an array of aria attributes that should be copied from\r\n * the shadow host element to a target within the light DOM.\r\n * @param el The element that the attributes should be copied from.\r\n * @param ignoreList The list of aria-attributes to ignore reflecting and removing from the host.\r\n * Use this in instances where we manually specify aria attributes on the `<Host>` element.\r\n */\r\nexport const inheritAriaAttributes = (el: HTMLElement, ignoreList?: string[]) => {\r\n  let attributesToInherit = ariaAttributes;\r\n  if (ignoreList && ignoreList.length > 0) {\r\n    attributesToInherit = attributesToInherit.filter(attr => !ignoreList.includes(attr));\r\n  }\r\n  return inheritAttributes(el, attributesToInherit);\r\n};\r\n\r\ndeclare const __zone_symbol__requestAnimationFrame: typeof window.requestAnimationFrame;\r\n\r\n/**\r\n * Patched version of requestAnimationFrame that avoids ngzone\r\n * Use only when you know ngzone should not run\r\n */\r\nexport const raf = (h: FrameRequestCallback) => {\r\n  if (typeof __zone_symbol__requestAnimationFrame === 'function') {\r\n    return __zone_symbol__requestAnimationFrame(h);\r\n  }\r\n  if (typeof requestAnimationFrame === 'function') {\r\n    return requestAnimationFrame(h);\r\n  }\r\n  return setTimeout(h);\r\n};\r\n\r\n/**\r\n * Waits for a component to be ready for\r\n * both custom element and non-custom element builds.\r\n * If non-custom element build, el.componentOnReady\r\n * will be used.\r\n * For custom element builds, we wait a frame\r\n * so that the inner contents of the component\r\n * have a chance to render.\r\n *\r\n * Use this utility rather than calling\r\n * el.componentOnReady yourself.\r\n */\r\nexport const componentOnReady = (el: any, callback: any) => {\r\n  if (el.componentOnReady) {\r\n    // eslint-disable-next-line custom-rules/no-component-on-ready-method\r\n    el.componentOnReady().then((resolvedEl: any) => callback(resolvedEl));\r\n  } else {\r\n    raf(() => callback(el));\r\n  }\r\n};\r\n\r\nexport const getAppRoot = (doc: Document) => {\r\n  return doc.querySelector(APP_TAG) || doc.body;\r\n};\r\n\r\ntype PopElements = JSX.IntrinsicElements;\r\ntype ComponentTags = keyof PopElements;\r\n\r\nexport const hostContext = (host: Element, parent: ComponentTags): boolean => {\r\n  return !!host.closest(parent);\r\n};\r\n\r\nexport const getHostContextProperty = <\r\n  Tag extends keyof PopElements,\r\n  Prop extends keyof Omit<PopElements[Tag], keyof Omit<JSXBase.HTMLAttributes, 'color'>>,\r\n  Type extends PopElements[Tag][Prop],\r\n>(\r\n  host: Element,\r\n  parent: Tag,\r\n  prop: Prop,\r\n  placeholder: Type,\r\n): null | PopElements[Tag][Prop] => {\r\n  const hostContext = host.closest(parent);\r\n  if (!hostContext) {\r\n    return null;\r\n  }\r\n  return hostContext[prop as string] ?? placeholder;\r\n};\r\n","import { ModalOptions } from 'src/components/modal/modal.interface';\r\nimport { PopoverOptions } from 'src/components/popover/popover.interface';\r\nimport { componentOnReady, getAppRoot } from './helpers';\r\n\r\nexport interface OverlayInterface {\r\n  open?: boolean;\r\n\r\n  present(): Promise<boolean>;\r\n  dismiss(data: any, role: string): Promise<boolean>;\r\n}\r\n\r\nexport class OverlayController<O extends object, Elem extends Element> {\r\n  #tag: string;\r\n\r\n  private constructor(tag: string) {\r\n    this.#tag = tag;\r\n  }\r\n\r\n  #isHidden(overlay: Element): boolean {\r\n    return overlay.classList.contains('overlay-hidden');\r\n  }\r\n\r\n  #getOverlays(doc: Document, selector: string): OverlayInterface[] {\r\n    if (selector === undefined) {\r\n      selector = 'pop-popover, pop-modal';\r\n    }\r\n    return Array.from(doc.querySelectorAll(selector)) as any as OverlayInterface[];\r\n  }\r\n\r\n  #getAllPresented(doc: Document, overlayTag: string): OverlayInterface[] {\r\n    return this.#getOverlays(doc, overlayTag)\r\n      .filter(o => !this.#isHidden(o as any))\r\n      .filter(o => o.open);\r\n  }\r\n\r\n  #getPresented(doc: Document, overlayTag: string, id?: string): OverlayInterface | undefined {\r\n    const overlays = this.#getAllPresented(doc, overlayTag);\r\n\r\n    return id === undefined ? overlays.at(-1) : overlays.find((o: any) => o.id === id);\r\n  }\r\n\r\n  async #create<T extends OverlayInterface>(tag: string, options: object | undefined): Promise<T> {\r\n    return (\r\n      window?.customElements?.whenDefined(tag).then(() => {\r\n        const element = document.createElement(tag) as any as OverlayInterface & Element;\r\n        element.classList.add('overlay-hidden');\r\n\r\n        /**\r\n         * Convert the passed in overlay options into props\r\n         * that get passed down into the new overlay.\r\n         */\r\n        Object.assign(element, { ...options, hasController: true });\r\n\r\n        // append the overlay element to the document body\r\n        // in case we have a modal open, we append the popover in it to avoid stacking top layer probleme\r\n        // modal can be over an another modal, but popover cant, so we do a little trick here\r\n        const root = document.querySelector('pop-modal[open]') ?? getAppRoot(document);\r\n        root.appendChild(element);\r\n\r\n        return new Promise(resolve => componentOnReady(element, resolve));\r\n      }) ?? (Promise.resolve() as any)\r\n    );\r\n  }\r\n\r\n  async #dismiss(\r\n    doc: Document,\r\n    data: any,\r\n    role: string | undefined,\r\n    overlayTag: string,\r\n    id?: string,\r\n  ): Promise<boolean> {\r\n    const overlay = this.#getPresented(doc, overlayTag, id);\r\n    if (!overlay) {\r\n      return Promise.reject('overlay does not exist');\r\n    }\r\n    return overlay.dismiss(data, role);\r\n  }\r\n\r\n  create(options: O): Promise<Elem> {\r\n    return this.#create(this.#tag, options) as any;\r\n  }\r\n\r\n  dismiss(data?: any, role?: string, id?: string): Promise<boolean> {\r\n    return this.#dismiss(document, data, role, this.#tag, id);\r\n  }\r\n\r\n  getTop(doc?: Document): OverlayInterface | undefined {\r\n    return this.#getPresented(doc, this.#tag);\r\n  }\r\n\r\n  static create<O extends object, Elem extends Element>(tag: string): OverlayController<O, Elem> {\r\n    return new OverlayController<O, Elem>(tag);\r\n  }\r\n}\r\n\r\nexport const popoverController = OverlayController.create<PopoverOptions, HTMLPopPopoverElement>('pop-popover');\r\nexport const modalController = OverlayController.create<ModalOptions, HTMLPopModalElement>('pop-modal');\r\n","@use \"../../global/styles/theme\";\r\n@use \"../../global/styles/shadow\";\r\n@use \"../../global/styles/radius\";\r\n@use \"../../global/styles/input\";\r\n@use \"../../global/styles/join-item\";\r\n\r\n/**\r\n * @prop --border-radius: Border radius\r\n * @prop --border-color: Border color & outline color\r\n *\r\n * @prop --background: Background color\r\n * @prop --opacity: Change background opacity\r\n *\r\n * @prop --color: Change text color\r\n * @prop --error-color: Change error text color\r\n */\r\n\r\n$minWidth: 12rem;\r\n\r\n// @include join-item.item(\".select-wrapper\");\r\n@include join-item.item(\".select-wrapper button\");\r\n\r\n:host {\r\n  @include input.label;\r\n  @include input.helper;\r\n\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  min-width: $minWidth;\r\n\r\n  .select-wrapper {\r\n    position: relative;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    overflow: hidden;\r\n    // border-radius: var(--border-radius, #{radius.$md});\r\n    background-color: var(--background, oklch(#{theme.get-color(\"base.100\")} / var(--opacity, 1)));\r\n\r\n    &:has(button:focus-visible) {\r\n      outline-style: solid;\r\n      outline-width: 2px;\r\n      outline-offset: 2px;\r\n      outline-color: var(--border-color, oklch(#{theme.get-color(\"base.content\")} / 0.2));\r\n    }\r\n  }\r\n\r\n  .select-placeholder {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  .text-wrapper {\r\n    transition: opacity 150ms ease 0ms;\r\n  }\r\n\r\n  button {\r\n    position: absolute;\r\n    inset: 0;\r\n    z-index: 1;\r\n\r\n    width: 100%;\r\n\r\n    border-style: solid;\r\n    border-width: 1px;\r\n    border-radius: var(--border-radius, #{radius.$md});\r\n    border-color: var(--border-color, transparent);\r\n\r\n    background-color: transparent;\r\n    color: var(--color, oklch(#{theme.get-color(\"base.content\")}));\r\n\r\n    user-select: none;\r\n    outline: none;\r\n  }\r\n\r\n  svg {\r\n    margin-inline-start: auto;\r\n    transition: transform 150ms ease 0ms;\r\n  }\r\n}\r\n\r\n:host(.select-expanded) {\r\n  .select-wrapper {\r\n    box-shadow: shadow.$md;\r\n\r\n    svg {\r\n      transform: rotateX(180deg);\r\n    }\r\n  }\r\n}\r\n\r\n:host([bordered]) {\r\n  --border-color: oklch(#{theme.get-color(\"base.content\")} / 0.2);\r\n}\r\n\r\n// Color\r\n@mixin generate-color($colors...) {\r\n  @each $color in $colors {\r\n    $base: theme.get-color(\"#{$color}.base\");\r\n\r\n    :host([color=\"#{$color}\"]) {\r\n      --border-color: oklch(#{$base});\r\n    }\r\n  }\r\n}\r\n@include generate-color(primary, secondary, accent, info, success, warning, error);\r\n\r\n:host([color=\"ghost\"]) {\r\n  --opacity: 0.05;\r\n\r\n  .select-wrapper:has(button:focus-visible) {\r\n    --opacity: 1;\r\n  }\r\n}\r\n\r\n:host(.select-expanded[color=\"ghost\"]) {\r\n  .select-wrapper {\r\n    --opacity: 1;\r\n  }\r\n}\r\n\r\n// Size\r\n:host([size=\"xs\"]) .select-wrapper {\r\n  padding-inline-start: 0.65rem;\r\n  padding-inline-end: 0.5rem;\r\n  height: 1.5rem;\r\n  font-size: 0.75rem;\r\n  line-height: 1.625;\r\n}\r\n:host([size=\"sm\"]) .select-wrapper {\r\n  padding-inline-start: 0.75rem;\r\n  padding-inline-end: 0.85rem;\r\n  height: 2rem;\r\n  font-size: 0.875rem;\r\n  line-height: 2rem;\r\n}\r\n:host([size=\"md\"]),\r\n:host(:not([size])) {\r\n  .select-wrapper {\r\n    padding-inline-start: 1rem;\r\n    padding-inline-end: 1.15rem;\r\n    height: 3rem;\r\n    font-size: 0.875rem;\r\n    line-height: 2;\r\n  }\r\n}\r\n:host([size=\"lg\"]) .select-wrapper {\r\n  padding-inline-start: 1.15rem;\r\n  padding-inline-end: 1.35rem;\r\n  height: 4rem;\r\n  font-size: 1.125rem;\r\n  line-height: 2;\r\n}\r\n\r\n:host([disabled]) button {\r\n  $base: theme.get-color(\"base.200\");\r\n  $text: theme.get-color(\"base.content\");\r\n\r\n  --background: oklch(#{$base});\r\n  --border-color: oklch(#{$base});\r\n  --color: oklch(#{$text} / 0.2);\r\n\r\n  cursor: not-allowed;\r\n\r\n  &::placeholder {\r\n    color: oklch(#{$text} / 0.2);\r\n  }\r\n}\r\n","import { componentConfig, config } from '#config';\r\nimport { compareOptions, isOptionSelected } from '#utils/forms';\r\nimport { Attributes, hostContext, inheritAttributes } from '#utils/helpers';\r\nimport { popoverController } from '#utils/overlay';\r\nimport {\r\n  AttachInternals,\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  h,\r\n} from '@stencil/core';\r\nimport type { Color, FormAssociatedInterface, Size } from 'src/interfaces';\r\nimport { ChevronDown } from '../ChevronDown';\r\nimport { Show } from '../Show';\r\nimport { SelectPopoverOption } from '../select-popover/select-popover-interface';\r\nimport type { SelectCompareFn } from './select.interface';\r\n\r\n@Component({\r\n  tag: 'pop-select',\r\n  styleUrl: 'select.scss',\r\n  shadow: true,\r\n  formAssociated: true,\r\n})\r\nexport class Select implements ComponentInterface, FormAssociatedInterface {\r\n  #inputId = `pop-select-${selectIds++}`;\r\n  #inheritedAttributes: Attributes;\r\n\r\n  #popover: HTMLPopPopoverElement;\r\n  #trigger: HTMLButtonElement;\r\n\r\n  @Element() host!: HTMLElement;\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  @State() isExpanded: boolean = false;\r\n\r\n  @State() errorText: string;\r\n\r\n  /**\r\n   * The name of the control, which is submitted with the form data.\r\n   */\r\n  @Prop() name: string = this.#inputId;\r\n\r\n  /**\r\n   * Instructional text that shows before the input has a value.\r\n   *\r\n   * This property replace the `<option disabled selected>`\r\n   */\r\n  @Prop() placeholder?: string;\r\n\r\n  /**\r\n   * The value of a select is analogous to the value of a `<select>`,\r\n   * it's only used when the toggle participates in a native `<form>`.\r\n   */\r\n  @Prop({ mutable: true }) value?: any | null;\r\n  @Watch('value')\r\n  onValueChange(value: any) {\r\n    this.errorText = this.#errorText;\r\n    if (this.errorText) {\r\n      // No emit if the select has error.\r\n      return;\r\n    }\r\n\r\n    this.internals.setFormValue(value, value);\r\n    this.popChange.emit({ value });\r\n  }\r\n\r\n  /**\r\n   * If `true`, the user can enter more than one value.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) multiple?: boolean = false;\r\n\r\n  /**\r\n   * Only apply when `multiple` property is used.\r\n   * The minimum amount of values that can be selected, which must not be greater than its maximum (max attribute) value.\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) min?: number;\r\n\r\n  /**\r\n   * Only apply when `multiple` property is used.\r\n   * The maximum amount of values that can be selected, which must not be less than its minimum (min attribute) value.\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) max?: number;\r\n\r\n  /**\r\n   * If `true`, the user must fill in a value before submitting a form.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) required?: boolean;\r\n\r\n  /**\r\n   * If `true`, the user cannot interact with the element.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) disabled?: boolean;\r\n\r\n  /**\r\n   * If `true`, the element will be focused on page load.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) autoFocus?: boolean = false;\r\n\r\n  /**\r\n   * if `true`, adds border to textarea when `color` property is not set.\r\n   *\r\n   * @config @default false\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) bordered?: boolean;\r\n\r\n  /**\r\n   * The color to use from your application's color palette.\r\n   * Default options are: `\"primary\"`, `\"secondary\"`, `\"accent\"`, `\"ghost\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `\"error\"`.\r\n   * For more information on colors, see [theming](/docs/theming/basics).\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) color?: Color | 'ghost';\r\n\r\n  /**\r\n   * Change size of the component\r\n   * Options are: `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`.\r\n   *\r\n   * @config @default 'md'\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) size?: Size;\r\n\r\n  /**\r\n   * The text to display instead of the selected option's value.\r\n   */\r\n  @Prop() selectedText?: string;\r\n\r\n  /**\r\n   * Text that is placed under the textarea and displayed when no error is detected.\r\n   */\r\n  @Prop() helperText?: string;\r\n\r\n  /**\r\n   * Only apply when `multiple` property is used.\r\n   * Text that is placed under the select and displayed when the amount of selected option is below of the `min` property.\r\n   */\r\n  @Prop() notEnoughErrorText?: string;\r\n\r\n  /**\r\n   * Only apply when `multiple` property is used.\r\n   * Text that is placed under the select and displayed when the amount of selected option is greater of the `max` property.\r\n   */\r\n  @Prop() tooManyErrorText?: string;\r\n\r\n  /**\r\n   * This property allows developers to specify a custom function\r\n   * for comparing objects when determining the selected option in the\r\n   * ion-radio-group. When not specified, the default behavior will use strict\r\n   * equality (===) for comparison.\r\n   *\r\n   * @config\r\n   */\r\n  @Prop({ mutable: true }) compare?: SelectCompareFn | string | null;\r\n\r\n  /**\r\n   * Emitted when the overlay is dismissed.\r\n   */\r\n  @Event() popDismiss: EventEmitter<void>;\r\n\r\n  /**\r\n   * The `popChange` event is fired when the user modifies the select's value.\r\n   * Unlike the ionInput event, the `popChange` event is fired when the element loses focus after its value has been modified.\r\n   */\r\n  @Event() popChange: EventEmitter<SelectChangeEventDetail>;\r\n\r\n  /**\r\n   * Emitted when the input has focus.\r\n   */\r\n  @Event() popFocus: EventEmitter<void>;\r\n\r\n  /**\r\n   * Emitted when the input loses focus.\r\n   */\r\n  @Event() popBlur: EventEmitter<void>;\r\n\r\n  formResetCallback(): void {\r\n    this.value = null;\r\n  }\r\n\r\n  formStateRestoreCallback(state: any) {\r\n    this.value = state;\r\n  }\r\n\r\n  componentWillLoad(): void {\r\n    this.#inheritedAttributes = inheritAttributes(this.host, ['aria-label']);\r\n\r\n    componentConfig.apply(this, 'pop-select', {\r\n      multiple: false,\r\n      required: false,\r\n      disabled: false,\r\n      bordered: false,\r\n      size: config.get('defaultSize', 'md'),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the native `select` in `pop-select`. Use this method instead of the global\r\n   * `select.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus(): Promise<void> {\r\n    this.#trigger.focus();\r\n  }\r\n\r\n  @Method()\r\n  async open(event?: any) {\r\n    if (this.disabled || this.isExpanded || this.#popover) return;\r\n\r\n    this.isExpanded = true;\r\n    const selectedValue = this.value;\r\n\r\n    const popover = await popoverController.create({\r\n      component: 'pop-select-popover',\r\n      componentProps: {\r\n        value: this.#values,\r\n        required: this.required,\r\n        multiple: this.multiple,\r\n        color: this.color,\r\n        size: this.size,\r\n        options: this.#options.map(option => {\r\n          const value = getOptionValue(option);\r\n          const clazz = Array.from(option.classList).filter(cls => cls !== 'hydrated');\r\n\r\n          return {\r\n            text: option.textContent || '',\r\n            value: value,\r\n            checked: isOptionSelected(selectedValue, value, this.compare),\r\n            disabled: option.disabled,\r\n            color: option.color,\r\n            size: option.size,\r\n            cssClass: [OPTION_CLASS, ...clazz],\r\n            handler: value => {\r\n              this.value = value;\r\n              if (!this.multiple) {\r\n                this.close();\r\n              }\r\n            },\r\n          } as SelectPopoverOption;\r\n        }),\r\n      },\r\n      size: this.size,\r\n      dismissOnSelect: !this.multiple,\r\n      animated: true,\r\n      backdropDismiss: true,\r\n      showBackdrop: false,\r\n      keyboardClose: true,\r\n      reference: event ? 'event' : 'trigger',\r\n      alignment: 'center',\r\n      event: event,\r\n    });\r\n    this.#popover = popover;\r\n\r\n    popover.addEventListener('didDismiss', () => {\r\n      this.#popover = undefined;\r\n      this.isExpanded = false;\r\n      this.popDismiss.emit();\r\n      this.setFocus();\r\n    });\r\n\r\n    await popover.present();\r\n\r\n    const indexOfSelected = this.#options.map(o => o.value).indexOf(this.value);\r\n    if (indexOfSelected === -1) {\r\n      /**\r\n       * If no value is set then focus the first enabled option.\r\n       */\r\n      const firstEnabledOption = popover.querySelector<HTMLElement>(\r\n        'pop-radio:not([disabled]), pop-checkbox:not([disabled])',\r\n      );\r\n      if (firstEnabledOption) {\r\n        firstEnabledOption.closest('pop-item')?.focus();\r\n\r\n        /**\r\n         * Focus the option for the same reason as we do above.\r\n         */\r\n        firstEnabledOption.focus();\r\n      }\r\n    } else {\r\n      const selectedItem = popover.querySelector<HTMLElement>(\r\n        `.select-interface-option:nth-child(${indexOfSelected + 1})`,\r\n      );\r\n      if (selectedItem) {\r\n        selectedItem.focus();\r\n\r\n        const interactiveEl = selectedItem.querySelector<HTMLElement>('pop-radio, pop-checkbox');\r\n        if (interactiveEl) {\r\n          interactiveEl.focus();\r\n        }\r\n      }\r\n    }\r\n\r\n    return popover;\r\n  }\r\n\r\n  @Method()\r\n  async close(): Promise<void> {\r\n    if (this.disabled || !this.isExpanded) return;\r\n\r\n    this.isExpanded = false;\r\n    this.#popover.dismiss();\r\n  }\r\n\r\n  #onFocus = () => {\r\n    this.popFocus.emit();\r\n  };\r\n\r\n  #onBlur = () => {\r\n    this.popBlur.emit();\r\n  };\r\n\r\n  #onClick = async (ev: PointerEvent) => {\r\n    await this.open({\r\n      ...ev,\r\n      target: this.#trigger,\r\n    });\r\n  };\r\n\r\n  get #values(): any[] {\r\n    const { value } = this;\r\n    if (!value) return [];\r\n\r\n    return Array.isArray(value) ? value : [value];\r\n  }\r\n\r\n  get #options() {\r\n    return Array.from(this.host.querySelectorAll('pop-select-option'));\r\n  }\r\n\r\n  get #text(): string {\r\n    const selectedText = this.selectedText;\r\n    if (selectedText) {\r\n      return selectedText;\r\n    }\r\n\r\n    const values = this.#values;\r\n\r\n    if (values.length === 0) {\r\n      return '';\r\n    }\r\n    return values\r\n      .map(value => {\r\n        const selected = this.#options.find(option => {\r\n          const optionValue = option.value ?? (option.textContent || '');\r\n          return compareOptions(value, optionValue, this.compare);\r\n        });\r\n        return selected ? selected.textContent : null;\r\n      })\r\n      .filter(Boolean)\r\n      .join(', ');\r\n  }\r\n\r\n  get #ariaLabel(): string {\r\n    const { placeholder } = this;\r\n    const displayValue = this.#text;\r\n    const definedLabel = this.#inheritedAttributes['aria-label'];\r\n\r\n    /**\r\n     * If developer has specified a placeholder\r\n     * and there is nothing selected, the selectText\r\n     * should have the placeholder value.\r\n     */\r\n    let renderedLabel = displayValue;\r\n    if (renderedLabel === '' && placeholder !== undefined) {\r\n      renderedLabel = placeholder;\r\n    }\r\n\r\n    /**\r\n     * If there is a developer-defined label,\r\n     * then we need to concatenate the developer label\r\n     * string with the current current value.\r\n     * The label for the control should be read\r\n     * before the values of the control.\r\n     */\r\n    if (definedLabel !== undefined) {\r\n      renderedLabel = renderedLabel === '' ? definedLabel : `${definedLabel}, ${renderedLabel}`;\r\n    }\r\n\r\n    return renderedLabel;\r\n  }\r\n\r\n  get #errorText(): string {\r\n    if (!this.multiple) return '';\r\n\r\n    const { length } = this.#values;\r\n    if (length === 0 && !this.required) return '';\r\n    if (length < this.min) return this.notEnoughErrorText ?? '';\r\n    if (length > this.max) return this.tooManyErrorText ?? '';\r\n    return '';\r\n  }\r\n\r\n  #renderSelectText() {\r\n    const { placeholder } = this;\r\n    const displayValue = this.#text;\r\n\r\n    let addPlaceholderClass = false;\r\n    let selectText = displayValue;\r\n    if (selectText === '' && placeholder !== undefined) {\r\n      selectText = placeholder;\r\n      addPlaceholderClass = true;\r\n    }\r\n\r\n    const textPart = addPlaceholderClass ? 'placeholder' : 'text';\r\n\r\n    return (\r\n      <div aria-hidden=\"true\" class={{ 'select-placeholder': addPlaceholderClass }} part={textPart}>\r\n        {selectText}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  #renderListbox() {\r\n    const { disabled, isExpanded } = this;\r\n    const inputId = this.#inputId;\r\n\r\n    return (\r\n      <button\r\n        disabled={disabled}\r\n        id={inputId}\r\n        aria-label={this.#ariaLabel}\r\n        aria-haspopup=\"dialog\"\r\n        aria-expanded={`${isExpanded}`}\r\n        onClick={this.#onClick}\r\n        onFocus={this.#onFocus}\r\n        onBlur={this.#onBlur}\r\n        ref={ref => (this.#trigger = ref)}\r\n      ></button>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { host, helperText, errorText } = this;\r\n\r\n    const inputId = this.#inputId;\r\n\r\n    const hasError = !!errorText;\r\n    const hasHelper = !!helperText;\r\n    const hasBottomText = hasError || hasHelper;\r\n\r\n    return (\r\n      <Host\r\n        aria-labelledby={inputId}\r\n        aria-hidden={this.disabled ? 'true' : null}\r\n        class={{\r\n          'select-expanded': this.isExpanded,\r\n          'join-item': hostContext(host, 'pop-join'),\r\n        }}\r\n      >\r\n        <div class=\"label-text-wrapper\">\r\n          <label htmlFor={inputId} part=\"label\">\r\n            <slot name=\"label\" />\r\n          </label>\r\n        </div>\r\n\r\n        <div class=\"select-wrapper\">\r\n          <slot name=\"start\" />\r\n\r\n          <div class=\"select-wrapper-inner\">\r\n            {this.#renderSelectText()}\r\n            {this.#renderListbox()}\r\n          </div>\r\n\r\n          <slot name=\"end\" />\r\n\r\n          <ChevronDown />\r\n        </div>\r\n\r\n        <Show when={hasBottomText}>\r\n          <div class=\"text-wrapper\">\r\n            <Show when={hasError}>\r\n              <span class=\"error-text\">{errorText}</span>\r\n            </Show>\r\n            <Show when={hasHelper}>\r\n              <span class=\"helper-text\">{helperText}</span>\r\n            </Show>\r\n          </div>\r\n        </Show>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nconst getOptionValue = (el: HTMLPopSelectOptionElement) => {\r\n  const value = el.value;\r\n  return value === undefined ? el.textContent || '' : value;\r\n};\r\n\r\nlet selectIds = 0;\r\n\r\nconst OPTION_CLASS = 'select-interface-option';\r\n","pop-select-option {\r\n  display: none;\r\n}\r\n","import { Component, Host, Prop, h } from '@stencil/core';\r\nimport type { Color, Size } from 'src/interfaces';\r\n\r\n@Component({\r\n  tag: 'pop-select-option',\r\n  styleUrl: 'select-option.scss',\r\n})\r\nexport class SelectOption {\r\n  #inputId = `pop-selopt-${selectOptionIds++}`;\r\n\r\n  /**\r\n   * The text value of the option.\r\n   */\r\n  @Prop() value?: any | null;\r\n\r\n  /**\r\n   * If `true`, the user cannot interact with the select option. This property does not apply when `interface=\"action-sheet\"` as `ion-action-sheet` does not allow for disabled buttons.\r\n   */\r\n  @Prop({ mutable: true }) disabled?: boolean;\r\n\r\n  /**\r\n   * The color to use from your application's color palette.\r\n   * Default options are: `\"primary\"`, `\"secondary\"`, `\"accent\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `\"error\"`.\r\n   * For more information on colors, see [theming](/docs/theming/basics).\r\n   *\r\n   * @internal\r\n   */\r\n  @Prop({ mutable: true }) color?: Color;\r\n\r\n  /**\r\n   * Change size of the component\r\n   * Options are: `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`.\r\n   *\r\n   * @internal\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) size?: Size;\r\n\r\n  render() {\r\n    return <Host role=\"option\" id={this.#inputId}></Host>;\r\n  }\r\n}\r\n\r\nlet selectOptionIds = 0;\r\n",null,"import { Component, ComponentInterface, Fragment, Host, Prop, h } from '@stencil/core';\r\nimport { PopCheckboxCustomEvent, PopRadioGroupCustomEvent } from 'src/components';\r\nimport type { Color, Size } from 'src/interfaces';\r\nimport type { SelectPopoverOption } from './select-popover-interface';\r\n\r\n/**\r\n *\r\n * @internal\r\n */\r\n@Component({\r\n  tag: 'pop-select-popover',\r\n  styleUrl: 'select-popover.scss',\r\n  // shadow: true,\r\n})\r\nexport class SelectPopover implements ComponentInterface {\r\n  /**\r\n   * If `true`, allow empty on radio options\r\n   */\r\n  @Prop({ mutable: true }) required?: boolean;\r\n\r\n  /**\r\n   * If `true`, the select accepts multiple values\r\n   */\r\n  @Prop({ mutable: true }) multiple?: boolean;\r\n\r\n  /**\r\n   * The color to use from your application's color palette.\r\n   * Default options are: `\"primary\"`, `\"secondary\"`, `\"accent\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `\"error\"`.\r\n   * For more information on colors, see [theming](/docs/theming/basics).\r\n   */\r\n  @Prop({ mutable: true }) color?: Color;\r\n\r\n  /**\r\n   * Change size of the component\r\n   * Options are: `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`.\r\n   */\r\n  @Prop({ mutable: true }) size?: Size;\r\n\r\n  /**\r\n   * An array of options for the popover\r\n   */\r\n  @Prop() options: SelectPopoverOption[] = [];\r\n\r\n  #findOptionFromEvent(ev: PopCheckboxCustomEvent<any> | PopRadioGroupCustomEvent<any>) {\r\n    const { options } = this;\r\n    return options.find(o => o.value === ev.target.value);\r\n  }\r\n\r\n  #getValues(ev: PopCheckboxCustomEvent<any> | PopRadioGroupCustomEvent<any>): string | string[] | undefined {\r\n    const { multiple, options } = this;\r\n\r\n    if (multiple) {\r\n      // this is a popover with checkboxes (multiple value select)\r\n      // return an array of all the checked values\r\n      return options.filter(o => o.checked).map(o => o.value);\r\n    }\r\n\r\n    // this is a popover with radio buttons (single value select)\r\n    // return the value that was clicked, otherwise undefined\r\n    const option = this.#findOptionFromEvent(ev);\r\n    return option ? option.value : undefined;\r\n  }\r\n\r\n  #setChecked(ev: PopCheckboxCustomEvent<CheckboxChangeEventDetail>): void {\r\n    const { multiple } = this;\r\n    const option = this.#findOptionFromEvent(ev);\r\n\r\n    if (multiple && option) {\r\n      option.checked = ev.detail.checked;\r\n    }\r\n  }\r\n\r\n  #renderRadioOptions() {\r\n    const { options, required, color, size } = this;\r\n    const selected = options.filter(o => o.checked).map(o => o.value)[0];\r\n\r\n    return (\r\n      <pop-radio-group\r\n        value={selected}\r\n        color={color}\r\n        size={size}\r\n        allowEmpty={!required}\r\n        onPopChange={ev => {\r\n          if (!required && ev.detail.value === undefined) {\r\n            options[0].handler(undefined);\r\n            return;\r\n          }\r\n\r\n          const option = this.#findOptionFromEvent(ev);\r\n          option?.handler(this.#getValues(ev));\r\n        }}\r\n      >\r\n        {options.map(option => {\r\n          const clazz =\r\n            typeof option.cssClass === 'string'\r\n              ? option.cssClass\r\n              : Object.fromEntries(option.cssClass.map(cls => [cls, true]));\r\n\r\n          return (\r\n            <pop-item>\r\n              <pop-radio\r\n                value={option.value}\r\n                disabled={option.disabled}\r\n                color={option.color}\r\n                size={option.size}\r\n                class={clazz}\r\n              >\r\n                {option.text}\r\n              </pop-radio>\r\n            </pop-item>\r\n          );\r\n        })}\r\n      </pop-radio-group>\r\n    );\r\n  }\r\n\r\n  #renderCheckboxOptions() {\r\n    const { options } = this;\r\n\r\n    return (\r\n      <Fragment>\r\n        {options.map(option => {\r\n          const clazz =\r\n            typeof option.cssClass === 'string'\r\n              ? option.cssClass\r\n              : Object.fromEntries(option.cssClass.map(cls => [cls, true]));\r\n\r\n          return (\r\n            <pop-item>\r\n              <pop-checkbox\r\n                value={option.value}\r\n                color={this.color}\r\n                size={this.size}\r\n                checked={option.checked}\r\n                disabled={option.disabled}\r\n                class={clazz}\r\n                onPopChange={ev => {\r\n                  this.#setChecked(ev);\r\n                  option.handler(this.#getValues(ev));\r\n                }}\r\n              >\r\n                {option.text}\r\n              </pop-checkbox>\r\n            </pop-item>\r\n          );\r\n        })}\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  #renderOptions() {\r\n    const { multiple } = this;\r\n\r\n    if (multiple) return this.#renderCheckboxOptions();\r\n    return this.#renderRadioOptions();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <pop-list size={this.size}>{this.#renderOptions()}</pop-list>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;AAAO,MAAMA,IAAa;;AAEnB,MAAMC,IAAU,GAAGD;;;;;;AC8GnB,MAAME,MAAOC;EAClB,WAAWC,yCAAyC,YAAY;IAC9D,OAAOA,qCAAqCD;;EAE9C,WAAWE,0BAA0B,YAAY;IAC/C,OAAOA,sBAAsBF;;EAE/B,OAAOG,WAAWH;AAAE;;;;;;;;;;;;;GAef,OAAMI,mBAAmB,CAACC,GAASC;EACxC,IAAID,EAAGD,kBAAkB;;IAEvBC,EAAGD,mBAAmBG,MAAMC,KAAoBF,EAASE;SACpD;IACLT,KAAI,MAAMO,EAASD;;;;AAIhB,MAAMI,aAAcC,KAClBA,EAAIC,cAAcb,MAAYY,EAAIE;;;;;;;;;;;;;;;;;MCrI9BC;EAGX,WAAAC,CAAoBC;;IAFpBC,EAAAC,IAAAC,WAAA;IAGEC,EAAAD,MAAIF,GAAQD,GAAG;;EA+DjB,MAAAK,CAAOC;IACL,OAAOC,EAAAJ,MAAIK,GAAA,KAAAC,GAAQC,KAAZP,MAAaI,EAAAJ,MAAIF,GAAA,MAAOK;;EAGjC,OAAAK,CAAQC,GAAYC,GAAeC;IACjC,OAAOP,EAAAJ,MAAIK,GAAA,KAAAO,GAASL,KAAbP,MAAca,UAAUJ,GAAMC,GAAMN,EAAAJ,MAAIF,GAAA,MAAOa;;EAGxD,MAAAG,CAAOtB;IACL,OAAOY,EAAAJ,MAAIK,GAAA,KAAAU,GAAcR,KAAlBP,MAAmBR,GAAKY,EAAAJ,MAAIF,GAAA;;EAGrC,aAAOI,CAA+CL;IACpD,OAAO,IAAIF,EAA2BE;;;;2EAzE9BmB;EACR,OAAOA,EAAQC,UAAUC,SAAS;AACpC,GAACC,IAAA,SAAAA,+BAEY3B,GAAe4B;EAC1B,IAAIA,MAAaC,WAAW;IAC1BD,IAAW;;EAEb,OAAOE,MAAMC,KAAK/B,EAAIgC,iBAAiBJ;AACzC,GAACK,IAAA,SAAAA,mCAEgBjC,GAAekC;EAC9B,OAAOtB,EAAAJ,MAAIK,GAAA,KAAAc,GAAaZ,KAAjBP,MAAkBR,GAAKkC,GAC3BC,QAAOC,MAAMxB,EAAAJ,MAAIK,GAAA,KAAAwB,GAAUtB,KAAdP,MAAe4B,KAC5BD,QAAOC,KAAKA,EAAEE;AACnB,GAACf,IAAA,SAAAA,gCAEavB,GAAekC,GAAoBf;EAC/C,MAAMoB,IAAW3B,EAAAJ,MAAIK,GAAA,KAAAoB,GAAiBlB,KAArBP,MAAsBR,GAAKkC;EAE5C,OAAOf,MAAOU,YAAYU,EAASC,IAAI,KAAKD,EAASE,MAAML,KAAWA,EAAEjB,OAAOA;AACjF,GAACL,IAED4B,eAAA5B,0BAA0CT,GAAaM;EACrD,OACEgC,QAAQC,gBAAgBC,YAAYxC,GAAKR,MAAK;IAC5C,MAAMiD,IAAUzB,SAAS0B,cAAc1C;IACvCyC,EAAQrB,UAAUuB,IAAI;;;;eAMtBC,OAAOC,OAAOJ,GAAS;SAAKnC;MAASwC,eAAe;;;;;QAKpD,MAAMC,IAAO/B,SAASpB,cAAc,sBAAsBF,WAAWsB;IACrE+B,EAAKC,YAAYP;IAEjB,OAAO,IAAIQ,SAAQC,KAAW7D,iBAAiBoD,GAASS;AAAS,SAC5DD,QAAQC;AAEnB,GAACnC,IAEDsB,eAAAtB,2BACEpB,GACAiB,GACAC,GACAgB,GACAf;EAEA,MAAMK,IAAUZ,EAAAJ,MAAIK,GAAA,KAAAU,GAAcR,KAAlBP,MAAmBR,GAAKkC,GAAYf;EACpD,KAAKK,GAAS;IACZ,OAAO8B,QAAQE,OAAO;;EAExB,OAAOhC,EAAQR,QAAQC,GAAMC;AAC/B;;AAmBK,MAAMuC,IAAoBtD,EAAkBO,OAA8C;;AAClEP,EAAkBO,OAA0C;;AChG3F,MAAMgD,IAAY;;AAClB,MAAAC,IAAeD;;;;;;;;;;;;;;;;;MC6BFE,IAAM;;;;;;;;;;;;;;IACjBC,EAAAtD,IAAAC,MAAW,cAAcsD;IACzBC,EAAAxD,IAAAC,WAAA;IAEAwD,EAAAzD,IAAAC,WAAA;IACAyD,EAAA1D,IAAAC,WAAA;IA4RA0D,EAAA3D,IAAAC,OAAW;MACTA,KAAK2D,SAASC;AAAM;IAGtBC,EAAA9D,IAAAC,OAAU;MACRA,KAAK8D,QAAQF;AAAM;IAGrBG,EAAAhE,IAAAC,OAAWkC,MAAO8B;YACVhE,KAAK8B,KAAK;WACXkC;QACHC,QAAQ7D,EAAAJ,MAAIyD,GAAA;;AACZ;sBAnS2B;;gBAORrD,EAAAJ,MAAIqD,GAAA;;;oBA+BkC;;;;;qBAmCC;;;;;;;;;;EAnD9D,aAAAa,CAAcC;IACZnE,KAAKoE,YAAYhE,EAAAJ,MAAIqE,GAAA,KAAAC;IACrB,IAAItE,KAAKoE,WAAW;;MAElB;;IAGFpE,KAAKuE,UAAUC,aAAaL,GAAOA;IACnCnE,KAAKyE,UAAUb,KAAK;MAAEO;;;EA0HxB,iBAAAO;IACE1E,KAAKmE,QAAQ;;EAGf,wBAAAQ,CAAyBC;IACvB5E,KAAKmE,QAAQS;;EAGf,iBAAAC;IACE5E,EAAAD,MAAIuD,GAAwBuB,EAAkB9E,KAAK+E,MAAM,EAAC,iBAAc;IAExEC,EAAgBC,MAAMjF,MAAM,cAAc;MACxCkF,UAAU;MACVC,UAAU;MACVC,UAAU;MACVC,UAAU;MACVC,MAAMC,EAAOC,IAAI,eAAe;;;;;;SASpC,cAAMC;IACJrF,EAAAJ,MAAIyD,GAAA,KAAUiC;;EAIhB,UAAM5D,CAAK6D;IACT,IAAI3F,KAAKoF,YAAYpF,KAAK4F,cAAcxF,EAAAJ,MAAIwD,GAAA,MAAW;IAEvDxD,KAAK4F,aAAa;IAClB,MAAMC,IAAgB7F,KAAKmE;IAE3B,MAAM2B,UAAgB7C,EAAkB/C,OAAO;MAC7C6F,WAAW;MACXC,gBAAgB;QACd7B,OAAO/D,EAAAJ,MAAIqE,GAAA,KAAA4B;QACXd,UAAUnF,KAAKmF;QACfD,UAAUlF,KAAKkF;QACfgB,OAAOlG,KAAKkG;QACZZ,MAAMtF,KAAKsF;QACXnF,SAASC,EAAAJ,MAAIqE,GAAA,KAAA8B,GAAUC,KAAIC;UACzB,MAAMlC,IAAQmC,eAAeD;UAC7B,MAAME,IAAQjF,MAAMC,KAAK8E,EAAOpF,WAAWU,QAAO6E,KAAOA,MAAQ;UAEjE,OAAO;YACLC,MAAMJ,EAAOK,eAAe;YAC5BvC,OAAOA;YACPwC,SAASC,EAAiBf,GAAe1B,GAAOnE,KAAK6G;YACrDzB,UAAUiB,EAAOjB;YACjBc,OAAOG,EAAOH;YACdZ,MAAMe,EAAOf;YACbwB,UAAU,EAACC,MAAiBR;YAC5BS,SAAS7C;cACPnE,KAAKmE,QAAQA;cACb,KAAKnE,KAAKkF,UAAU;gBAClBlF,KAAKiH;;;;AAGa;;MAG5B3B,MAAMtF,KAAKsF;MACX4B,kBAAkBlH,KAAKkF;MACvBiC,UAAU;MACVC,iBAAiB;MACjBC,cAAc;MACdC,eAAe;MACfC,WAAW5B,IAAQ,UAAU;MAC7B6B,WAAW;MACX7B,OAAOA;;IAET1F,EAAAD,MAAIwD,GAAYsC,GAAO;IAEvBA,EAAQ2B,iBAAiB,eAAc;MACrCxH,EAAAD,MAAIwD,GAAYnC,WAAS;MACzBrB,KAAK4F,aAAa;MAClB5F,KAAK0H,WAAW9D;MAChB5D,KAAKyF;AAAU;UAGXK,EAAQ6B;IAEd,MAAMC,IAAkBxH,EAAAJ,MAAIqE,GAAA,KAAA8B,GAAUC,KAAIxE,KAAKA,EAAEuC,QAAO0D,QAAQ7H,KAAKmE;IACrE,IAAIyD,OAAqB,GAAG;;;;MAI1B,MAAME,IAAqBhC,EAAQrG,cACjC;MAEF,IAAIqI,GAAoB;QACtBA,EAAmBC,QAAQ,aAAarC;;;2BAKxCoC,EAAmBpC;;WAEhB;MACL,MAAMsC,IAAelC,EAAQrG,cAC3B,sCAAsCmI,IAAkB;MAE1D,IAAII,GAAc;QAChBA,EAAatC;QAEb,MAAMuC,IAAgBD,EAAavI,cAA2B;QAC9D,IAAIwI,GAAe;UACjBA,EAAcvC;;;;IAKpB,OAAOI;;EAIT,WAAMmB;IACJ,IAAIjH,KAAKoF,aAAapF,KAAK4F,YAAY;IAEvC5F,KAAK4F,aAAa;IAClBxF,EAAAJ,MAAIwD,GAAA,KAAUhD;;EAkIhB,MAAA0H;IACE,OAAMnD,MAAEA,GAAIoD,YAAEA,GAAU/D,WAAEA,KAAcpE;IAExC,MAAMoI,IAAUhI,EAAAJ,MAAIqD,GAAA;IAEpB,MAAMgF,MAAajE;IACnB,MAAMkE,MAAcH;IACpB,MAAMI,IAAgBF,KAAYC;IAElC,OACExJ,EAAC0J,GAAI;MAAAC,KAAA;MAAA,mBACcL;MAAO,eACXpI,KAAKoF,WAAW,SAAS;MACtCsD,OAAO;QACL,mBAAmB1I,KAAK4F;QACxB,aAAa+C,EAAY5D,GAAM;;OAGjCjG,EAAA;MAAA2J,KAAA;MAAKC,OAAM;OACT5J,EAAA;MAAA2J,KAAA;MAAOG,SAASR;MAASS,MAAK;OAC5B/J,EAAA;MAAA2J,KAAA;MAAMK,MAAK;UAIfhK,EAAA;MAAA2J,KAAA;MAAKC,OAAM;OACT5J,EAAA;MAAA2J,KAAA;MAAMK,MAAK;QAEXhK,EAAA;MAAA2J,KAAA;MAAKC,OAAM;OACRtI,EAAAJ,MAAIqE,GAAA,KAAA0E,GAAkBxI,KAAtBP,OACAI,EAAAJ,MAAIqE,GAAA,KAAA2E,GAAezI,KAAnBP,QAGHlB,EAAA;MAAA2J,KAAA;MAAMK,MAAK;QAEXhK,EAACmK,GAAW;MAAAR,KAAA;SAGd3J,EAACoK,GAAI;MAAAT,KAAA;MAACU,MAAMZ;OACVzJ,EAAA;MAAA2J,KAAA;MAAKC,OAAM;OACT5J,EAACoK,GAAI;MAAAT,KAAA;MAACU,MAAMd;OACVvJ,EAAA;MAAA2J,KAAA;MAAMC,OAAM;OAActE,KAE5BtF,EAACoK,GAAI;MAAAT,KAAA;MAACU,MAAMb;OACVxJ,EAAA;MAAA2J,KAAA;MAAMC,OAAM;OAAeP;;;;;;;;;;;;;;;;;EA1JrC,OAAMhE,OAAEA,KAAUnE;EAClB,KAAKmE,GAAO,OAAO;EAEnB,OAAO7C,MAAM8H,QAAQjF,KAASA,IAAQ,EAACA;AACzC,GAACgC,IAAA,SAAAA;EAGC,OAAO7E,MAAMC,KAAKvB,KAAK+E,KAAKvD,iBAAiB;AAC/C,GAAC6H,IAAA,SAAAA;EAGC,MAAMC,IAAetJ,KAAKsJ;EAC1B,IAAIA,GAAc;IAChB,OAAOA;;EAGT,MAAMC,IAASnJ,EAAAJ,MAAIqE,GAAA,KAAA4B;EAEnB,IAAIsD,EAAOC,WAAW,GAAG;IACvB,OAAO;;EAET,OAAOD,EACJnD,KAAIjC;IACH,MAAMsF,IAAWrJ,EAAAJ,MAAIqE,GAAA,KAAA8B,GAAUlE,MAAKoE;MAClC,MAAMqD,IAAcrD,EAAOlC,UAAUkC,EAAOK,eAAe;MAC3D,OAAOiD,EAAexF,GAAOuF,GAAa1J,KAAK6G;AAAQ;IAEzD,OAAO4C,IAAWA,EAAS/C,cAAc;AAAI,MAE9C/E,OAAOiI,SACPC,KAAK;AACV,GAACC,IAAA,SAAAA;EAGC,OAAMC,aAAEA,KAAgB/J;EACxB,MAAMgK,IAAe5J,EAAAJ,MAAIqE,GAAA,KAAAgF;EACzB,MAAMY,IAAe7J,EAAAJ,MAAIuD,GAAA,KAAsB;;;;;SAO/C,IAAI2G,IAAgBF;EACpB,IAAIE,MAAkB,MAAMH,MAAgB1I,WAAW;IACrD6I,IAAgBH;;;;;;;;SAUlB,IAAIE,MAAiB5I,WAAW;IAC9B6I,IAAgBA,MAAkB,KAAKD,IAAe,GAAGA,MAAiBC;;EAG5E,OAAOA;AACT,GAAC5F,IAAA,SAAAA;EAGC,KAAKtE,KAAKkF,UAAU,OAAO;EAE3B,OAAMsE,QAAEA,KAAWpJ,EAAAJ,MAAIqE,GAAA,KAAA4B;EACvB,IAAIuD,MAAW,MAAMxJ,KAAKmF,UAAU,OAAO;EAC3C,IAAIqE,IAASxJ,KAAKmK,KAAK,OAAOnK,KAAKoK,sBAAsB;EACzD,IAAIZ,IAASxJ,KAAKqK,KAAK,OAAOrK,KAAKsK,oBAAoB;EACvD,OAAO;AACT,GAACvB,IAAA,SAAAA;EAGC,OAAMgB,aAAEA,KAAgB/J;EACxB,MAAMgK,IAAe5J,EAAAJ,MAAIqE,GAAA,KAAAgF;EAEzB,IAAIkB,IAAsB;EAC1B,IAAIC,IAAaR;EACjB,IAAIQ,MAAe,MAAMT,MAAgB1I,WAAW;IAClDmJ,IAAaT;IACbQ,IAAsB;;EAGxB,MAAME,IAAWF,IAAsB,gBAAgB;EAEvD,OACEzL,EAAA;IAAA,eAAiB;IAAO4J,OAAO;MAAE,sBAAsB6B;;IAAuB1B,MAAM4B;KACjFD;AAGP,GAACxB,IAAA,SAAAA;EAGC,OAAM5D,UAAEA,GAAQQ,YAAEA,KAAe5F;EACjC,MAAMoI,IAAUhI,EAAAJ,MAAIqD,GAAA;EAEpB,OACEvE,EAAA;IACEsG,UAAUA;IACVzE,IAAIyH;IAAO,cACChI,EAAAJ,MAAIqE,GAAA,KAAAyF;IAAW,iBACb;IAAQ,iBACP,GAAGlE;IAClB8E,SAAStK,EAAAJ,MAAI+D,GAAA;IACb4G,SAASvK,EAAAJ,MAAI0D,GAAA;IACbkH,QAAQxK,EAAAJ,MAAI6D,GAAA;IACZgH,KAAKA,KAAQ5K,EAAAD,MAAIyD,GAAYoH,GAAG;;AAGtC;;AAsDF,MAAMvE,iBAAkBnH;EACtB,MAAMgF,IAAQhF,EAAGgF;EACjB,OAAOA,MAAU9C,YAAYlC,EAAGuH,eAAe,KAAKvC;AAAK;;AAG3D,IAAIb,IAAY;;AAEhB,MAAMyD,IAAe;;;;ACzfrB,MAAM+D,IAAkB;;AACxB,MAAAC,IAAeD;;;;;;;;;;MCMFE,KAAY;;;IACvBC,EAAAlL,IAAAC,MAAW,cAAckL;;;;;;EA6BzB,MAAAhD;IACE,OAAOpJ,EAAC0J,GAAI;MAAAC,KAAA;MAAC/H,MAAK;MAASC,IAAIP,EAAAJ,MAAIiL,GAAA;;;;;;;AAIvC,IAAIC,KAAkB;;;;AC1CtB,MAAMC,KAAmB;;AACzB,MAAAC,KAAeD;;;;;;;;;;MCaFE,KAAa;;;;;;;;mBA2BiB;;EAoHzC,MAAAnD;IACE,OACEpJ,EAAC0J,GAAI;MAAAC,KAAA;OACH3J,EAAA;MAAA2J,KAAA;MAAUnD,MAAMtF,KAAKsF;OAAOlF,GAAAJ,MAAIsL,IAAA,KAAAC,IAAehL,KAAnBP;;;;mEArHbgE;EACnB,OAAM7D,SAAEA,KAAYH;EACpB,OAAOG,EAAQ8B,MAAKL,KAAKA,EAAEuC,UAAUH,EAAGC,OAAOE;AACjD,GAACqH,KAAA,SAAAA,yBAEUxH;EACT,OAAMkB,UAAEA,GAAQ/E,SAAEA,KAAYH;EAE9B,IAAIkF,GAAU;;;IAGZ,OAAO/E,EAAQwB,QAAOC,KAAKA,EAAE+E,UAASP,KAAIxE,KAAKA,EAAEuC;;;;IAKnD,MAAMkC,IAASjG,GAAAJ,MAAIsL,IAAA,KAAAG,IAAqBlL,KAAzBP,MAA0BgE;EACzC,OAAOqC,IAASA,EAAOlC,QAAQ9C;AACjC,GAACqK,KAAA,SAAAA,0BAEW1H;EACV,OAAMkB,UAAEA,KAAalF;EACrB,MAAMqG,IAASjG,GAAAJ,MAAIsL,IAAA,KAAAG,IAAqBlL,KAAzBP,MAA0BgE;EAEzC,IAAIkB,KAAYmB,GAAQ;IACtBA,EAAOM,UAAU3C,EAAG2H,OAAOhF;;AAE/B,GAACiF,KAAA,SAAAA;EAGC,OAAMzL,SAAEA,GAAOgF,UAAEA,GAAQe,OAAEA,GAAKZ,MAAEA,KAAStF;EAC3C,MAAMyJ,IAAWtJ,EAAQwB,QAAOC,KAAKA,EAAE+E,UAASP,KAAIxE,KAAKA,EAAEuC,QAAO;EAElE,OACErF,EAAA;IACEqF,OAAOsF;IACPvD,OAAOA;IACPZ,MAAMA;IACNuG,aAAa1G;IACb2G,aAAa9H;MACX,KAAKmB,KAAYnB,EAAG2H,OAAOxH,UAAU9C,WAAW;QAC9ClB,EAAQ,GAAG6G,QAAQ3F;QACnB;;MAGF,MAAMgF,IAASjG,GAAAJ,MAAIsL,IAAA,KAAAG,IAAqBlL,KAAzBP,MAA0BgE;MACzCqC,GAAQW,QAAQ5G,GAAAJ,MAAIsL,IAAA,KAAAE,IAAWjL,KAAfP,MAAgBgE;AAAI;KAGrC7D,EAAQiG,KAAIC;IACX,MAAME,WACGF,EAAOS,aAAa,WACvBT,EAAOS,WACPrE,OAAOsJ,YAAY1F,EAAOS,SAASV,KAAII,KAAO,EAACA,GAAK;IAE1D,OACE1H,EAAA,kBACEA,EAAA;MACEqF,OAAOkC,EAAOlC;MACdiB,UAAUiB,EAAOjB;MACjBc,OAAOG,EAAOH;MACdZ,MAAMe,EAAOf;MACboD,OAAOnC;OAENF,EAAOI;AAED;AAKrB,GAACuF,KAAA,SAAAA;EAGC,OAAM7L,SAAEA,KAAYH;EAEpB,OACElB,EAACmN,GAAQ,MACN9L,EAAQiG,KAAIC;IACX,MAAME,WACGF,EAAOS,aAAa,WACvBT,EAAOS,WACPrE,OAAOsJ,YAAY1F,EAAOS,SAASV,KAAII,KAAO,EAACA,GAAK;IAE1D,OACE1H,EAAA,kBACEA,EAAA;MACEqF,OAAOkC,EAAOlC;MACd+B,OAAOlG,KAAKkG;MACZZ,MAAMtF,KAAKsF;MACXqB,SAASN,EAAOM;MAChBvB,UAAUiB,EAAOjB;MACjBsD,OAAOnC;MACPuF,aAAa9H;QACX5D,GAAAJ,MAAIsL,IAAA,KAAAI,IAAYnL,KAAhBP,MAAiBgE;QACjBqC,EAAOW,QAAQ5G,GAAAJ,MAAIsL,IAAA,KAAAE,IAAWjL,KAAfP,MAAgBgE;AAAI;OAGpCqC,EAAOI;AAED;AAKrB,GAAC8E,KAAA,SAAAA;EAGC,OAAMrG,UAAEA,KAAalF;EAErB,IAAIkF,GAAU,OAAO9E,GAAAJ,MAAIsL,IAAA,KAAAU,IAAuBzL,KAA3BP;EACrB,OAAOI,GAAAJ,MAAIsL,IAAA,KAAAM,IAAoBrL,KAAxBP;AACT","ignoreList":[]}